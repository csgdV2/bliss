every 1 second:
	loop all players:
		if {-Disabled::%loop-player's uuid%} is not set:
			set {-Disabled::%loop-player's uuid%} to 0
		else:
			if {-Disabled::%loop-player's uuid%} > 0:
				remove 1 from {-Disabled::%loop-player's uuid%}


on load:
	set {-Tagged} to team named "Tagged"
	set team color of {-Tagged} to purple

# Tagging (astral projection)

right click on entity:
	if {-AstralProjection::%player's uuid%} is true:
		if player's gamemode is spectator:
			if target entity of player is not invisible:
				send "<##A01FFF>🔮 <##B8FFFB>Tagged %target entity of player.getName()%" to player
			else:
				send "<##A01FFF>🔮 <##B8FFFB>Tagged &k???" to player
			apply glowing without particles to target entity of player for 20 seconds


# Spooking (astral projection)

on player start spectating:
	if WhatGem(player's held item) is "astra":
		if WhatTier(player's held item) is 2:
			if WhatEnergy(player's held item) is not 0:
				if {-AstralProjection::%player's uuid%} is true:
					if player's gamemode is spectator:

						if spectator target of player is not invisible:
							send "<##A01FFF>🔮 <##B8FFFB>ockSpooked &e%spectator target of player.getName()% <##B8FFFB>for &e10s" to player
						else:
							send "<##A01FFF>🔮 <##B8FFFB>Spooked &e&k??? <##B8FFFB>for &e10s" to player

						if player is not invisible:
							send "<##A01FFF>🔮 <##B8FFFB>You have been Spooked by &e%player.getName()% <##B8FFFB>for &e10 &7seconds" to spectator target of player
						else:
							send "<##A01FFF>🔮 <##B8FFFB>You have been Spooked by &e&k??? <##B8FFFB>for &e10 &7seconds" to spectator target of player

						apply darkness without particles to spectator target of player for 10 seconds replacing the existing effect
						play sound "entity.warden.nearby_closer" with volume 20 and pitch 0.5 to spectator target of player
						set {-Disabled::%spectator target of player's uuid%} to 10
						teleport player to {-Loc::%player's uuid%}
						set player's gamemode to survival
						execute console command "/npc remove all"
						set {-AstralProjection::%player's uuid%} to false
						if WhatEnergy(player's held item) > 0:
							setCooldown("Astral::%uuid of player%", toMilli(6, 30), player)
						if WhatEnergy(player's held item) > 0:
							setCooldown("Astral::%uuid of player%", toMilli(5, 45), player)
						if WhatEnergy(player's held item) > 0:
							setCooldown("Astral::%uuid of player%", toMilli(4, 30), player)
						if WhatEnergy(player's held item) > 0:
							setCooldown("Astral::%uuid of player%", toMilli(3, 45), player)
						if WhatEnergy(player's held item) > 0:
							setCooldown("Astral::%uuid of player%", toMilli(2, 30), player)

# Activating astral void

right click on entity:
	if player's gamemode is not spectator:
		if IsDisabled(player) is not true:
			if WhatGem(player's held item) is "astra":
				if WhatTier(player's held item) is 2:
					if WhatEnergy(player's held item) is not 0:
						if canUsePower("Astral::%uuid of player%") is true:
							send "<##A01FFF>🔮 <##B8FFFB>You have activated &7Astral Void" to player
							If WhatEnergy(player's held item) > 0:
								setCooldown("Astral::%uuid of player%", toMilli(7, 45), player)
							If WhatEnergy(player's held item) > 2:
								setCooldown("Astral::%uuid of player%", toMilli(5, 45), player)
							If WhatEnergy(player's held item) > 4:
								setCooldown("Astral::%uuid of player%", toMilli(4, 45), player)
							If WhatEnergy(player's held item) > 6:
								setCooldown("Astral::%uuid of player%", toMilli(4, 0), player)
							If WhatEnergy(player's held item) > 7:
								setCooldown("Astral::%uuid of player%", toMilli(3, 45), player)
							set {_loc} to (target entity of player)'s location
							loop 45 times:
								loop all players within 6 blocks of {_loc}:
									if loop-player is not player:
										if IsTrusted(player, loop-player) is not true:
											set {-Disabled::%loop-player's uuid%} to 2
								AstraCircle(6, {_loc})
								wait 0.5 second

# Teleporting player in astral projection back to his zombie once it gets hit

on npc left click:
	loop all players:
		if {-AstralProjection::%loop-player's uuid%} is true:
			if loop-player's gamemode is spectator:
				set loop-player's gamemode to survival
				set {-AstralProjection::%loop-player's uuid%} to false
				teleport loop-player to event-npc
				delete event-npc
				loop all items in loop-player's inventory:
					if IsGem(loop-item) is true:
						if WhatEnergy(loop-item) > 0:
							setCooldown("Astral::%uuid of loop-player%", toMilli(6, 30), loop-player)
						if WhatEnergy(loop-item) > 0:
							setCooldown("Astral::%uuid of loop-player%", toMilli(5, 45), loop-player)
						if WhatEnergy(loop-item) > 0:
							setCooldown("Astral::%uuid of loop-player%", toMilli(4, 30), loop-player)
						if WhatEnergy(loop-item) > 0:
							setCooldown("Astral::%uuid of loop-player%", toMilli(3, 45), loop-player)
						if WhatEnergy(loop-item) > 0:
							setCooldown("Astral::%uuid of loop-player%", toMilli(2, 30), loop-player)

# Drawing particles on players in astral projection

every 2 seconds:
	loop all players:
		if {-AstralProjection::%loop-player's uuid%} is true:
			if loop-player's gamemode is spectator:
				draw 20 of dust using dustOption(rgb(160, 31, 255), 1) at location 1 block above loop-player with offset vector(0.4, 0.4, 0.4) with extra 0 with force

# Stopping astral projection when player left clicks air

on left click:
	if {-AstralProjection::%player's uuid%} is true:
		if player's gamemode is spectator:		
			teleport the player to {-Loc::%player's uuid%}
			loop all items in player's inventory:
				if IsGem(loop-item) is true:
					if WhatEnergy(loop-item) > 0:
						setCooldown("Astral::%uuid of player%", toMilli(6, 30), player)
					if WhatEnergy(loop-item) > 0:
						setCooldown("Astral::%uuid of player%", toMilli(5, 45), player)
					if WhatEnergy(loop-item) > 0:
						setCooldown("Astral::%uuid of player%", toMilli(4, 30), player)
					if WhatEnergy(loop-item) > 0:
						setCooldown("Astral::%uuid of player%", toMilli(3, 45), player)
					if WhatEnergy(loop-item) > 0:
						setCooldown("Astral::%uuid of player%", toMilli(2, 30), player)
			set player's gamemode to survival
			if player is not invisible:				
				execute console command "/npc remove %player%"
			else:				
				execute console command "/npc remove all"
			set {-AstralProjection::%player's uuid%} to false


# Preventing player from going further than a 150 block radius whilst in astral projection

on player move:
	if {-AstralProjection::%player's uuid%} is true:
		if player's gamemode is spectator:
			if player is not within 150 blocks of {-Loc::%player's uuid%}:
				push player backwards at speed 1

# Activating astral projection

on right click:
	if target entity of player is not set:
		if IsDisabled(player) is not true:
			if WhatGem(player's held item) is "astra":
				if WhatTier(player's held item) is 2:
					if WhatEnergy(player's held item) is not 0:
						if canUsePower("Astral::%uuid of player%") is true:
							if {-AstralProjection::%player's uuid%} is not true:
								If WhatEnergy(player's held item) > 0:
									setCooldown("Astral::%uuid of player%", toMilli(7, 45), player)
								If WhatEnergy(player's held item) > 2:
									setCooldown("Astral::%uuid of player%", toMilli(5, 45), player)
								If WhatEnergy(player's held item) > 4:
									setCooldown("Astral::%uuid of player%", toMilli(4, 45), player)
								If WhatEnergy(player's held item) > 6:
									setCooldown("Astral::%uuid of player%", toMilli(4, 0), player)
								If WhatEnergy(player's held item) > 7:
									setCooldown("Astral::%uuid of player%", toMilli(3, 45), player)
								send "<##A01FFF>🔮 <##B8FFFB>You have activated <##c7c7c7>Astral Projection" to player
								set {-Loc::%player's uuid%} to location of player
								set {_uuid} to uuid of player
								if player is not invisible:
									create citizen named "%player%" at {-Loc::%player's uuid%}
									execute console command "/npc select %player%"
								else:
									create citizen named "&k???" at {-Loc::%player's uuid%}
									execute console command "/npc select &k???"
								execute console command "/npc gravity"
								set player's gamemode to spectator
								set {-AstralProjection::%player's uuid%} to true

every 10 ticks:
	loop all players:
		if {-AstralProjection::%loop-player's uuid%} is true:
			if block above loop-player is stone or grass block or dirt or cobblestone:
				apply blindness 4 to loop-player for 3 second replacing the existing effect
	

# Activating dimensional drift

on right click:
	if player is holding an axe or a sword or air:
		if player's gamemode is not spectator:
			if IsDisabled(player) is not true:
				if WhatGem(player's offhand item) is "astra":
					if WhatTier(player's offhand item) is 1 or 2:
						if WhatEnergy(player's offhand item) is not 0:
							if {-DoubleClick::%player's uuid%} is not set:
								set {-DoubleClick::%player's uuid%} to true
							else:
								delete {-DoubleClick::%player's uuid%}
								if canUsePower("Drift::%uuid of player%") is true:
									player is not sneaking
									set {-jumpAmount::%player's uuid%} to 1
									setCooldown("Drift::%uuid of player%", toMilli(0, 40), player)
									apply invisibility without particles to player for 200 ticks
									send "<##A01FFF>🔮 <##FF686F>You used <##C7C7C7>Dimensional Drift" to player
									set {_loc} to location of player
									summon horse at player
									set {-astraHorse::%player's uuid%} to last spawned entity
									set {-astraHorse::%player's uuid%}'s movement speed attribute to 0.243
									set {-astraHorse::%player's uuid%}'s max health to 53
									execute console command "attribute %uuid of {-astraHorse::%player's uuid%}% horse.jump_strength base set 1.2"
									make {-astraHorse::%player's uuid%} invisible
									make {-astraHorse::%player's uuid%} invincible
									equip {-astraHorse::%player's uuid%} with a saddle
									tame {-astraHorse::%player's uuid%} to the player
									make player ride {-astraHorse::%player's uuid%}
									set {-driftActive::%player's uuid%} to true
									set {-driftNoFall::%player's uuid%} to true
									hide player
									wait 7 seconds
									reveal player
									set {-driftActive::%player's uuid%} to false
									remove invisibility from potion effects of player
									{-astraHorse::%player's uuid%}.eject()
									kill {-astraHorse::%player's uuid%}
									wait 5 seconds
									set {-driftNoFall::%player's uuid%} to false
								else:
									set {_bb} to getCooldownSeconds("Drift::%uuid of player%")
									send "<##A01FFF>🔮 <##FF686F>Your <##C7C7C7>Dimensional Drift <##FF686F>skill is on cooldown for <##A01FFF>%{_bb}%" to player

# Astra horse double jump mechanic

on horse jump:
	loop all players:
		if loop-player is riding {-astraHorse::%loop-player's uuid%}:
			if {-jumpAmount::%loop-player's uuid%} > 0:
				set {-Jumping::%loop-player's uuid%} to true
				{-astraHorse::%loop-player's uuid%}.eject()
				wait 3 tick
				push loop-player up at speed 1.5
				push loop-player forward at speed 2.5
				kill {-astraHorse::%loop-player's uuid%}
				wait 1 second
				set {-Jumping::%loop-player's uuid%} to false

# Dimensional drift particles

every 2 ticks:
	loop all players:
		if {-driftActive::%loop-player's uuid%} is true:
			set {_loc} to location 1 block above loop-player
			draw 20 of dust using dustOption(rgb(156, 16, 255), 1) at {_loc} with offset vector(0.4, 0.4, 0.4) with extra 0 with force

# Spawning new horse once you double jump

every 0.5 second:
	loop all players:
		if the block below loop-player is not air:
			if loop-player is not riding a horse:
				if {-driftActive::%loop-player's uuid%} is true:
					if {-Jumping::%loop-player's uuid%} is not true:
						set {_loc} to location of loop-player
						summon horse at loop-player
						set {-astraHorse::%loop-player's uuid%} to last spawned entity
						set {-astraHorse::%loop-player's uuid%}'s movement speed attribute to 0.243
						set {-astraHorse::%loop-player's uuid%}'s max health to 50
						heal {-astraHorse::%loop-player's uuid%}
						execute console command "attribute %uuid of {-astraHorse::%loop-player's uuid%}% horse.jump_strength base set 1.2"
						make {-astraHorse::%loop-player's uuid%} invisible
						make {-astraHorse::%loop-player's uuid%} invincible
						equip {-astraHorse::%loop-player's uuid%} with a saddle
						tame {-astraHorse::%loop-player's uuid%} to the loop-player
						make loop-player ride {-astraHorse::%loop-player's uuid%}
						

# Being able to get off of current horse (aka stop using ability)

on sneak toggle:
	if player is riding {-astraHorse::%player's uuid%}:
		remove invisibility from potion effects of player
		{-astraHorse::%player's uuid%}.eject()
		set {-driftActive::%player's uuid%} to false
		setCooldown("Drift::%uuid of player%", toMilli(0, 35), player)
		kill {-astraHorse::%player's uuid%}

# No fall damage when using dimensional drift

on damage:
	if damage cause is fall:
		if {-driftNoFall::%victim's uuid%} is true:
			cancel event

# Activating unbounded

on damage:
	if {-Daggers::%attacker's uuid%} is not true:
		victim is not attacker
		if IsDisabled(attacker) is not true:
			if WhatGem(attacker's held item) is "astra":
				if WhatTier(attacker's held item) is 2:
					if WhatEnergy(attacker's held item) is not 0:
						if canUsePower("Daggers::%uuid of attacker%") is true:
							if victim is a player:
								set {-Unbounded::%attacker's uuid%} to true
								cancel event
								if victim is not invisible:
									send "<##A01FFF>🔮 <##B8FFFB>You have used <##C7C7C7>Unbounded <##B8FFFB>on &2%victim.getName()%" to attacker
								else:
									send "<##A01FFF>🔮 <##B8FFFB>You have used <##C7C7C7>Unbounded <##B8FFFB>on &2&k???" to attacker
								set attacker's gamemode to spectator
								teleport attacker to victim
								wait 1 tick
								set spectator target of attacker to victim
							else:
								send "<##A01FFF>🔮&c You can only unbound on &eplayers" to attacker
						else:
							set {_message} to getActionBarCooldown("Daggers::%uuid of attacker%")
							send "<##A01FFF>🔮 <##C7C7C7>Unbounded <##FF686F>is on cooldown for <##A01FFF>%{_message}%" to attacker

# Setting the unbounded player back to survival once the person they're spectating gets hit

on damage:
	loop all players:
		if loop-player's gamemode is spectator:
			if loop-player is within 0.3 blocks of victim:
				if {-Unbounded::%loop-player's uuid%} is true:
					set loop-player's gamemode to survival

# When person that's unbounding gets set to survival, it checks the gem that the other person has and disables it for 30s

on player stop spectating:
	if {-Unbounded::%player's uuid%} is true:
		setCooldown("Daggers::%uuid of player%", toMilli(4, 30), player)
		teleport player to spectator target of player
		set {-Unbounded::%player's uuid%} to false
		loop all players within 1 blocks of player:
			if loop-player is not player:
				loop all items in loop-player's inventory:
					if {_gem} is not set:
						if WhatGem(loop-item) is "astra":
							set {_gem} to "<##A01FFF>&lᴀsᴛʀᴀ"
						else if WhatGem(loop-item) is "wealth":
							set {_gem} to "<##0EC912>&lᴡᴇᴀʟᴛʜ"
						else if WhatGem(loop-item) is "puff":
							set {_gem} to "<##EFEFEF>&lᴘᴜғғ"
						else if WhatGem(loop-item) is "speed":
							set {_gem} to "<##FEFD17>&lsᴘᴇᴇᴅ"
						else if WhatGem(loop-item) is "life":
							set {_gem} to "<##FE04B4>&lʟɪғᴇ"
						else if WhatGem(loop-item) is "strength":
							set {_gem} to "<##F10103>&lsᴛʀᴇɴɢᴛʜ"
						else if WhatGem(loop-item) is "flux":
							set {_gem} to "<##5ED7FF>&lғʟᴜx"
						else if WhatGem(loop-item) is "fire":
							set {_gem} to "<##FE8120>&lғɪʀᴇ"

						if loop-player is not invisible:
							send "<##A01FFF>🔮 <##B8FFFB>You haunted and disabled &e%loop-player%'s %{_gem}% <##B8FFFB>for &e30s" to player
						else:
							send "<##A01FFF>🔮 <##B8FFFB>You haunted and disabled &e&k???&e's %{_gem}% <##B8FFFB>for &e30s" to player
						set {-Disabled::%loop-player's uuid%} to 25
						set player's gamemode to survival

# Fixing teleport bug in astral projection or unbounded

on player teleport:
	if {-Unbounded::%player's uuid%} is true:
		cancel event
	if {-AstralProjection::%player's uuid%} is true:
		if teleport cause is spectate:
			cancel event

# Astra circle function

function AstraCircle(s: number, p: location):
	set {_spacing} to 0.5
	set {_pl} to location of {_p}
	set {_circumference} to 2 * pi * {_s}
	
	# Calculate the number of particles based on the spacing
	set {_numParticles} to floor({_circumference} / {_spacing})
	
	# Spawn the exact number of particles needed

	loop {_numParticles} times:
		set {_angle} to loop-value * 360 / {_numParticles}
		set {_v} to spherical vector with radius {_s}, yaw {_angle} and pitch 0
		
		make 1 of dust using dustOption(rgb(255, 20, 243), 1) at {_pl} ~ {_v}

# Phasing passive

on damage:
	if {-phasing::%victim's uuid%} is not true:
		victim is not attacker
		loop all items in victim's inventory:
			if WhatGem(loop-item) is "astra":
				if WhatTier(loop-item) is 2:
					chance of 10%
					cancel event
					set {-phasing::%victim's uuid%} to true
					hide victim
					wait 10 ticks
					reveal victim
					set {-phasing::%victim's uuid%} to false
				if WhatTier(loop-item) is 1:
					chance of 5%
					cancel event
					set {-phasing::%victim's uuid%} to true
					apply invisibility without particles to victim for 10 ticks
					hide victim
					wait 10 ticks
					reveal victim
					set {-phasing::%victim's uuid%} to false

on join:
	reveal player

on damage:
	if {-phasing::%victim's uuid%} is true:
		cancel event

# Soul capture - spawning particles

on death:
	attacker is a player
	victim is not a player
	if WhatGem(attacker's offhand item) is "astra":
		if WhatTier(attacker's offhand item) is 2:
			if WhatEnergy(attacker's offhand item) > 2:
				set {_mobLoc} to location of victim
				set {_mobType} to "%victim%"
				add {_mobLoc} to {-mobLocs::*}
				add {_mobType} to {-mobTypes::*}
				
				loop 60 times:
					if attacker is within 1 blocks of {_mobLoc}:
						stop loop
					else:
						make 180 of dust using dustOption(rgb(160, 31, 255), 1) at location 1 block above {_mobLoc} with offset vector(0.15, 0.15, 0.15) with extra 0 with force
						wait 0.5 seconds
				
				remove {_mobLoc} from {-mobLocs::*}
				remove {_mobType} from {-mobTypes::*}

# Soul capture - actually capturing the soul

on player move:
	if WhatGem(player's offhand item) is "astra":
		if WhatTier(player's offhand item) is 2:
			if WhatEnergy(player's offhand item) > 2:
				loop {-mobLocs::*}:
					set {_loc} to loop-value
					
					if player is within 1 block of {_loc}:
						set {_index} to 0
						loop {-mobLocs::*}:
							add 1 to {_index}
							if loop-value-2 is {_loc}:
								set {_mobType} to {-mobTypes::%{_index}%}
								stop loop
						
						if size of {-mobkills::%player%::*} >= 2:
							remove {-mobkills::%player%::2} from {-mobkills::%player%::*}
						
						add {_mobType} to {-mobkills::%player%::*}
						
						remove {_loc} from {-mobLocs::*}
						remove {-mobTypes::%{_index}%} from {-mobTypes::*}
						add {_loc} to {-collectedMobLocs::*}
						set {_energy} to WhatEnergy(player's offhand item)
						SetEnergy(player, {_energy} - 1)
						wait 4 ticks
						SetEnergy(player, {_energy})
						heal player by 5.5 hearts
						stop loop

on death:
	loop all items in victim's inventory:
		if WhatGem(loop-item) is "astra":
			draw 250 of dust using dustOption(rgb(160, 31, 255), 1) at location 1 blocks above victim with offset vector(1, 1, 1) with extra 0 with force	

# Spawning particles on the mob that astra just spawned

every 1 second:
	loop all entities:
		if {-AstraSpawning::%loop-entity%} is set:
			if {-AstraSpawning::%loop-entity%} > 0:
				remove 1 from {-AstraSpawning::%loop-entity%}
				draw 20 of dust using dustOption(rgb(160, 31, 255), 1) at location 0.5 blocks above loop-entity with offset vector(0.4, 0.4, 0.4) with extra 0 with force

# Spawning the mob you captured

right click:
	if IsDisabled(player) is not true:
		if WhatGem(player's offhand item) is "astra":
			if WhatTier(player's offhand item) is 2:
				if WhatEnergy(player's offhand item) is not 0:
					if player is sneaking:
						if clicked block is set:
							if clicked block is within 5 blocks of player:
								if {-mobkills::%player%::2} is set:
									set {_e} to {-mobkills::%player%::2} parsed as entity type
									spawn {_e} at location 1 block above clicked block
									set {-AstraSpawning::%last spawned entity%} to 3
									remove {-mobkills::%player%::2} from {-mobkills::%player%::*}
								else:
									if {-mobkills::%player%::1} is set:
										set {_e} to {-mobkills::%player%::1} parsed as entity type
										spawn {_e} at location 1 block above clicked block
										set {-AstraSpawning::%last spawned entity%} to 3
										clear {-mobkills::%player%::*}


# Removing dagger bossbar progress, when its 0 it removes all daggers

every 1 tick:
	loop all players:
		if {-Daggers::%loop-player's uuid%} is true:
			if bar progress of {-daggersBossBar::%uuid of loop-player%} > 0:
				remove 0.1 from bar progress of {-daggersBossBar::%uuid of loop-player%}
			else:
				remove loop-player from bossbar players of {-daggersBossBar::%uuid of loop-player%}
				kill {-Dagger1::%loop-player's uuid%}
				kill {-Dagger2::%loop-player's uuid%}
				kill {-Dagger3::%loop-player's uuid%}
				kill {-Dagger4::%loop-player's uuid%}
				kill {-Dagger5::%loop-player's uuid%}
				set {-daggerAmount::%loop-player's uuid%} to 0
				set {-Daggers::%loop-player's uuid%} to false
				setDCooldown("Daggers::%uuid of loop-player%", toMilli(4, 35))
				delete {-Daggering}

# Teleporting daggers infront of player

every 3 ticks:
	loop all players:
		if {-Daggers::%loop-player's uuid%} is true:
			if {-daggerAmount::%loop-player's uuid%} is 5:
				teleport {-Dagger1::%loop-player's uuid%} to location 2 blocks infront and 0.1 blocks below loop-player
				teleport {-Dagger2::%loop-player's uuid%} to location 1.5 blocks infront and 1.1 blocks left and 0.1 blocks below loop-player
				teleport {-Dagger3::%loop-player's uuid%} to location 1.5 blocks infront and 1.1 blocks right and 0.1 blocks below loop-player
				teleport {-Dagger4::%loop-player's uuid%} to location 0.5 blocks infront and 1.8 blocks left and 0.1 blocks below loop-player
				teleport {-Dagger5::%loop-player's uuid%} to location 0.5 blocks infront and 1.8 blocks right and 0.1 blocks below loop-player
			if {-daggerAmount::%loop-player's uuid%} is 4:
				teleport {-Dagger1::%loop-player's uuid%} to location 2 blocks infront and 0.1 blocks below loop-player
				teleport {-Dagger2::%loop-player's uuid%} to location 1.5 blocks infront and 1.1 blocks left and 0.1 blocks below loop-player
				teleport {-Dagger3::%loop-player's uuid%} to location 1.5 blocks infront and 1.1 blocks right and 0.1 blocks below loop-player
				teleport {-Dagger4::%loop-player's uuid%} to location 0.5 blocks infront and 1.8 blocks left and 0.1 blocks below loop-player
			if {-daggerAmount::%loop-player's uuid%} is 3:
				teleport {-Dagger1::%loop-player's uuid%} to location 2 blocks infront and 0.1 blocks below loop-player
				teleport {-Dagger2::%loop-player's uuid%} to location 1.5 blocks infront and 1.1 blocks left and 0.1 blocks below loop-player
				teleport {-Dagger4::%loop-player's uuid%} to location 0.5 blocks infront and 1.8 blocks left and 0.1 blocks below loop-player
			if {-daggerAmount::%loop-player's uuid%} is 2:
				teleport {-Dagger2::%loop-player's uuid%} to location 1.5 blocks infront and 1.1 blocks left and 0.1 blocks below loop-player
				teleport {-Dagger4::%loop-player's uuid%} to location 0.5 blocks infront and 1.8 blocks left and 0.1 blocks below loop-player
			if {-daggerAmount::%loop-player's uuid%} is 1:
				teleport {-Dagger4::%loop-player's uuid%} to location 0.5 blocks infront and 1.8 blocks left and 0.1 blocks below loop-player

# Dagger functions (what makes them actually fly forwards)

function Dagger5(p: player):
	wait 1 tick
	set {_loc} to location 0.1 metres above {_p}
	spawn armor stand at {_loc} with nbt compound from "{Marker:1b,Invisible:1b,Tags:""%{_p}%dag5"",ArmorItems:[{},{},{},{id:nautilus_shell,tag:{CustomModelData:230},Count:1}],ArmorDropChances:[0f,0f,0f,0f]}"
	set {-1Dagger5::%{_p}'s uuid%} to last spawned entity

	set {_s} to 5
	set {_ploc} to location of {_p}
	while {-1Dagger5::%{_p}'s uuid%} is alive:		
		if {-ShotDagger5::%{_p}'s uuid%} is true:
			set {_loc2} to location {_s} metres infront of {_ploc}
			add 0.95 to {_s}
			teleport {-1Dagger5::%{_p}'s uuid%} to {_loc2}
			set {_loc3} to location 1.8 block above and 3 metres behind {-1Dagger5::%{_p}'s uuid%}
			draw 1 dust using dustOption(rgb(160, 31, 255), 1) at {_loc3} with extra 0 with force
		wait 0.025 seconds

function Dagger3(p: player):
	wait 1 tick
	set {_loc} to location 0.1 metres above {_p}
	spawn armor stand at {_loc} with nbt compound from "{Marker:1b,Invisible:1b,Tags:""%{_p}%dag3"",ArmorItems:[{},{},{},{id:nautilus_shell,tag:{CustomModelData:230},Count:1}],ArmorDropChances:[0f,0f,0f,0f]}"
	set {-1Dagger3::%{_p}'s uuid%} to last spawned entity

	set {_s} to 5
	set {_ploc} to location of {_p}
	while {-1Dagger3::%{_p}'s uuid%} is alive:		
		if {-ShotDagger3::%{_p}'s uuid%} is true:
			set {_loc2} to location {_s} metres infront of {_ploc}
			add 0.95 to {_s}
			teleport {-1Dagger3::%{_p}'s uuid%} to {_loc2}
			set {_loc3} to location 1.8 block above and 3 metres behind {-1Dagger3::%{_p}'s uuid%}
			draw 1 dust using dustOption(rgb(160, 31, 255), 1) at {_loc3} with extra 0 with force
		wait 0.025 seconds

function Dagger1(p: player):
	wait 1 tick
	set {_loc} to location 0.1 metres above {_p}
	spawn armor stand at {_loc} with nbt compound from "{Marker:1b,Invisible:1b,Tags:""%{_p}%dag1"",ArmorItems:[{},{},{},{id:nautilus_shell,tag:{CustomModelData:230},Count:1}],ArmorDropChances:[0f,0f,0f,0f]}"
	set {-1Dagger1::%{_p}'s uuid%} to last spawned entity

	set {_s} to 5
	set {_ploc} to location of {_p}
	while {-1Dagger1::%{_p}'s uuid%} is alive:		
		if {-ShotDagger1::%{_p}'s uuid%} is true:
			set {_loc2} to location {_s} metres infront of {_ploc}
			add 0.95 to {_s}
			teleport {-1Dagger1::%{_p}'s uuid%} to {_loc2}
			set {_loc3} to location 1.8 block above and 3 metres behind {-1Dagger1::%{_p}'s uuid%}
			draw 1 dust using dustOption(rgb(160, 31, 255), 1) at {_loc3} with extra 0 with force
		wait 0.025 seconds

function Dagger2(p: player):
	wait 1 tick
	set {_loc} to location 0.1 metres above {_p}
	spawn armor stand at {_loc} with nbt compound from "{Marker:1b,Invisible:1b,Tags:""%{_p}%dag2"",ArmorItems:[{},{},{},{id:nautilus_shell,tag:{CustomModelData:230},Count:1}],ArmorDropChances:[0f,0f,0f,0f]}"
	set {-1Dagger2::%{_p}'s uuid%} to last spawned entity
	set {_s} to 5
	set {_ploc} to location of {_p}
	while {-1Dagger2::%{_p}'s uuid%} is alive:		
		if {-ShotDagger2::%{_p}'s uuid%} is true:
			set {_loc2} to location {_s} metres infront of {_ploc}
			add 0.95 to {_s}
			teleport {-1Dagger2::%{_p}'s uuid%} to {_loc2}
			set {_loc3} to location 1.8 block above and 3 metres behind {-1Dagger2::%{_p}'s uuid%}
			draw 1 dust using dustOption(rgb(160, 31, 255), 1) at {_loc3} with extra 0 with force
		wait 0.025 seconds

function Dagger4(p: player):
	wait 1 tick
	set {_loc} to location 0.1 metres above {_p}
	spawn armor stand at {_loc} with nbt compound from "{Marker:1b,Invisible:1b,Tags:""%{_p}%dag4"",ArmorItems:[{},{},{},{id:nautilus_shell,tag:{CustomModelData:230},Count:1}],ArmorDropChances:[0f,0f,0f,0f]}"
	set {-1Dagger4::%{_p}'s uuid%} to last spawned entity

	set {_s} to 5
	set {_ploc} to location of {_p}
	while {-1Dagger4::%{_p}'s uuid%} is alive:		
		if {-ShotDagger4::%{_p}'s uuid%} is true:
			set {_loc2} to location {_s} metres infront of {_ploc}
			add 0.95 to {_s}
			teleport {-1Dagger4::%{_p}'s uuid%} to {_loc2}
			set {_loc3} to location 1.8 block above and 3 metres behind {-1Dagger4::%{_p}'s uuid%}
			draw 1 dust using dustOption(rgb(160, 31, 255), 1) at {_loc3} with extra 0 with force
		wait 0.025 seconds

# Phantom daggers - activating ability and showing bossbar

left click:
	if player's gamemode is not spectator:
		if {-Unbounded::%player's uuid%} is not true:
			if {-AstralProjection::%player's uuid%} is not true:
				if IsDisabled(player) is not true:
					if WhatGem(player's held item) is "astra":
						if WhatTier(player's held item) is 2:
							if WhatEnergy(player's held item) is not 0:
								if canUsePower("Daggers::%uuid of player%") is true:
									if {-Daggers::%player's uuid%} is not true:
										send "<##A01FFF>🔮 <##B8FFFB>You have used <##c7c7c7>Phantom Daggers" to player
										set bar progress of {-daggersBossBar::%uuid of player%} to 100
										set {-daggersBossBar::%uuid of player%} to boss bar with id "%{_uuid}%sdaggers" with title "&fDaggers" with color aqua with progress 100
										set bar style of {-daggersBossBar::%uuid of player%} to solid bar
										add player to bossbar players of {-daggersBossBar::%uuid of player%}
										set {-daggerAmount::%player's uuid%} to 5
										wait 1 tick
										set {-Daggering} to player
										set {-Daggers::%player's uuid%} to true
										set {-ShotDagger5::%player's uuid%} to false
										set {-ShotDagger4::%player's uuid%} to false
										set {-ShotDagger3::%player's uuid%} to false
										set {-ShotDagger2::%player's uuid%} to false
										set {-ShotDagger1::%player's uuid%} to false

										spawn armor stand at location of player with nbt compound from "{Marker:1b,Invisible:1b,Tags:""%player%dag1"",ArmorItems:[{},{},{},{id:nautilus_shell,tag:{CustomModelData:230},Count:1}],ArmorDropChances:[0f,0f,0f,0f]}"       
										set {-Dagger1::%player's uuid%} to last spawned armor stand
										set helmet of {-Dagger1::%player's uuid%} to nautilus shell with custom model data 230
										make {-Dagger1::%player's uuid%} invulnerable
										make {-Dagger1::%player's uuid%} invisible

										spawn armor stand at location of player with nbt compound from "{Marker:1b,Invisible:1b,Tags:""%player%dag2"",ArmorItems:[{},{},{},{id:nautilus_shell,tag:{CustomModelData:230},Count:1}],ArmorDropChances:[0f,0f,0f,0f]}"        
										set {-Dagger2::%player's uuid%} to last spawned armor stand
										set helmet of {-Dagger2::%player's uuid%} to nautilus shell with custom model data 230
										make {-Dagger2::%player's uuid%} invulnerable
										make {-Dagger2::%player's uuid%} invisible

										spawn armor stand at location of player with nbt compound from "{Marker:1b,Invisible:1b,Tags:""%player%dag3"",ArmorItems:[{},{},{},{id:nautilus_shell,tag:{CustomModelData:230},Count:1}],ArmorDropChances:[0f,0f,0f,0f]}"        
										set {-Dagger3::%player's uuid%} to last spawned armor stand
										set helmet of {-Dagger3::%player's uuid%} to nautilus shell with custom model data 230
										make {-Dagger3::%player's uuid%} invulnerable
										make {-Dagger3::%player's uuid%} invisible

										spawn armor stand at location of player with nbt compound from "{Marker:1b,Invisible:1b,Tags:""%player%dag4"",ArmorItems:[{},{},{},{id:nautilus_shell,tag:{CustomModelData:230},Count:1}],ArmorDropChances:[0f,0f,0f,0f]}"        
										set {-Dagger4::%player's uuid%} to last spawned armor stand
										set helmet of {-Dagger4::%player's uuid%} to nautilus shell with custom model data 230
										make {-Dagger4::%player's uuid%} invulnerable
										make {-Dagger4::%player's uuid%} invisible

										spawn armor stand at location of player with nbt compound from "{Marker:1b,Invisible:1b,Tags:""%player%dag5"",ArmorItems:[{},{},{},{id:nautilus_shell,tag:{CustomModelData:230},Count:1}],ArmorDropChances:[0f,0f,0f,0f]}"      
										set {-Dagger5::%player's uuid%} to last spawned armor stand
										set helmet of {-Dagger5::%player's uuid%} to nautilus shell with custom model data 230
										make {-Dagger5::%player's uuid%} invulnerable
										make {-Dagger5::%player's uuid%} invisible

								else:
									set {_message} to getActionBarCooldown("Daggers::%uuid of player%")
									send "<##A01FFF>🔮 <##C7C7C7>Phantom Daggers <##FF686F>are on cooldown for <##A01FFF>%{_message}%" to player



on join:
	set {-daggercooldown::%player's uuid%} to false


command /daggercooldown:
	permission: op
	trigger:
		set {-daggercooldown::%player's uuid%} to false


# Phantom daggers - shooting daggers

left click:
	if {-AstralProjection::%player's uuid%} is not true:
		if IsDisabled(player) is not true:
			if WhatGem(player's held item) is "astra":
				if WhatTier(player's held item) is 2:
					if WhatEnergy(player's held item) is not 0:
						if {-daggercooldown::%player's uuid%} is false:
							if {-Daggers::%player's uuid%} is true:
								if {-daggerAmount::%player's uuid%} is 5:
									remove 1 from {-daggerAmount::%player's uuid%}
									set {-ShotDagger5::%player's uuid%} to true
									kill {-Dagger5::%player's uuid%}
									Dagger5(player)
									set {-daggercooldown::%player's uuid%} to true
									wait 10 ticks
									set {-daggercooldown::%player's uuid%} to false

								else if {-daggerAmount::%player's uuid%} is 4:
									remove 1 from {-daggerAmount::%player's uuid%}
									set {-ShotDagger3::%player's uuid%} to true
									kill {-Dagger3::%player's uuid%}
									Dagger3(player)
									set {-daggercooldown::%player's uuid%} to true
									wait 10 ticks
									set {-daggercooldown::%player's uuid%} to false

								else if {-daggerAmount::%player's uuid%} is 3:
									remove 1 from {-daggerAmount::%player's uuid%}
									set {-ShotDagger1::%player's uuid%} to true
									kill {-Dagger1::%player's uuid%}
									Dagger1(player)
									set {-daggercooldown::%player's uuid%} to true
									wait 10 ticks
									set {-daggercooldown::%player's uuid%} to false

								else if {-daggerAmount::%player's uuid%} is 2:
									remove 1 from {-daggerAmount::%player's uuid%}
									set {-ShotDagger2::%player's uuid%} to true
									kill {-Dagger2::%player's uuid%}
									Dagger2(player)
									set {-daggercooldown::%player's uuid%} to true
									wait 10 ticks
									set {-daggercooldown::%player's uuid%} to false

								else if {-daggerAmount::%player's uuid%} is 1:
									remove 1 from {-daggerAmount::%player's uuid%}
									set {-ShotDagger4::%player's uuid%} to true
									kill {-Dagger4::%player's uuid%}
									Dagger4(player)
									set {-daggercooldown::%player's uuid%} to true
									wait 10 ticks
									set {-daggercooldown::%player's uuid%} to false
									remove player from bossbar players of {-daggersBossBar::%uuid of player%}
									if WhatEnergy(player's held item) > 0:
										setCooldown("Daggers::%uuid of player%", toMilli(5, 35), player)
									if WhatEnergy(player's held item) > 2:
										setCooldown("Daggers::%uuid of player%", toMilli(4, 35), player)
									if WhatEnergy(player's held item) > 4:
										setCooldown("Daggers::%uuid of player%", toMilli(3, 35), player)
									if WhatEnergy(player's held item) > 6:
										setCooldown("Daggers::%uuid of player%", toMilli(2, 35), player)
									if WhatEnergy(player's held item) > 7:
										setCooldown("Daggers::%uuid of player%", toMilli(1, 35), player)
									wait 3 seconds
									set {-Daggers::%player's uuid%} to false
									delete {-Daggering}

# Phantom daggers - registering if the dagger got shot, and also damaging entities.

every 1 tick:
	loop all players:
		if {-Daggers::%loop-player's uuid%} is true:
			loop 5 times:
				loop all entities in radius 1.4 of {-1Dagger%loop-iteration-2%::%loop-player-1's uuid%}:
					if any:
						loop-entity-2 is loop-player-1
						loop-entity-2 is {-1Dagger%loop-iteration-2%::%loop-player-1's uuid%}
					then:
						continue
					daggerdmg(loop-entity-2, {-1Dagger%loop-iteration-2%::%loop-player-1's uuid%})
					kill {-1Dagger%loop-iteration-2%::%loop-player-1's uuid%}
					delete {-1Dagger%loop-iteration-2%::%loop-player-1's uuid%}

function daggerdmg(victim: entity, dagger: entity):
	set {_loc} to location 3 blocks infront and 1 block left of {_dagger}
	set {_direction} to vector between {_victim} and {_dagger}
	knock {_victim} {_direction} with strength 0.2
	damage {_victim} by 0.001 hearts
	add 10 to {-Disabled::%{_victim}'s uuid%}
	set {-beingDaggered::%{_victim}'s uuid%} to true
	if {_victim}'s health is less than or equal to 2.5:
		if {_victim}'s held item is a totem of undying:
			damage {_victim} by 9999
		else if {_victim}'s offhand item is a totem of undying:
			damage {_victim} by 9999
		else:
			set {_victim}'s health to {_victim}'s health - 2.5
	else:
		set {_victim}'s health to {_victim}'s health - 2.5



# Astra gem dagger death message

on death:
	if {-Daggering} is set:
		if attacker is not set:
			if {-beingDaggered::%victim's uuid%} is set:
				if victim is not invisible:
					if {-Daggering} is not invisible:
						set death message to "%victim% was slain by %{-Daggering}% using &f[<##A01FFF>&lᴀsᴛʀᴀ <##FFD773>ɢᴇᴍ&f]"
					else:
						set death message to "%victim% was slain by &k??? &fusing [<##A01FFF>&lᴀsᴛʀᴀ <##FFD773>ɢᴇᴍ&f]"
				else:
					if {-Daggering} is not invisible:
						set death message to "&k??? &fwas slain by %{-Daggering}% using [<##A01FFF>&lᴀsᴛʀᴀ <##FFD773>ɢᴇᴍ&f]"
					else:
						set death message to "&k??? &fwas slain by &k??? &fusing [<##A01FFF>&lᴀsᴛʀᴀ <##FFD773>ɢᴇᴍ&f]"