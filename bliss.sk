import:
	java.time.Duration
	java.lang.System
	org.bukkit.Particle
	java.lang.String
	org.bukkit.event.inventory.InventoryClickEvent
	org.bukkit.inventory.PlayerInventory
	org.bukkit.entity.Fireball
	org.bukkit.util.Vector
	org.bukkit.Location
	org.bukkit.potion.PotionEffect
	org.bukkit.potion.PotionEffectType
	org.bukkit.Material
	org.bukkit.block.data.BlockData
	org.bukkit.block.Block
	org.bukkit.block.data.Waterlogged
	org.bukkit.event.world.GenericGameEvent
	org.bukkit.Bukkit

function isAtAPIChange() :: boolean:
	if any:
		Bukkit.getBukkitVersion() contains "1.17"
		Bukkit.getBukkitVersion() contains "1.18"
		Bukkit.getBukkitVersion() contains "1.19"
		Bukkit.getBukkitVersion() contains "1.20.1"
		Bukkit.getBukkitVersion() contains "1.20.2"
		Bukkit.getBukkitVersion() contains "1.20.3"
		Bukkit.getBukkitVersion() contains "1.20.4"
	then:
		return false
	return true
function Format(num: number) :: string:
	if mod({_num}, 1) = 0:
		return "%{_num}%.0"
	else:
		return "%{_num}%"

on inventory click:
	if event-item is a prismarine shard:
		if {-trading::%player's uuid%} is true:	
			cancel event

on drop:
	if IsGem(event-item) is true:
		cancel event

on inventory click:
	if IsGem(event-item) is true:
		if {-trading::%player's uuid%} is true:
			cancel event
		

on right click:
	if target entity of player is not set:
		if lore of player's held item contains "&7 Ä…™…¢ ú·¥õ-·¥Ñ ü…™·¥Ñ·¥ã ·¥õ·¥è  Ä·¥á·¥Ñ·¥á…™·¥†·¥á ·¥Ä  Ä·¥Ä…¥·¥Ö·¥è·¥ç …¢·¥á·¥ç":
			if {-trading::%player's uuid%} is not true:
				set {-trading::%player's uuid%} to true
				cancel event
				remove 1 of {-trader} from player's inventory
				set {-gemnames::%player's uuid%::*} to "strength", "fire", "speed", "wealth", "flux", "astra", "puff", "life"
				loop all items in player's inventory:
					if IsGem(loop-value) is true:
						if WhatTier(loop-value) is 2:
							set {_newGem} to loop-value
							if IsGem(player's offhand item) is not true:
								loop 6 times:
									remove {_newGem} from player's inventory
									set {_newGem}'s custom model data to 2 or 4 or 6 or 8 or 10 or 12 or 14 or 16
									give player {_newGem}
									play sound "block.amethyst_block.break" with volume 20 and pitch 2 for player
									wait 0.5 seconds
							else:
								loop 6 times:
									remove {_newGem} from player's inventory
									set {_newGem}'s custom model data to 2 or 4 or 6 or 8 or 10 or 12 or 14 or 16
									set player's offhand item to {_newGem}
									play sound "block.amethyst_block.break" with volume 20 and pitch 2 for player
									wait 0.5 seconds

						if WhatTier(loop-value) is 1:	
							set {_newGem} to loop-value
							if IsGem(player's offhand item) is not true:
								loop 6 times:
									remove {_newGem} from player's inventory
									set {_newGem}'s custom model data to 1 or 3 or 5 or 7 or 9 or 11 or 13 or 15
									give player {_newGem}
									play sound "block.amethyst_block.break" with volume 20 and pitch 2 for player
									wait 0.5 seconds
							else:
								loop 6 times:
									remove {_newGem} from player's inventory
									set {_newGem}'s custom model data to 1 or 3 or 5 or 7 or 9 or 11 or 13 or 15
									set player's offhand item to {_newGem}
									play sound "block.amethyst_block.break" with volume 20 and pitch 2 for player
									wait 0.5 seconds


				RandomGem(player)
				play sound "entity.player.levelup" to player
				set {-trading::%player's uuid%} to false
				setCooldown("Unfortunate::%uuid of player%", 0, player)
				setCooldown("RichRush::%uuid of player%", 0, player)
				setCooldown("Blur::%uuid of player%", 0, player)
				setCooldown("Velocity::%uuid of player%", 0, player)
				setCooldown("SpeedStorm::%uuid of player%", 0, player)
				setCooldown("DoubleJump::%uuid of player%", 0, player)
				setCooldown("Dash::%uuid of player%", 0, player)
				setCooldown("BreezyBash::%uuid of player%", 0, player)
				setCooldown("Puff::Enchanting::%uuid of player%", 0, player)
				setCooldown("Vitality::%uuid of player%", 0, player)
				setCooldown("HeartLock::%uuid of player%", 0, player)
				setCooldown("LifeCircle::%uuid of player%", 0, player)
				setCooldown("Frailer::%uuid of player%", 0, player)
				setCooldown("Bounty::%uuid of player%", 0, player)
				setCooldown("ChadStrength::%uuid of player%", 0, player)
				setCooldown("EnergyBeam::%uuid of player%", 0, player)
				setCooldown("KineticBurst::%uuid of player%", 0, player)
				setCooldown("KineticOverdrive::%uuid of player%", 0, player)
				setCooldown("Fireball::%uuid of player%", 0, player)
				setCooldown("Crisp::%uuid of player%", 0, player)
				setCooldown("Campfire::%uuid of player%", 0, player)
				setCooldown("CampfireActive::%uuid of player%", 0, player)
				setCooldown("Daggers::%uuid of player%", 0, player)
				setCooldown("Drift::%uuid of player%", 0, player)
				setCooldown("Astral::%uuid of player%", 0, player)




function cooldown(p: player):
	set {_uuid} to {_p}'s uuid
	setCooldown("Unfortunate::%{_uuid}%", 0, {_p})
	setCooldown("RichRush::%{_uuid}%", 0, {_p})
	setCooldown("Blur::%{_uuid}%", 0, {_p})
	setCooldown("Velocity::%{_uuid}%", 0, {_p})
	setCooldown("SpeedStorm::%{_uuid}%", 0, {_p})
	setCooldown("DoubleJump::%{_uuid}%", 0, {_p})
	setCooldown("Dash::%{_uuid}%", 0, {_p})
	setCooldown("BreezyBash::%{_uuid}%", 0, {_p})
	setCooldown("Puff::Enchanting::%{_uuid}%", 0, {_p})
	setCooldown("Vitality::%{_uuid}%", 0, {_p})
	setCooldown("HeartLock::%{_uuid}%", 0, {_p})
	setCooldown("LifeCircle::%{_uuid}%", 0, {_p})
	setCooldown("Frailer::%{_uuid}%", 0, {_p})
	setCooldown("Bounty::%{_uuid}%", 0, {_p})
	setCooldown("ChadStrength::%{_uuid}%", 0, {_p})
	setCooldown("EnergyBeam::%{_uuid}%", 0, {_p})
	setCooldown("KineticBurst::%{_uuid}%", 0, {_p})
	setCooldown("KineticOverdrive::%{_uuid}%", 0, {_p})
	setCooldown("Fireball::%{_uuid}%", 0, {_p})
	setCooldown("Crisp::%{_uuid}%", 0, {_p})
	setCooldown("Campfire::%{_uuid}%", 0, {_p})
	setCooldown("CampfireActive::%{_uuid}%", 0, {_p})
	setCooldown("Daggers::%{_uuid}%", 0, {_p})
	setCooldown("Drift::%{_uuid}%", 0, {_p})
	setCooldown("Astral::%{_uuid}%", 0, {_p})
	set {-Disabled::%{_uuid}%} to 0



on right click:
	if lore of player's held item contains "&7 Ä…™…¢ ú·¥õ-·¥Ñ ü…™·¥Ñ·¥ã ·¥õ·¥è ·¥ú·¥ò…¢ Ä·¥Ä·¥Ö·¥á  è·¥è·¥ú Ä …¢·¥á·¥ç":
		cancel event
		loop all items in player's inventory:
			if IsGem(loop-item) is true:
				if WhatTier(loop-value) is 1:
					set {_energy} to WhatEnergy(loop-value)
					set {_gem} to WhatGem(loop-value)
					remove 1 of {-upgrader} from player's inventory
					play sound "entity.player.levelup" for player
					set loop-item to {-gem::%{_gem}%::2::%{_energy}%}
					send "<##FFD773>üîÆ <##B8FFFB>You have upgraded your gem to tier 2" to player

				else:
					send "<##FFD773>üîÆ <##FF686F>Your gem is already upgraded" to player






on inventory click:
	if lore of event-item contains "&fLeft Click to trade!":
		cancel event
		set {-trading::%player's uuid%} to false
		wait 1 tick
		close the player's inventory
		remove 1 of {-trader} from player's inventory
		if IsGem(player's offhand item) is true:
			set {_offhand} to true
		loop all items in player's inventory:
			if IsGem(loop-value) is true:
				if WhatTier(loop-value) is 2:
					set {_newGem} to loop-value
					remove {_newGem} from player's inventory
					set custom model data of {_newGem} to {_cmd}
					if {_offhand} is true:
						set player's offhand item to {_newGem}
					else:
						give player {_newGem}
					play sound "block.amethyst_block.break" with volume 20 and pitch 2 for player
					wait 0.5 seconds
					loop {gemnames::%player's uuid%::*}:
						remove {_newGem} from player's inventory
						set {_gemname} to loop-value-2
						if {_gemname} is "life":
							set {_newGem}'s custom model data to 4
						if {_gemname} is "fire":
							set {_newGem}'s custom model data to 2
						if {_gemname} is "puff":
							set {_newGem}'s custom model data to 6
						if {_gemname} is "speed":
							set {_newGem}'s custom model data to 8
						if {_gemname} is "strength":
							set {_newGem}'s custom model data to 10
						if {_gemname} is "wealth":
							set {_newGem}'s custom model data to 12
						if {_gemname} is "astra":
							set {_newGem}'s custom model data to 14
						if {_gemname} is "flux":
							set {_newGem}'s custom model data to 16

						if {_offhand} is true:
							set player's offhand item to {_newGem}
						else:
							give player {_newGem}					
						play sound "block.amethyst_block.break" with volume 20 and pitch 2 for player
						wait 0.5 seconds

		RandomGem(player)
		play sound "entity.player.levelup" to player
		set {-trading::%player's uuid%} to false
		setCooldown("Unfortunate::%uuid of player%", 0, player)
		setCooldown("RichRush::%uuid of player%", 0, player)
		setCooldown("Blur::%uuid of player%", 0, player)
		setCooldown("Velocity::%uuid of player%", 0, player)
		setCooldown("SpeedStorm::%uuid of player%", 0, player)
		setCooldown("DoubleJump::%uuid of player%", 0, player)
		setCooldown("Dash::%uuid of player%", 0, player)
		setCooldown("BreezyBash::%uuid of player%", 0, player)
		setCooldown("Puff::Enchanting::%uuid of player%", 0, player)
		setCooldown("Vitality::%uuid of player%", 0, player)
		setCooldown("HeartLock::%uuid of player%", 0, player)
		setCooldown("LifeCircle::%uuid of player%", 0, player)
		setCooldown("Frailer::%uuid of player%", 0, player)
		setCooldown("Bounty::%uuid of player%", 0, player)
		setCooldown("ChadStrength::%uuid of player%", 0, player)
		setCooldown("EnergyBeam::%uuid of player%", 0, player)
		setCooldown("KineticBurst::%uuid of player%", 0, player)
		setCooldown("KineticOverdrive::%uuid of player%", 0, player)
		setCooldown("Fireball::%uuid of player%", 0, player)
		setCooldown("Crisp::%uuid of player%", 0, player)
		setCooldown("Campfire::%uuid of player%", 0, player)
		setCooldown("Daggers::%uuid of player%", 0, player)
		setCooldown("Drift::%uuid of player%", 0, player)
		setCooldown("Astral::%uuid of player%", 0, player)

on right click:
	if name of player's held item is "<##96FFD9>&l·¥á…¥·¥á Ä…¢ è <##FFE4AB>…™…¥ ·¥Ä  ô·¥è·¥õ·¥õ ü·¥á":
		cancel event
		loop all items in player's inventory:
			if IsGem(loop-value) is true:
				if WhatEnergy(loop-value) is less than or equal to 10:
					set {_energy} to WhatEnergy(loop-value)
					add 1 to {_energy}

					if {_energy} is 10:
						set {_energymsg} to "<##57FFC7>Pristine &f+ <##96FFD9>5"
					else if {_energy} is 9:
						set {_energymsg} to "<##57FFC7>Pristine &f+ <##96FFD9>4"
					else if {_energy} is 8:
						set {_energymsg} to "<##57FFC7>Pristine &f+ <##96FFD9>3"
					else if {_energy} is 7:
						set {_energymsg} to "<##57FFC7>Pristine &f+ <##96FFD9>2"
					else if {_energy} is 6:
						set {_energymsg} to "<##57FFC7>Pristine &f+ <##96FFD9>1"
					else if {_energy} is 5:
						set {_energymsg} to "<##57FFC7>Pristine"
					else if {_energy} is 4:
						set {_energymsg} to "<##57FF8F>Scratched"
					else if {_energy} is 3:
						set {_energymsg} to "<##7958DB>Cracked"
					else if {_energy} is 2:
						set {_energymsg} to "<##FFC929>Damaged"
					else if {_energy} is 1:
						set {_energymsg} to "<##FF1111>Ruined"
					else if {_energy} is 0:
						set {_energymsg} to "&7Broken"
				else:
					set {_energymsg} to "N/A"

				
				if WhatEnergy(loop-value) < 10:
					if WhatEnergy(loop-value) is not 0:
						set {_energy} to WhatEnergy(loop-value)
						add 1 to {_energy}
						remove 1 of player's held item from player's inventory
						SetEnergy(player, {_energy})
						send "<##FFD773>üîÆ <##96FFD9>&l·¥á…¥·¥á Ä…¢ è &fabsorbed, your gem is now at %{_energymsg}%" to player
					else: 
						send "<##B8FFFB>An energy bottle in your inventory has expired!" to player
						remove 1 of player's held item from player's inventory
						play sound "entity.allay.death" for player
						play sound "entity.allay.ambient_without_item" for player

			


on join:
	set {_lmaonum} to 0
	loop 61 times:
		set {-energyitem::%player's uuid%::%{_lmaonum}%} to a nautilus shell with custom model data 300 named "<##96FFD9>&l·¥á…¥·¥á Ä…¢ è <##FFE4AB>…™…¥ ·¥Ä  ô·¥è·¥õ·¥õ ü·¥á" named "<##96FFD9>&l·¥á…¥·¥á Ä…¢ è <##FFE4AB>…™…¥ ·¥Ä  ô·¥è·¥õ·¥õ ü·¥á" with lore "<##96FFD9>&lFrom: <##FFE4AB>%player%" and "&7Expires in: &f&l%{_lmaonum}% <##FFE4AB>minutes"
		add 1 to {_lmaonum}
	delete {_lmaonum}

# Energy system



function RandomGem(p: player) :: int:
	loop all items in {_p}'s inventory:
		if IsGem(loop-value) is true:
			set {_t} to WhatTier(loop-value)
			set {_energy} to WhatEnergy(loop-value)
			set {_whatGem} to random element out of {gemnames::%{_p}'s uuid%::*}
			if {-atenergy::%uuid of {_p}%} is not set:
				set {-atenergy::%uuid of {_p}%} to {_energy}
			set loop-value to {-gem::%{_whatGem}%::%{_t}%::%{-atenergy::%uuid of {_p}%}%}
	play sound "entity.player.levelup" to {_p}
	loop all items in {_p}'s inventory:
		if WhatGem(loop-value) is "astra":
			set {_gem} to "<##A01FFF>&l·¥Äs·¥õ Ä·¥Ä"
		else if WhatGem(loop-value) is "wealth":
			set {_gem} to "<##0EC912>&l·¥°·¥á·¥Ä ü·¥õ ú"
		else if WhatGem(loop-value) is "puff":
			set {_gem} to "<##EFEFEF>&l·¥ò·¥ú“ì“ì"
		else if WhatGem(loop-value) is "speed":
			set {_gem} to "<##FEFD17>&ls·¥ò·¥á·¥á·¥Ö"
		else if WhatGem(loop-value) is "life":
			set {_gem} to "<##FE04B4>&l ü…™“ì·¥á"
		else if WhatGem(loop-value) is "strength":
			set {_gem} to "<##F10103>&ls·¥õ Ä·¥á…¥…¢·¥õ ú"
		else if WhatGem(loop-value) is "flux":
			set {_gem} to "<##5ED7FF>&l“ì ü·¥úx"
		else if WhatGem(loop-value) is "fire":
			set {_gem} to "<##FE8120>&l“ì…™ Ä·¥á"
	send "<##FFD773>üîÆ <##A4FEF1>You have traded your current gem to %{_gem}%" to {_p}
	set {gemnames::%{_p}'s uuid%::*} to "strength", "fire", "speed", "wealth", "flux", "astra", "puff", "life"
	set {-energyrequired::%{_p}'s uuid%} to 0
	delete {-atenergy::%uuid of {_p}%}

command /withdrawupgrader:
	trigger:
		loop all items in player's inventory:
			if IsGem(loop-item) is true:
				if WhatTier(loop-item) is 2:
				SetTier(player, 1)
				give 1 of {-upgrader} to player

command /settier <text> <text>:
	permission: op
	trigger:
		if arg-1 is set:
			set {_i} to arg-1 parsed as integer
			if arg-2 is set:
				set {_p} to arg-2 parsed as player
				SetTier({_p}, {_i})

on tab complete for "/settier":
	set tab completions for position 1 to 1 and 2
	set tab completions for position 2 to all players


function getCampfireCooldown(cooldown: text) :: text:
	if canUsePower({_cooldown}) is true:
		set {_c} to "&aReady!"
	else:
		set {_cs} to getCooldownSeconds({_cooldown})

		set {_cm} to getCooldownMinutes({_cooldown})

		
		if {_cm} > 0:
			if {_cs} < 1:
				set {_c} to "&a%{_cm}%m"
			else:
				set {_c} to "&a%{_cm}%m %{_cs}%s"
		if {_cm} < 1:
			if {_cs} > 0:
				set {_c} to "&a%{_cs}%s"

		if {_c} is not set:
			set {_c} to "&aReady!"
				
	return {_c}

function getCooldownVar(cooldown: text) :: int:
	return {-Cooldown::%{_cooldown}%}

function getCooldownSeconds(cooldown: text) :: int:
	add Duration.ofMillis({-Cooldown::%{_cooldown}%} - System.currentTimeMillis()).toSecondsPart() to {_coo}
	if {_coo} is 60:
		set {_coo} to 0
	return {_coo}

function getCooldownMinutes(cooldown: text) :: int:
	set {_coo} to Duration.ofMillis({-Cooldown::%{_cooldown}%} - System.currentTimeMillis()).toMinutes()
	if Duration.ofMillis({-Cooldown::%{_cooldown}%} - System.currentTimeMillis()).toSecondsPart() is 60:
		add 1 to {_coo}
	return {_coo}
	
function setCooldown(cooldown: text, value: int, p: player):
	if {_p} has 1 of dragon egg:
		set {_value} to floor({_value} / 2)
		set {-Cooldown::%{_cooldown}%} to System.currentTimeMillis() + {_value}
	else:
		set {-Cooldown::%{_cooldown}%} to System.currentTimeMillis() + {_value}

function CooldownExists(cooldown: text) :: boolean:
	if {-Cooldown::%{_cooldown}%} is set:
		return true
	else:
		return false
	
function canUsePower(cooldown: text) :: boolean:
	if getCooldownVar({_cooldown}) - System.currentTimeMillis() <= 0:
		return true
	else if getCooldownVar({_cooldown}) - System.currentTimeMillis() = 0:
		return true
	else:
		return false


function toMilli(m: int, s: int) :: int:
	set {_final} to 0
	loop {_m} times:
		add 60000 to {_final}
	loop {_s} times:
		add 1000 to {_final}

	return {_final}

function IsTrusted(attacker: player, victim: player) :: boolean:
	if {-Trusted::%uuid of {_attacker}%::*} contains uuid of {_victim}:
		return true
	else:
		return false
	
function getActionBarCooldown(cooldown: text) :: text:
	if canUsePower({_cooldown}) is true:
		set {_c} to "&aReady!"
	else:
		set {_cs} to getCooldownSeconds({_cooldown})

		set {_cm} to getCooldownMinutes({_cooldown})

		
		if {_cm} > 0:
			if {_cs} < 1:
				set {_c} to "&b%{_cm}%m"
			else:
				set {_c} to "&b%{_cm}%m %{_cs}%s"
		if {_cm} < 1:
			if {_cs} > 0:
				set {_c} to "&b%{_cs}%s"

		if {_c} is not set:
			set {_c} to "&aReady!"
				
	return {_c}
	

function IsGem(i: item) :: boolean:
	if lore of {_i} contains "&f&lUnknown" or "&f&lrequired" or "&7- &f&lUnknown":
		return true
	else if lore of {_i} contains "&f&l·¥á·¥†·¥á Ä è·¥õ ú…™…¥…¢ …™s ·¥Ä “ì ü·¥ú·¥Ñ·¥õ·¥ú·¥Ä·¥õ…™·¥è…¥":
		return true
	else if lore of {_i} contains "&f&l ú·¥Ä·¥†·¥á ·¥õ ú·¥á s·¥õ Ä·¥á…¥…¢·¥õ ú ·¥è“ì ·¥Ä ·¥Ä Ä·¥ç è":
		return true
	else if lore of {_i} contains "&f&l·¥Ñ·¥è…¥·¥õ Ä·¥è ü ·¥õ ú·¥á  ô·¥Ä ü·¥Ä…¥·¥Ñ·¥á ·¥è“ì  ü…™“ì·¥á":
		return true
	else if lore of {_i} contains "&f&l·¥°·¥Ä·¥õ·¥Ñ ú ·¥õ ú·¥á ·¥°·¥è Ä ü·¥Ö ·¥Ä Ä·¥è·¥ú…¥·¥Ö  è·¥è·¥ú ·¥õ·¥ú Ä…¥ …™…¥·¥õ·¥è ·¥Ä  ô ü·¥ú Ä ":
		return true
	else if lore of {_i} contains "&f&l ô·¥á ·¥õ ú·¥á  ô…™…¢…¢·¥ás·¥õ  ô…™ Ä·¥Ö":
		return true
	else if lore of {_i} contains "&f&l“ì·¥ú·¥á ü ·¥Ä ·¥á·¥ç·¥ò…™ Ä·¥á":
		return true
	else if lore of {_i} contains "&f&l·¥ç·¥Ä…¥·¥Ä…¢·¥á ·¥õ ú·¥á ·¥õ…™·¥Ö·¥ás ·¥è“ì ·¥õ ú·¥á ·¥Ñ·¥ès·¥ç·¥ès ":
		return true
	else if lore of {_i} contains "&f&l·¥ç·¥Ä…¥…™·¥ò·¥ú ü·¥Ä·¥õ·¥á “ì…™ Ä·¥á":
		return true
	else if lore of {_i} contains "&f&l·¥ús·¥á ü·¥áss":
		return true
	else:
		return false

function WhatGem(i: item) :: string:
	if name of {_i} contains "<##FE8120>&l“ì…™ Ä·¥á":
		return "fire"
	else if name of {_i} contains "<##5ED7FF>&l“ì ü·¥úx":
		return "flux"
	else if name of {_i} contains "<##F10103>&ls·¥õ Ä·¥á…¥…¢·¥õ ú":
		return "strength"
	else if name of {_i} contains "<##FE04B4>&l ü…™“ì·¥á":
		return "life"
	else if name of {_i} contains "<##FEFD17>&ls·¥ò·¥á·¥á·¥Ö":
		return "speed"
	else if name of {_i} contains "<##EFEFEF>&l·¥ò·¥ú“ì“ì":
		return "puff"
	else if name of {_i} contains "<##0EC912>&l·¥°·¥á·¥Ä ü·¥õ ú":
		return "wealth"
	else if name of {_i} contains "<##A01FFF>&l·¥Äs·¥õ Ä·¥Ä":
		return "astra"

function WhatTier(i: item) :: int:
	if {_i} is an amethyst shard:
		return 1
	else:
		return 2

function WhatEnergy(i: item) :: int:
	if lore of {_i} contains "&f(<##57FFC7>Pristine&f + <##96FFD9>5&f)" or "&f(<##57FFC7>Pristine&f + <##96FFD9>5&7) " or "&f(<##57FFC7>Pristine&f + <##96FFD9>5&7)" or "&f(<##57FFC7>Pristine&f + <##96FFD9>5)":
		return 10
	else if lore of {_i} contains "&f(<##57FFC7>Pristine&f + <##96FFD9>4&f)" or "&f(<##57FFC7>Pristine&f + <##96FFD9>4&7) " or "&f(<##57FFC7>Pristine&f + <##96FFD9>4&7)" or "&f(<##57FFC7>Pristine&f + <##96FFD9>4)":
		return 9
	else if lore of {_i} contains "&f(<##57FFC7>Pristine&f + <##96FFD9>3&f)" or "&f(<##57FFC7>Pristine&f + <##96FFD9>3&7) " or "&f(<##57FFC7>Pristine&f + <##96FFD9>3&7)" or "&f(<##57FFC7>Pristine&f + <##96FFD9>3)":
		return 8
	else if lore of {_i} contains "&f(<##57FFC7>Pristine&f + <##96FFD9>2&f)" or "&f(<##57FFC7>Pristine&f + <##96FFD9>2&7) " or "&f(<##57FFC7>Pristine&f + <##96FFD9>2&7)" or "&f(<##57FFC7>Pristine&f + <##96FFD9>2)":
		return 7
	else if lore of {_i} contains "&f(<##57FFC7>Pristine&f + <##96FFD9>1&f)" or "&f(<##57FFC7>Pristine&f + <##96FFD9>1&7) " or "&f(<##57FFC7>Pristine&f + <##96FFD9>1&7)" or "&f(<##57FFC7>Pristine&f + <##96FFD9>1)":
		return 6
	else if lore of {_i} contains "&f(<##57FFC7>Pristine&f)" or "&f(<##57FFC7>Pristine&7) " or "&f(<##57FFC7>Pristine&7)":
		return 5
	else if lore of {_i} contains "&f(<##57FF8F>Scratched&f)" or "&f(<##57FF8F>Scratched&7) " or "&f(<##57FF8F>Scratched&7)":
		return 4
	else if lore of {_i} contains "&f(<##7958DB>Cracked&f)" or "&f(<##7958DB>Cracked&7) " or "&f(<##7958DB>Cracked&7)":
		return 3
	else if lore of {_i} contains "&f(<##FFC929>Damaged&f)" or "&f(<##FFC929>Damaged&7) " or "&f(<##FFC929>Damaged&7)":
		return 2
	else if lore of {_i} contains "&f(<##FF1111>Ruined&f)" or "&f(<##FF1111>Ruined&7) " or "&f(""<##FF1111>Ruined&f"")" or "&f(<##FF1111>Ruined&f) " or "&f(<##FF1111>Ruined&7)":
		return 1
	else if lore of {_i} contains "&f&l·¥ús·¥á ü·¥áss":
		return 0

function SetEnergy(p: player, n: number):
	set {Energy::%{_p}'s uuid%} to {_n}
	loop all items in {_p}'s inventory:
		if IsGem(loop-item) is true:
			set {_gem} to WhatGem(loop-item)
			set loop-item to {-gem::%{_gem}%::%WhatTier(loop-item)%::%{_n}%}


function SetTier(p: player, n: number):
	loop all items in {_p}'s inventory:
		if IsGem(loop-item) is true:
			set {_e} to WhatEnergy(loop-item)
			set {_gem} to WhatGem(loop-item)
			set loop-item to {-gem::%{_gem}%::%{_n}%::%{_e}%}

	
on tab complete for "/trust":
	set tab completions for position 1 to "add" and "remove" and "list"
	set tab completions for position 2 to all players

on inventory click:
	if name of event-inventory is "<##FFE4AB>·¥õ Ä·¥ús·¥õ·¥á·¥Ö ·¥ò ü·¥Ä è·¥á Äs":
		cancel event
		if event-item is a player head:
			set {_T} to "%event-item's name%"
			replace all "<##B8FFFB>" with "" in {_T}
			set {_Tplayer} to "%{_T}%" parsed as offline player

			set {_uuid} to uuid of player
			send "<##FFD773>üîÆ &cUntrusted <##B8FFFB>%{_T}%" to player
			remove {_Tplayer}'s uuid from {-Trusted::%uuid of player%::*}
			remove event-item from player's current inventory


on join:
	set player's max health to 10
	if {Trusted::%uuid of player%::*} is set:
		set {-Trusted::%uuid of player%::*} to {Trusted::%uuid of player%::*}

on disconnect:
	if {-Trusted::%uuid of player%::*} is set:
		set {Trusted::%uuid of player%::*} to {-Trusted::%uuid of player%::*}

on skript stop:
	loop all players:
		if {-Trusted::%uuid of loop-player%::*} is set:
			set {Trusted::%uuid of loop-player%::*} to {-Trusted::%uuid of loop-player%::*}

# /Bliss command

command /bliss [<text>] [<text>] [<text>] [<text>]:
	aliases: /blissgems, /blissgems:bliss, /blissgems:blissgems
	trigger:
		if arg-1 is "gem":
			if player has permission "op":

				if arg-3 is not set:
					send "&cUsage: /bliss gem (player) (type) (tier)" to player
					stop

				if arg-3 is not "astra" or "fire" or "life" or "puff" or "random" or "speed" or "strength" or "flux" or "wealth":
					send "&cUsage: /bliss gem (player) (type) (tier)" to player
					stop

				if arg-4 is not set:
					send "&cUsage: /bliss gem (player) (type) (tier)" to player
					stop

				set {_tier} to arg-4 parsed as integer
				if {_tier} is not set:
					send "<##FFD773>üîÆ <##FC8888>Argument must be an integer/number" to player
					stop

				
				set {_pl} to arg-2 parsed as player
				if {_pl} is not set:
					send "<##FFD773>üîÆ <##FC8888>Cannot find that player!" to player
					stop
				
				if arg-3 is not set:
					send "&cUsage: /bliss gem (player) (type) (tier)" to player
					stop

				if arg-3 is not "astra" or "fire" or "life" or "puff" or "random" or "speed" or "strength" or "flux" or "wealth":
					send "&cUsage: /bliss gem (player) (type) (tier)" to player
					stop

				if arg-4 is not set:
					send "&cUsage: /bliss gem (player) (type) (tier)" to player
					stop

				set {_tier} to arg-4 parsed as integer
				if {_tier} is not set:
					send "<##FFD773>üîÆ <##FC8888>Argument must be an integer/number" to player
					stop

				
				set {_pl} to arg-2 parsed as player
				if {_pl} is not set:
					send "<##FFD773>üîÆ <##FC8888>Cannot find that player!" to player
					stop

				if {_tier} is not 1 or 2:
					set {_tier} to 1

				set {_loop} to false
				loop all items in {_pl}'s inventory:
					if {_loop} is false:
						if IsGem(loop-item) is true:
							set {_loop} to true
							set {_energy} to WhatEnergy(loop-item)
							
				if {_energy} is not set:
					set {_energy} to 5
				if arg-3 is not "random":
					give {-gem::%arg-3%::%{_tier}%::%{_energy}%} to {_pl}
				else:
					set {_whatGem} to "fire" or "puff" or "flux" or "strength" or "speed" or "wealth" or "life" or "astra"
					give {_pl} {-gem::%{_whatGem}%::%{_tier}%::5}
				#broadcast "%arg-3% %arg-4% %{_energy}%"


		if arg-1 is "item":
			if player has permission "op":
				if arg-2 is not set:
					send "&cUsage: /bliss item (!type) (player) (quantity)" to player
					stop

				if arg-2 is not "energy" or "repairkit" or "trader" or "upgrader" or "RestoraionTomb0" or "RestoraionTomb1" or "RestoraionTomb2" or "RestoraionTomb3":
					send "&cUsage: /bliss item (type!) (player) (quantity)" to player
					stop

				if arg-4 is not set:
					send "&cUsage: /bliss item (type) (player) (!quantity)" to player
					stop

				set {_quant} to arg-4 parsed as integer
				if {_quant} is not set:
					send "<##FFD773>üîÆ <##FC8888>Argument must be an integer/number" to player
					stop

				
				set {_pl} to arg-3 parsed as player
				if {_pl} is not set:
					send "<##FFD773>üîÆ <##FC8888>Cannot find that player!" to player
					stop

				loop {_quant} times:
					if arg-2 is "trader":
						give {-trader} to {_pl}
					if arg-2 is "upgrader":
						give {-upgrader} to {_pl}
					if arg-2 is "energy":
						give {-energyitem::%player%::60} to {_pl}
					if arg-2 is "repairkit":
						give 1 of {-Bliss.Repair.4} to {_pl}
					if arg-2 is "RestoraionTomb0":
						give 1 of {-Bliss.Revive.0} to {_pl}
					if arg-2 is "RestoraionTomb1":
						give 1 of {-Bliss.Revive.1} to {_pl}
					if arg-2 is "RestoraionTomb2":
						give 1 of {-Bliss.Revive.2} to {_pl}
					if arg-2 is "RestoraionTomb3":
						give 1 of {-Bliss.Revive.3} to {_pl}



		if arg-1 is "set-energy":
			if player has permission "op":
				if arg-2 is set:
					set {_p} to arg-2 parsed as player
					if arg-3 is set:
						set {_in} to arg-3 parsed as integer
						SetEnergy({_p}, {_in})
				else:
					send "&cUsage: /bliss set-energy (player) [amount]" to executor

		if arg-1 is "set-charge":
			if player has permission "op":
				if arg-2 is set:
					if arg-3 is set:
						set {_charge} to arg-2 parsed as integer
						set {fluxKinetic::%player's uuid%} to {_charge}
				else:
					send "&cAn internal error occured while attempting to perform this command" to executor


		if arg-1 is "withdraw": #Everything Here Should Work
 
			if arg-2 is not set:
				send "&cYou must specify a Number" to executor

			if arg-2 is set:
				set {_int} to arg-2 parsed as integer
				loop all items in player's inventory:
					if IsGem(loop-item) is true:
						set {_num} to WhatEnergy(loop-item) - {_int}
						if {_num} < 1:
							send "&c You Are Not &b&lOverflowing" to player	
						else:
							set {_ii} to arg-2 parsed as integer
							set {_num} to WhatEnergy(loop-item) - {_ii}
							set {_p} to player
							set {_uuid} to {_p}'s uuid
							set {_arg2} to {_ii}
							SetEnergy(player, {_num})
							give {_ii} of {-energyitem::%player's uuid%::60} to player
							send "<##FFD773>üîÆ Bottled &f&l%arg-2% <##96FFD9>·¥á…¥·¥á Ä…¢ è" to player
			

command /withdraw <integer>:
	trigger:
		loop all items in player's inventory:
			if IsGem(loop-item) is true:
				set {_num} to WhatEnergy(loop-item) - arg-1
				if {_num} < 2:
					send "&c You Are Not &b&lOverflowing" to player												
				else:
					set {_ii} to arg-1
					set {_num} to WhatEnergy(loop-item) - arg-1
					set {_p} to player
					set {_uuid} to {_p}'s uuid
					set {_arg1} to arg-1
					remove arg-1 from {Energy::%{_uuid}%}
					SetEnergy(player, {_num})
					give {_ii} of {-energyitem::%player's uuid%::60} to player

command /setenergy <text> <text>:
	permission: op
	trigger:
		if arg-1 is set:
			set {_p} to arg-1 parsed as player
			if arg-2 is set:
				set {_in} to arg-2 parsed as integer
				SetEnergy({_p}, {_in})


on tab complete for "/setenergy":
	set tab completions for position 1 to all players
	set tab completions for position 2 to 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10


on tab complete of "/bliss" or "/blissgems" or "/blissgems:bliss" or "/blissgems:blissgems":
	set tab completions for position 1 to "gem", "item", "particles", "revive", "set-energy", "set-charge" and "withdraw"
	if tab arg-1 = tab arg-1:
		set tab completion for position 3 to all players

	if tab arg-1 = "set-energy":
		set tab completions for position 2 to all players
		set tab completions for position 3 to 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
		
	if tab arg-1 = "withdraw":
		set tab completions for position 2 to 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10

	if tab arg-1 = "gem":
		set tab completions for position 2 to all players
		set tab completions for position 3 to "astra", "fire", "life", "puff", "random", "speed", "strength", "flux" and "wealth"
		set tab completions for position 4 to "1" and "2"

	if tab arg-1 = "item":
		set tab completions for position 2 to "energy" and "repairkit" and "RestoraionTomb0" and "trader" and "upgrader" and "RestoraionTomb1" and "RestoraionTomb2" and "RestoraionTomb3"

	if tab arg-1 = "particles":
		set tab completions for position 2 to "default", "less" and "none"

	if tab arg-1 = "performance":
		set tab completions for position 2 to "default", "less" and "none"

on tab complete for "/withdraw":
	set tab completions for position 1 to 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10

	
#Action bar stuff

command /cooldown [<player>]:
	permission: op
	trigger:
		if arg-1 is set:
			set {_1} to arg-1
			cooldown({_1})
		else:
			set {_1} to player
			cooldown({_1})



on tab complete for "/cooldown":
	set tab completions for position 1 to all players


# Puff Gem
on game event sculk_sensor_tendrils_clicking:
	if WhatGem(player's held item) is "puff":
		if WhatEnergy(player's held item) > 1:
			cancel event
	if WhatGem(player's offhand item) is "puff":
		if WhatEnergy(player's offhand item) > 1:
			cancel event

function FireAction(itext: text, p: player):
	if {_itext} is "held":
		set {_i} to {_p}'s held item
		
	if {_itext} is "offhand":
		set {_i} to {_p}'s offhand item


	if canUsePower("Crisp::%uuid of {_p}%") is true:
		set {_c} to "&aReady!"
	else:
		set {_cs} to getCooldownSeconds("Crisp::%uuid of {_p}%")

		set {_cm} to getCooldownMinutes("Crisp::%uuid of {_p}%")
		
		if {_cm} > 0:
			if {_cs} < 1:
				set {_c} to "&b%{_dm}%m"
			else:
				set {_c} to "&b%{_dm}%m %{_ds}%s"
		if {_cm} < 1:
			if {_cs} > 0:
				if {_cs} > 30:
					set {_c} to "&cActive..."
				if {_cs} < 31:
					set {_c} to "&b%{_ds}%s"

		if {_c} is not set:
			set {_c} to "&aReady!"

	if WhatTier({_i}) is 2:
		set {_fb} to getActionBarCooldown("Fireball::%uuid of {_p}%")

		set {_cf} to getActionBarCooldown("Campfire::%uuid of {_p}%")

		send action bar "&füß® %{_fb}%  <##FE8120>üîÆ %{_c}%  &fü•æ %{_cf}%" to {_p}

	else:
		send action bar "<##FE8120>üî∫ %{_c}%" to {_p}


function AstraAction(itext: text, p: player):
	if {_itext} is "held":
		set {_i} to {_p}'s held item
		
	if {_itext} is "offhand":
		set {_i} to {_p}'s offhand item


	if canUsePower("Drift::%uuid of {_p}%") is true:
		set {_c} to "&aReady!"
	else:
		set {_cs} to getCooldownSeconds("Drift::%uuid of {_p}%")

		set {_cm} to getCooldownMinutes("Drift::%uuid of {_p}%")
		
		if {_cm} > 0:
			if {_cs} < 1:
				set {_c} to "&b%{_cm}%m"
			else:
				set {_c} to "&b%{_cm}%m %{_cs}%s"
		if {_cm} < 1:
			if {_cs} > 0:
				if {_cs} > 34:
					set {_c} to "&cActive..."
				if {_cs} < 35:
					set {_c} to "<##A01FFF>%{_cs}%s"

		if {_c} is not set:
			set {_c} to "&aReady!"

	if WhatTier({_i}) is 2:
		set {_fb} to getActionBarCooldown("Daggers::%uuid of {_p}%")

		set {_cf} to getActionBarCooldown("Astral::%uuid of {_p}%")

		send action bar "&füî™ %{_fb}%  <##A01FFF>üîÆ %{_c}%  &füëª %{_cf}%" to {_p}

	else:
		send action bar "<##A01FFF>üî∫ %{_c}%" to {_p}

			
function PuffAction(itext: text, p: player):
	if {_itext} is "held":
		set {_i} to {_p}'s held item
		
	if {_itext} is "offhand":
		set {_i} to {_p}'s offhand item

	if canUsePower("DoubleJump::%uuid of {_p}%") is true:
		set {_d} to "&aReady!"
	else:
		set {_ds} to getCooldownSeconds("DoubleJump::%uuid of {_p}%")

		set {_dm} to getCooldownMinutes("DoubleJump::%uuid of {_p}%")
		
		if {_dm} > 0:
			if {_ds} < 1:
				set {_d} to "&b%{_dm}%m"
			else:
				set {_d} to "&b%{_dm}%m %{_ds}%s"

		if {_dm} < 1:
			if {_ds} > 0:
				if {_ds} > 5:
					set {_d} to "&cActive..."
				if {_ds} < 6:
					set {_d} to "&b%{_ds}%s"

		if {_d} is not set:
			set {_d} to "&aReady!"


	if WhatTier({_i}) is 2:

		set {_bb} to getActionBarCooldown("BreezyBash::%uuid of {_p}%")

		set {_dash} to getActionBarCooldown("Dash::%uuid of {_p}%")

		send action bar "&f‚òÅ %{_bb}%  &füîÆ %{_d}%  &f‚è´ %{_dash}%" to {_p}

	else:
		send action bar "&füî∫ %{_d}%" to {_p}


function FluxAction(itext: text, p: player):
	if {_itext} is "held":
		set {_i} to {_p}'s held item
		
	if {_itext} is "offhand":
		set {_i} to {_p}'s offhand item


	

	if canUsePower("KineticBurst::%uuid of {_p}%") is true:
		set {_k} to "%Format({damage::%{_p}'s uuid%})%"
	else:
		set {_k} to getActionBarCooldown("KineticBurst::%uuid of {_p}%")

	if WhatTier({_i}) is 2:
		set {_eb} to getActionBarCooldown("EnergyBeam::%uuid of {_p}%")

		set {_kin} to getActionBarCooldown("KineticOverdrive::%uuid of {_p}%")

		send action bar "&f‚òÑ %{_eb}% <##5ED7FF>üîÆ &b%{_k}% <##5ED7FF>üîÆ &b%Format({fluxKinetic::%{_p}'s uuid%})% &füåÄ %{_kin}%" to {_p}

	else:
		send action bar "<##5ED7FF>üî∫ %{_k}%" to {_p}
		
function SpeedAction(itext: text, p: player):
	if {_itext} is "held":
		set {_i} to {_p}'s held item
		
	if {_itext} is "offhand":
		set {_i} to {_p}'s offhand item


	if canUsePower("Velocity::%uuid of {_p}%") is true:
		set {_v} to "&aReady!"
	else:
		set {_vs} to getCooldownSeconds("Velocity::%uuid of {_p}%")

		set {_vm} to getCooldownMinutes("Velocity::%uuid of {_p}%")
		
		if {_vm} > 0:
			if {_vs} < 1:
				set {_v} to "&b%{_vm}%m"
			else:
				set {_v} to "&b%{_vm}%m %{_vs}%s"

		if {_vm} < 1:
			if {_vs} > 0:
				if {_vs} > 30:
					set {_v} to "&cActive..."
				if {_vs} < 31:
					set {_v} to "&b%{_vs}%s"

		if {_v} is not set:
			set {_v} to "&aReady!"
		

	if WhatTier({_i}) is 2:
		set {_bl} to getActionBarCooldown("Blur::%uuid of {_p}%")

		set {_pt} to getActionBarCooldown("SpeedStorm::%uuid of {_p}%")

		send action bar "&füéØ %{_bl}%  <##E5EE2C>üîÆ %{_v}%  &füå© %{_pt}%" to {_p}

	else:
		send action bar "<##E5EE2C>üî∫ %{_v}%" to {_p}

every 1 second:
	loop all players:
		if {fluxKinetic::%loop-player's uuid%} is not between 0 and 200:
			set {fluxKinetic::%loop-player's uuid%} to 0


every 1.25 second:
	loop all players:
		if IsGem(loop-player's held item) is false:
			if IsGem(loop-player's offhand item) is false:
		if WhatEnergy(loop-player's held item) is not 0:
			if IsDisabled(loop-player) is not true:
				if WhatGem(loop-player's held item) is "astra":
					if {-AstralProjection::%loop-player's uuid%} is not true:
						AstraAction("held", loop-player)
					else:
						send action bar "&füßä &bSPOOK  <##A01FFF>üîÆ  &füåü&bTAG" to loop-player
				if WhatGem(loop-player's held item) is "fire":
					FireAction("held", loop-player)
				if WhatGem(loop-player's held item) is "speed":
					SpeedAction("held", loop-player)
				if WhatGem(loop-player's held item) is "flux":
					FluxAction("held", loop-player)
				if WhatGem(loop-player's held item) is "puff":
					PuffAction("held", loop-player)
				if WhatGem(loop-player's held item) is "strength":
					StrengthAction("held", loop-player)
				if WhatGem(loop-player's held item) is "life":
					LifeAction("held", loop-player)
				if WhatGem(loop-player's held item) is "wealth":
					WealthAction("held", loop-player)
			else:
				set {_l} to loop-player
				set {_dis} to {-Disabled::%loop-player's uuid%}
				send action bar "&8&lüîí·¥Ö…™s·¥Ä ô ü·¥á·¥Ö: %{_dis}%" to loop-player

			
			if IsDisabled(loop-player) is not true:
				if WhatGem(loop-player's offhand item) is "speed":
					if IsGem(loop-player's held item) is false:
						if WhatEnergy(loop-player's offhand item) is not 0:
							SpeedAction("offhand", loop-player)
						else:
							send action bar "&cBROKEN" to loop-player
				if WhatGem(loop-player's offhand item) is "astra":
					if IsGem(loop-player's held item) is false:
						if WhatEnergy(loop-player's offhand item) is not 0:
							if {-AstralProjection::%loop-player's uuid%} is not true:
								AstraAction("offhand", loop-player)
							else:
								send action bar "&füßä &bSPOOK <##A01FFF>üîÆ &füåü&bTAG" to loop-player
						else:
							send action bar "&cBROKEN" to loop-player
				if WhatGem(loop-player's offhand item) is "fire":
					if IsGem(loop-player's held item) is false:
						if WhatEnergy(loop-player's offhand item) is not 0:
							FireAction("offhand", loop-player)
						else:
							send action bar "&cBROKEN" to loop-player
				if WhatGem(loop-player's offhand item) is "flux":
					if IsGem(loop-player's held item) is false:
						if WhatEnergy(loop-player's offhand item) is not 0:
							FluxAction("offhand", loop-player)
						else:
							send action bar "&cBROKEN" to loop-player
				if WhatGem(loop-player's offhand item) is "puff":
					if IsGem(loop-player's held item) is false:
						if WhatEnergy(loop-player's offhand item) is not 0:
							PuffAction("offhand", loop-player)
						else:
							send action bar "&cBROKEN" to loop-player
				if WhatGem(loop-player's offhand item) is "strength":
					if IsGem(loop-player's held item) is false:
						if WhatEnergy(loop-player's offhand item) is not 0:
							StrengthAction("offhand", loop-player)
						else:
							send action bar "&cBROKEN" to loop-player
				if WhatGem(loop-player's offhand item) is "life":
					if IsGem(loop-player's held item) is false:
						if WhatEnergy(loop-player's offhand item) is not 0:
							LifeAction("offhand", loop-player)
						else:
							send action bar "&cBROKEN" to loop-player
				if WhatGem(loop-player's offhand item) is "wealth":
					if IsGem(loop-player's held item) is false:
						if WhatEnergy(loop-player's offhand item) is not 0:
							WealthAction("offhand", loop-player)
						else:
							send action bar "&cBROKEN" to loop-player
			else:
				set {_l} to loop-player
				set {_dis} to {-Disabled::%loop-player's uuid%}
				send action bar "&8&lüîí·¥Ö…™s·¥Ä ô ü·¥á·¥Ö: %{_dis}%" to loop-player

		else:
			if IsGem(loop-player's held item) is true:
				send action bar "&cBROKEN" to loop-player

				

every 1 second:
	loop all players:
		if CooldownExists("Unfortunate::%uuid of loop-player%") is not true:
			setDCooldown("Unfortunate::%uuid of loop-player%", 0)
		if CooldownExists("RichRush::%uuid of loop-player%") is not true:
			setDCooldown("RichRush::%uuid of loop-player%", 0)
		if CooldownExists("DoubleJump::%uuid of loop-player%") is not true:
			setDCooldown("DoubleJump::%uuid of loop-player%", 0)
		if CooldownExists("Fireball::%uuid of loop-player%") is not true:
			setDCooldown("Fireball::%uuid of loop-player%", 0)
		if CooldownExists("Crisp::%uuid of loop-player%") is not true:
			setDCooldown("Crisp::%uuid of loop-player%", 0)
		if CooldownExists("Campfire::%uuid of loop-player%") is not true:
			setDCooldown("Campfire::%uuid of loop-player%", 0)
		if CooldownExists("CampfireActive::%uuid of loop-player%") is not true:
			setDCooldown("CampfireActive::%uuid of loop-player%", 0)
		if CooldownExists("CampfireActive1::%uuid of loop-player%") is not true:
			setDCooldown("CampfireActive1::%uuid of loop-player%", 0)
		if CooldownExists("CampfireActive2::%uuid of loop-player%") is not true:
			setDCooldown("CampfireActive2::%uuid of loop-player%", 0)
		if CooldownExists("CampfireActive3::%uuid of loop-player%") is not true:
			setDCooldown("CampfireActive3::%uuid of loop-player%", 0)
		if CooldownExists("Blur::%uuid of loop-player%") is not true:
			setDCooldown("Blur::%uuid of loop-player%", 0)
		if CooldownExists("Velocity::%uuid of loop-player%") is not true:
			setDCooldown("Velocity::%uuid of loop-player%", 0)
		if CooldownExists("SpeedStorm::%uuid of loop-player%") is not true:
			setDCooldown("SpeedStorm::%uuid of loop-player%", 0)
		if CooldownExists("KineticBurst::%uuid of loop-player%") is not true:
			setDCooldown("KineticBurst::%uuid of loop-player%", 0)
		if CooldownExists("EnergyBeam::%uuid of loop-player%") is not true:
			setDCooldown("EnergyBeam::%uuid of loop-player%", 0)
		if CooldownExists("KineticOverdrive::%uuid of loop-player%") is not true:
			setDCooldown("KineticOverdrive::%uuid of loop-player%", 0)
		if CooldownExists("Dash::%uuid of loop-player%") is not true:
			setDCooldown("Dash::%uuid of loop-player%", 0)
		if CooldownExists("BreezyBash::%uuid of loop-player%") is not true:
			setDCooldown("BreezyBash::%uuid of loop-player%", 0)
		if CooldownExists("Autoenchanting::%uuid of loop-player%") is not true:
			setDCooldown("Autoenchanting::%uuid of loop-player%", 0)
		if CooldownExists("Daggers::%uuid of loop-player%") is not true:
			setDCooldown("Daggers::%uuid of loop-player%", 0)
		if CooldownExists("Drift::%uuid of loop-player%") is not true:
			setDCooldown("Drift::%uuid of loop-player%", 0)
		if CooldownExists("Astral::%uuid of loop-player%") is not true:
			setDCooldown("Astral::%uuid of loop-player%", 0)
		if CooldownExists("Disabled::%uuid of loop-player%") is not true:
			setDCooldown("Disabled::%uuid of loop-player%", 0)
			

on right click:
	if IsDisabled(player) is not true:
		if WhatEnergy(player's held item) is not 0:
			if WhatGem(player's held item) is "puff":
				if WhatTier(player's held item) is 2:
					if canUsePower("Dash::%uuid of player%") is true:
						if WhatEnergy(player's held item) > 4:
							setCooldown("Dash::%uuid of player%", toMilli(0, 20), player)
						else if WhatEnergy(player's held item) is 4:
							setCooldown("Dash::%uuid of player%", toMilli(0, 25), player)
						else if WhatEnergy(player's held item) is 3:
							setCooldown("Dash::%uuid of player%", toMilli(0, 30), player)
						else if WhatEnergy(player's held item) is 2:
							setCooldown("Dash::%uuid of player%", toMilli(0, 35), player)
						else if WhatEnergy(player's held item) is 1:
							setCooldown("Dash::%uuid of player%", toMilli(0, 40), player)

						push player forward at speed 5
						send "&füîÆ <##B8FFFB>You have activated &f‚è´<##EFEFEF>Dash <##B8FFFB>skill" to player

						set {_puffholder} to player
						wait 1 tick
						loop 40 times:
							loop all entities within 2 blocks of the player:
								if loop-entity is not {_puffholder}:
									if IsTrusted(player, loop-entity) is not true:
										set {_ent} to loop-entity
										if {_ent} doesn't contain {_dontdmgagain::*}:
											if {_ent} is not a player:
												damage {_ent} by 0.000001
												if {_ent} is a player:
													set {_pla} to {_ent} parsed as player
												if {_pla}'s health > 2:
													remove 2 from {_pla}'s health
												else:
													if {_pla}'s offhand item is not a totem of undying:
														if {_pla}'s held item is not a totem of undying:
															remove 2 from {_pla}'s health
														else:
															damage {_pla} by 9999
													else:
														damage {_pla} by 9999
											else:
												remove 2.5 from {_ent}'s health

												broadcast {_ent}'s health
												add {_ent} to {_dontdmgagain::*}
									else:
										send "<##FFD773>üîÆ &fYou cannout cast negative skills on allies!" to {_puffholder}
							wait 1 ticks


					else:
						set {_dash} to getActionBarCooldown("Dash::%uuid of player%")
						send "&füîÆ &cYour &f‚è´<##EFEFEF>Dash &cskill is on cooldown for <##EFEFEF>%{_dash}%" to player

				else:
					send "&füî∫ <##FD8988>You need tier 2 gem to cast this skill!" to player

on damage:
	if IsDisabled(attacker) is not true:
		if WhatEnergy(attacker's held item) is not 0:
			if WhatGem(attacker's held item) is "puff":
				if WhatTier(attacker's held item) is 2:
					if canUsePower("BreezyBash::%uuid of attacker%") is true:
						if IsTrusted(attacker, victim) is not true:
							if WhatEnergy(attacker's held item) > 4:
								setCooldown("BreezyBash::%uuid of attacker%", toMilli(1, 15), attacker)
							else if WhatEnergy(attacker's held item) is 4:
								setCooldown("BreezyBash::%uuid of attacker%", toMilli(1, 30), attacker)
							else if WhatEnergy(attacker's held item) is 3:
								setCooldown("BreezyBash::%uuid of attacker%", toMilli(1, 45), attacker)
							else if WhatEnergy(attacker's held item) is 2:
								setCooldown("BreezyBash::%uuid of attacker%", toMilli(2, 0), attacker)
							else if WhatEnergy(attacker's held item) is 1:
								setCooldown("BreezyBash::%uuid of attacker%", toMilli(2, 30), attacker)
									
							send "&füîÆ <##B8FFFB>You have been affected with &f‚òÅ<##EFEFEF>Breazy bash <##B8FFFB>by <##EFEFEF>%attacker%" to victim
							send "&füîÆ <##B8FFFB>You have activated &f‚òÅ<##EFEFEF>Breazy bash <##B8FFFB>skill on <##EFEFEF>%victim.getName()%" to attacker
							wait 1 ticks
							push victim up at speed 6
							wait 1.25 seconds
							push victim down at speed 9

						else:
							send "<##FFD773>üîÆ &fYou cannot cast negative powers on allies!" to attacker

					else:
						set {_bb} to getActionBarCooldown("BreezyBash::%uuid of attacker%")
						send "&füîÆ &cYour &f‚òÅ<##EFEFEF>Breazy bash &cskill is on cooldown for <##EFEFEF>%{_bb}%" to attacker

left click:
	if IsDisabled(player) is not true:
		if WhatEnergy(player's held item) is not 0:
			if WhatGem(player's held item) is "puff":
				if WhatTier(player's held item) is 2:
					if canUsePower("BreezyBash::%uuid of player%") is true:
						if WhatEnergy(player's held item) > 4:
							setCooldown("BreezyBash::%uuid of player%", toMilli(1, 15), player)
							set {_num} to 4
						else if WhatEnergy(player's held item) is 4:
							setCooldown("BreezyBash::%uuid of player%", toMilli(1, 30), player)
							set {_num} to 3.5
						else if WhatEnergy(player's held item) is 3:
							setCooldown("BreezyBash::%uuid of player%", toMilli(1, 45), player)
							set {_num} to 2.5
						else if WhatEnergy(player's held item) is 2:
							setCooldown("BreezyBash::%uuid of player%", toMilli(2, 0), player)
							set {_num} to 2.5
						else if WhatEnergy(player's held item) is 1:
							setCooldown("BreezyBash::%uuid of player%", toMilli(2, 30), player)
							set {_num} to 1.5

						send "&füîÆ <##B8FFFB>You have activated group &f‚òÅ<##EFEFEF>Breazy Bash <##B8FFFB>skill &7(radius 4)" to player
						set {_loc} to location of player
						set {_s} to 0.5
						loop {_num} + {_num} times:
							PuffCircle({_s}, {_loc})	
							add 0.5 to {_s}
							wait 1 tick
						PuffCirclelast({_s}, {_loc})
						loop all entities within {_num} blocks of the player:
							if loop-entity is not player:
								if IsTrusted(player, loop-entity) is not true:
											
									send "&füîÆ <##B8FFFB>You have been affected with &f‚òÅ<##EFEFEF>Breazy Bash <##B8FFFB>by <##EFEFEF>%player%" to loop-entity
									set {_p} to loop-entity
									set {_direction} to vector between player and {_p}

									push {_p} up at speed 1
									push {_p} {_direction} at speed 3
								else:
									send "<##FFD773>üîÆ &fYou cannout cast negative skills on allies!" to player

								


				else:
					send "&füî∫ <##FD8988>You need tier 2 gem to cast this skill!" to player

function PuffCircle(s: number, p: location):
	set {_spacing} to 0.1
	set {_pl} to location of {_p}
	set {_circumference} to 2 * pi * {_s}
	
	# Calculate the number of particles based on the spacing
	set {_numParticles} to floor({_circumference} / {_spacing})
	
	# Spawn the exact number of particles needed

	loop {_numParticles} times:
		set {_angle} to loop-value * 360 / {_numParticles}
		set {_v} to spherical vector with radius {_s}, yaw {_angle} and pitch 0
		
		make 1 of dust using dustOption(rgb(239, 239, 239), 1) at {_pl} ~ {_v}
		draw 1 of smoke at {_pl} ~ {_v} with extra 0 with force

function PuffCirclelast(s: number, p: location):
	set {_pl} to location of {_p}
	loop 7 times:
		PuffCircle({_s}, {_pl})
		wait 0.3 seconds





on flight toggle:
	if player's gamemode is survival:
		if WhatGem(player's held item) is "puff":
			if WhatEnergy(player's held item) is not 0:
				if canUsePower("DoubleJump::%uuid of player%") is true:
					wait 1 tick
					if player is flying:
						set fly mode of player to false
						push player up at speed 0.7
						push player forward at speed 1.2
						setDCooldown("DoubleJump::%uuid of player%", toMilli(0, 50))
						set {-DoubleJumping::%player's uuid%} to true
						send "&füîÆ <##B8FFFB>You have used <##EFEFEF>Double Jump&f! <##B8FFFB>Now on cooldown for <##EFEFEF>5 seconds" to player
						while {-DoubleJumping::%player's uuid%} is set:
							if the block below player is air:
								draw 2 of cloud at player with extra 0
								wait 1 tick
							else:
								delete {-DoubleJumping::%player's uuid%}
								setCooldown("DoubleJump::%uuid of player%", toMilli(0, 5), player)

		else if WhatGem(player's offhand item) is "puff":
			if WhatEnergy(player's offhand item) is not 0:
				if canUsePower("DoubleJump::%uuid of player%") is true:
					wait 1 tick
					if player is flying:
						set fly mode of player to false
						push player up at speed 0.7
						push player forward at speed 1.2
						setDCooldown("DoubleJump::%uuid of player%", toMilli(0, 50))
						set {-DoubleJumping::%player's uuid%} to true
						send "&füîÆ <##B8FFFB>You have used <##EFEFEF>Double Jump&f! <##B8FFFB>Now on cooldown for <##EFEFEF>5 seconds" to player
						while {-DoubleJumping::%player's uuid%} is set:
							if the block below player is air:
								draw 2 of cloud at player with extra 0
								wait 1 tick
							else:
								delete {-DoubleJumping::%player's uuid%}
								setDCooldown("DoubleJump::%uuid of player%", toMilli(0, 5))

		else:
			set fly mode of player to false


on jump:
	if IsDisabled(player) is not true:
		if WhatGem(player's held item) is "puff":
			if WhatEnergy(player's held item) is not 0:
				if canUsePower("DoubleJump::%uuid of player%") is true:
					set fly mode of player to true

		if WhatGem(player's offhand item) is "puff":
			if WhatEnergy(player's offhand item) is not 0:
				if canUsePower("DoubleJump::%uuid of player%") is true:
					set fly mode of player to true

		if WhatGem(player's offhand item) is not "puff":
			if WhatGem(player's held item) is not "Puff":
				if player's gamemode is survival:
					set fly mode of player to false
				else:
					set fly mode of player to true




on damage:
	if IsDisabled(victim) is not true:
		if damage cause is fall:
			if WhatGem(victim's offhand item) is "puff":
				if WhatEnergy(victim's offhand item) > 1:
					cancel event
			if WhatGem(victim's held item) is "puff":
				if WhatEnergy(victim's held item) > 1:
					cancel event

on block trample:
	if IsDisabled(event-entity) is not true:
		if event-entity is a player:
			if WhatGem(player's offhand item) is "puff":
				if WhatEnergy(player's offhand item) > 1:
					cancel event

			if WhatGem(player's held item) is "puff":
				if WhatEnergy(player's held item) > 1:
					cancel event

# Wealth

on experience increase:
	if IsDisabled(player) is not true:
		if WhatGem(player's offhand item) is "wealth":
			add spawned experience to spawned experience

# strength



function StrengthAction(itext: text, p: player):
	if {_itext} is "held":
		set {_i} to {_p}'s held item
		
	if {_itext} is "offhand":
		set {_i} to {_p}'s offhand item


	set {_b} to getActionBarCooldown("Bounty::%uuid of {_p}%")

	if WhatTier({_i}) is 2:
		set {_fr} to getActionBarCooldown("Frailer::%uuid of {_p}%")


		set {_cs} to getActionBarCooldown("ChadStrength::%uuid of {_p}%")

		send action bar "&fü§∫ %{_fr}%  <##F10303>üîÆ %{_b}%  &f‚öî %{_cs}%" to {_p}

	else:
		send action bar "<##F10303>üî∫ %{_b}%" to {_p}

		


# Life Gem

function LifeAction(itext: text, p: player):
	if {_itext} is "held":
		set {_i} to {_p}'s held item
		
	if {_itext} is "offhand":
		set {_i} to {_p}'s offhand item

	set {_v} to getActionBarCooldown("Vitality::%uuid of {_p}%")

	if WhatTier({_i}) is 2:

		set {_lc} to getActionBarCooldown("LifeCircle::%uuid of {_p}%")

		set {_hl} to getActionBarCooldown("HeartLock::%uuid of {_p}%")
			
		send action bar "&füíò %{_hl}%  <##FE04B4>üîÆ %{_v}%  &füíñ %{_lc}%" to {_p}

	else:
		send action bar "<##FE04B4>üî∫ %{_v}%" to {_p}



left click:
	if IsDisabled(player) is not true:
		if WhatGem(player's held item) is "life":
			if WhatTier(player's held item) is 2:
				if WhatEnergy(player's held item) is not 0:
					if canUsePower("HeartLock::%uuid of player%") is true:

						if WhatEnergy(player's held item) > 4:
							setCooldown("HeartLock::%uuid of player%", toMilli(1, 15), player)
							set {_num} to 3
						else if WhatEnergy(player's held item) is 4:
							setCooldown("HeartLock::%uuid of player%", toMilli(1, 30), player)
							set {_num} to 2.5
						else if WhatEnergy(player's held item) is 3:
							setCooldown("HeartLock::%uuid of player%", toMilli(1, 45), player)
							set {_num} to 2.5
						else if WhatEnergy(player's held item) is 2:
							setCooldown("HeartLock::%uuid of player%", toMilli(2, 0), player)
							set {_num} to 1.5
						else if WhatEnergy(player's held item) is 1:
							setCooldown("HeartLock::%uuid of player%", toMilli(2, 30), player)
							set {_num} to 1.5

						send "<##FE04B4>üîÆ <##B8FFFB>You used &8üíò<##FE04B4>Heart Drainer" to player
						set {_s} to 1
						set {_loc} to player's location
						loop {_num} + {_num} times:

							if loop-value is not {_num} + {_num}:
								LifeCircle({_s}, {_loc})
					
								add 0.5 to {_s}
								wait 1 tick

							else:
								LifeCirclelast({_s}, {_loc})

						set {_lifeholder} to player
						loop all entities within {_num} blocks of the player:
							if loop-entity is not {_lifeholder}:
								send "<##FE04B4>üîÆ &0üíò<##B8FFFB>Your heart count has been reduced by &e15%% <##B8FFFB>for <##FE04B4>60 seconds <##B8FFFB>by <##FE04B4>%{_lifeholder}%" to loop-entity
								set loop-entity's max health to 8
								wait 1 minute
								set loop-entity's max health to 10


			else:
				send "&füî∫ <##FD8988>You need tier 2 gem to cast this skill!" to player

on damage:
	if IsDisabled(attacker) is not true:
		if WhatGem(attacker's held item) is "life":
			if WhatTier(attacker's held item) is 2:
				if canUsePower("HeartLock::%uuid of attacker%") is true:
					if WhatEnergy(attacker's held item) is not 0:
						if victim's max health is 10:
							if IsTrusted(attacker, victim) is not true:
								if WhatEnergy(attacker's held item) > 4:
									setCooldown("HeartLock::%uuid of attacker%", toMilli(1, 15), attacker)
								else if WhatEnergy(attacker's held item) is 4:
									setCooldown("HeartLock::%uuid of attacker%", toMilli(1, 30), attacker)
								else if WhatEnergy(attacker's held item) is 3:
									setCooldown("HeartLock::%uuid of attacker%", toMilli(1, 45), attacker)
								else if WhatEnergy(attacker's held item) is 2:
									setCooldown("HeartLock::%uuid of attacker%", toMilli(2, 0), attacker)
								else if WhatEnergy(attacker's held item) is 1:
									setCooldown("HeartLock::%uuid of attacker%", toMilli(2, 30), attacker)
								LifeLine(attacker, victim)

								if victim is not invisible:
									send "<##FE04B4>üîÆ <##B8FFFB>You used &8üíò<##FE04B4>Heart Lock <##B8FFFB>on <##FE04B4>%victim.getName()%" to attacker
								else:
									send "<##FE04B4>üîÆ <##B8FFFB>You used &8üíò<##FE04B4>Heart Lock <##B8FFFB>on <##FE04B4>&k???" to attacker

								set {HeartLocked::%victim's uuid%} to true
								if victim's health > 3:
									set victim's max health to victim's health
								else:
									set victim's max health to 3
									
								if attacker is not invisible:
									send "<##FE04B4>üîÆ <##B8FFFB>Your heart count has been locked for <##FE04B4>20 seconds <##B8FFFB>by <##FE04B4>%attacker%" to victim
								else:
									send "<##FE04B4>üîÆ <##B8FFFB>Your heart count has been locked for <##FE04B4>20 seconds <##B8FFFB>by <##FE04B4>&k???" to victim
								wait 20 seconds
								set victim's max health to 10
								set {HeartLocked::%victim's uuid%} to false
							else:
								send "<##FFD773>üîÆ <##FFE4AB>You cannot cast negative skills on allies!" to attacker


			else:
				send "&füî∫ <##FD8988>You need tier 2 gem to cast this skill!" to attacker

on death:
	set victim's max health to 10
	execute console command "attribute %victim% minecraft:generic.attack_speed base set 4"

on join:
	set player's max health to 10
	execute console command "attribute %player% minecraft:generic.attack_speed base set 4"

on death of player:
	if attacker is a player:
		loop all items in attacker's inventory:
			if WhatGem(loop-value) is "astra":
				set {_gem} to "<##A01FFF>&l·¥Äs·¥õ Ä·¥Ä"
			else if WhatGem(loop-value) is "wealth":
				set {_gem} to "<##0EC912>&l·¥°·¥á·¥Ä ü·¥õ ú"
			else if WhatGem(loop-value) is "puff":
				set {_gem} to "<##EFEFEF>&l·¥ò·¥ú“ì“ì"
			else if WhatGem(loop-value) is "speed":
				set {_gem} to "<##FEFD17>&ls·¥ò·¥á·¥á·¥Ö"
			else if WhatGem(loop-value) is "life":
				set {_gem} to "<##FE04B4>&l ü…™“ì·¥á"
			else if WhatGem(loop-value) is "strength":
				set {_gem} to "<##F10103>&ls·¥õ Ä·¥á…¥…¢·¥õ ú"
			else if WhatGem(loop-value) is "flux":
				set {_gem} to "<##5ED7FF>&l“ì ü·¥úx"
			else if WhatGem(loop-value) is "fire":
				set {_gem} to "<##FE8120>&l“ì…™ Ä·¥á"

			if WhatEnergy(loop-value) is less than or equal to 10:
				set {_energy} to WhatEnergy(loop-value)
				add 1 to {_energy}

				if {_energy} is 10:
					set {_energymsg} to "<##57FFC7>Pristine &f+ <##96FFD9>5"
				else if {_energy} is 9:
					set {_energymsg} to "<##57FFC7>Pristine &f+ <##96FFD9>4"
				else if {_energy} is 8:
					set {_energymsg} to "<##57FFC7>Pristine &f+ <##96FFD9>3"
				else if {_energy} is 7:
					set {_energymsg} to "<##57FFC7>Pristine &f+ <##96FFD9>2"
				else if {_energy} is 6:
					set {_energymsg} to "<##57FFC7>Pristine &f+ <##96FFD9>1"
				else if {_energy} is 5:
					set {_energymsg} to "<##57FFC7>Pristine"
				else if {_energy} is 4:
					set {_energymsg} to "<##57FF8F>Scratched"
				else if {_energy} is 3:
					set {_energymsg} to "<##7958DB>Cracked"
				else if {_energy} is 2:
					set {_energymsg} to "<##FFC929>Damaged"
				else if {_energy} is 1:
					set {_energymsg} to "<##FF1111>Ruined"
				else if {_energy} is 0:
					set {_energymsg} to "&7Broken"
				else:
					set {_energymsg} to "N/A"

				if {_energy} is less than or equal to 10:
					if {Energy::%victim's uuid%} is not 0:
						drop {-energyitem::%victim's uuid%::60} at victim
				else if {_energy} is more than 10:
					if {Energy::%victim's uuid%} is not 0:
						drop {-energyitem::%victim's uuid%::60} at victim

			else:
				add 0 to {_energy}
	else:
		loop the drops:
			if IsGem(loop-value) is true:
				if WhatEnergy(loop-value) is not 0:
					if {Energy::%victim's uuid%} is not 0:
						drop {-energyitem::%victim's uuid%::60} at victim

	loop all items in victim's inventory:
		if IsGem(loop-item) is true:
			add loop-item to {_gems::*}
			
	loop the drops:
		if IsGem(loop-value) is true:
			remove loop-value from the drops
			if WhatTier(loop-value) is 2:
				drop {-upgrader} at victim
			
	loop {_gems::*}:
		if WhatGem(loop-value) is "astra":
			set {_gem} to "<##A01FFF>&l·¥Äs·¥õ Ä·¥Ä"
		else if WhatGem(loop-value) is "wealth":
			set {_gem} to "<##0EC912>&l·¥°·¥á·¥Ä ü·¥õ ú"
		else if WhatGem(loop-value) is "puff":
			set {_gem} to "<##EFEFEF>&l·¥ò·¥ú“ì“ì"
		else if WhatGem(loop-value) is "speed":
			set {_gem} to "<##FEFD17>&ls·¥ò·¥á·¥á·¥Ö"
		else if WhatGem(loop-value) is "life":
			set {_gem} to "<##FE04B4>&l ü…™“ì·¥á"
		else if WhatGem(loop-value) is "strength":
			set {_gem} to "<##F10103>&ls·¥õ Ä·¥á…¥…¢·¥õ ú"
		else if WhatGem(loop-value) is "flux":
			set {_gem} to "<##5ED7FF>&l“ì ü·¥úx"
		else if WhatGem(loop-value) is "fire":
			set {_gem} to "<##FE8120>&l“ì…™ Ä·¥á"


		if WhatEnergy(loop-value) is not 0:
			set {_energy} to WhatEnergy(loop-value)
			remove 1 from {_energy}

			if {_energy} is 10:
				set {_energymsg} to "<##57FFC7>Pristine &f+ <##96FFD9>5"
			else if {_energy} is 9:
				set {_energymsg} to "<##57FFC7>Pristine &f+ <##96FFD9>4"
			else if {_energy} is 8:
				set {_energymsg} to "<##57FFC7>Pristine &f+ <##96FFD9>3"
			else if {_energy} is 7:
				set {_energymsg} to "<##57FFC7>Pristine &f+ <##96FFD9>2"
			else if {_energy} is 6:
				set {_energymsg} to "<##57FFC7>Pristine &f+ <##96FFD9>1"
			else if {_energy} is 5:
				set {_energymsg} to "<##57FFC7>Pristine"
			else if {_energy} is 4:
				set {_energymsg} to "<##57FF8F>Scratched"
			else if {_energy} is 3:
				set {_energymsg} to "<##7958DB>Cracked"
			else if {_energy} is 2:
				set {_energymsg} to "<##FFC929>Damaged"
			else if {_energy} is 1:
				set {_energymsg} to "<##FF1111>Ruined"
			else if {_energy} is 0:
				set {_energymsg} to "&7Broken"
			else:
				set {_energymsg} to "N/A"



			if {_energy} is more than or equal to 0:
				send "<##B8FFFB>You lost &cenergy<##B8FFFB>, your %{_gem}% <##B8FFFB>gem is now at %{_energymsg}%" to victim
				set {Energy::%victim's uuid%} to {_energy}

		else:
			set {_energy} to 1
			wait 1 second
			set {_energy} to 0

	

	if {_gems::*} is not set:
		remove 1 from {Energy::%victim's uuid%}
		set {_energy} to {Energy::%victim's uuid%}
		if {_energy} is 10:
			set {_energymsg} to "<##57FFC7>Pristine &f+ <##96FFD9>5"
		else if {_energy} is 9:
			set {_energymsg} to "<##57FFC7>Pristine &f+ <##96FFD9>4"
		else if {_energy} is 8:
			set {_energymsg} to "<##57FFC7>Pristine &f+ <##96FFD9>3"
		else if {_energy} is 7:
			set {_energymsg} to "<##57FFC7>Pristine &f+ <##96FFD9>2"
		else if {_energy} is 6:
			set {_energymsg} to "<##57FFC7>Pristine &f+ <##96FFD9>1"
		else if {_energy} is 5:
			set {_energymsg} to "<##57FFC7>Pristine"
		else if {_energy} is 4:
			set {_energymsg} to "<##57FF8F>Scratched"
		else if {_energy} is 3:
			set {_energymsg} to "<##7958DB>Cracked"
		else if {_energy} is 2:
			set {_energymsg} to "<##FFC929>Damaged"
		else if {_energy} is 1:
			set {_energymsg} to "<##FF1111>Ruined"
		else if {_energy} is 0:
			set {_energymsg} to "&7Broken"
		else:
			set {_energymsg} to "N/A"


		send "<##B8FFFB>You lost &cenergy<##B8FFFB>, your N/A <##B8FFFB>gem is now at %{_energymsg}%" to victim

	loop {_gems::*}:
		wait 1 tick
		give {-gem::%WhatGem(loop-value)%::1::%{_energy}%} to victim


on death:
	if victim is player:
		if {Energy::%victim's uuid%} is 0:
			loop the drops:
				if loop-value contains {-energyitem::%victim's uuid%::60}:
					remove loop-value from drops

on right click on entity:
	if IsDisabled(player) is not true:
		if WhatGem(player's held item) is "life":
			if WhatTier(player's held item) is 2:
				if WhatEnergy(player's held item) is not 0:
					if canUsePower("LifeCircle::%uuid of player%") is true:
						if WhatEnergy(player's held item) > 4:
							setCooldown("LifeCircle::%uuid of player%", toMilli(3, 0), player)
							set {_num} to 2
						else if WhatEnergy(player's held item) is 4:
							setCooldown("LifeCircle::%uuid of player%", toMilli(3, 35), player)
							set {_num} to 2
						else if WhatEnergy(player's held item) is 3:
							setCooldown("LifeCircle::%uuid of player%", toMilli(4, 12), player)
							set {_num} to 2
						else if WhatEnergy(player's held item) is 2:
							setCooldown("LifeCircle::%uuid of player%", toMilli(4, 48), player)
							set {_num} to 1
						else if WhatEnergy(player's held item) is 1:
							setCooldown("LifeCircle::%uuid of player%", toMilli(6, 0), player)
							set {_num} to 1
						
						set player's max health to 15
						send "<##FE04B4>üîÆ <##B8FFFB>You have activated &füíñ<##FE04B4>Privilege Precinct &r&7(radius 3)" to player
						send "<##FE04B4>üîÆ <##B8FFFB>You have recieved additional <##FE04B4>hearts <##B8FFFB>by <##FE04B4>%player%" to player
						set {_loc} to target entity of player's location
						loop {_num} + {_num} times:
							LifeCircleReal({_num}, {_loc})
							add 0.5 to {_num}
							wait 1 tick
						LifeCircleRealLast({_num}, {_loc})
						loop all players within {_num} blocks of target entity of player:
							if loop-player is not player:
								if IsTrusted(player, loop-player) is true:
									send "<##FE04B4>üîÆ <##B8FFFB>You have recieved additional <##FE04B4>hearts <##B8FFFB>by <##FE04B4>%player%" to loop-player
									set loop-player's max health to 14
									wait 90 seconds
									set loop-player's max health to 10
						set player's max health to 10
				
on right click:
	if IsDisabled(player) is not true:
		if WhatGem(player's held item) is "life":
			if WhatTier(player's held item) is 2:
				if WhatEnergy(player's held item) is not 0:
				if canUsePower("LifeCircle::%uuid of player%") is true:
					if WhatEnergy(player's held item) > 4:
						setCooldown("LifeCircle::%uuid of player%", toMilli(3, 0), player)
						set {_num} to 3.5
					else if WhatEnergy(player's held item) is 4:
						setCooldown("LifeCircle::%uuid of player%", toMilli(3, 35), player)
						set {_num} to 3.5
					else if WhatEnergy(player's held item) is 3:
						setCooldown("LifeCircle::%uuid of player%", toMilli(4, 12), player)
						set {_num} to 2.5
					else if WhatEnergy(player's held item) is 2:
						setCooldown("LifeCircle::%uuid of player%", toMilli(4, 48), player)
						set {_num} to 2.5
					else if WhatEnergy(player's held item) is 1:
						setCooldown("LifeCircle::%uuid of player%", toMilli(6, 0), player)
						set {_num} to 1.5
						
					send "<##FE04B4>üîÆ <##B8FFFB>Activated &füíñ<##FE04B4>Life Circle" to player
					loop 12 times:
						set durability of player's helmet to durability of player's helmet + 1
						set durability of player's chestplate to durability of player's chestplate + 1
						set durability of player's leggings to durability of player's leggings + 1
						set durability of player's boots to durability of player's boots + 1
						make 1 of happy_villager at location 1 block above player with offset vector(0.3, 0.4, 0.3) with extra 0 with force
						loop 10 times:
							LifeCircle1({_num},player)
							loop all players:
								if loop-player is not player:
									if loop-player is within 4 blocks of player:
										if loop-player's max health is not 8:
											if {HeartLocked::%loop-player's uuid%} is not true:
												if IsTrusted(player, loop-player) is true:
													set loop-player's max health to 14
												else:
													set loop-player's max health to 6
									else:
										set loop-player's max health to 10
							wait 5 ticks
						wait 5 ticks
					loop all players:
						if loop-player's max health is not 8:
							if {HeartLocked::%loop-player's uuid%} is not true:
								set loop-player's max health to 10
					

function LifeLine(p: player, e: entity):
	loop 30 times:
		set {_pl} to location of {_p}
		set {_el} to location of {_e}
		set {_v} to vector from {_p}'s head to {_e}'s head
		set vector length of {_v} to 0.1
		set {_loc} to the location 0.7 meters under {_p}'s head
		loop (distance between {_loc} and {_e}) / 0.1 times:
			draw 1 dust using dustOption(rgb(254, 4, 180, player), 1) at {_loc} with force
			draw 1 dust_color_transition using dustTransition(black, black, 1) at {_loc} with force
			set {_loc} to {_loc} ~ {_v}
		wait 2 tick

function LifeCircleReal(s: number, p: entity):
	set {_pl} to location of {_p}
	loop 360 times:
		set {_v} to spherical vector with radius {_s}, yaw loop-value and pitch 0
		make 1 of dust using dustOption(rgb(254, 4, 180, player), 0.9) at {_pl} ~ {_v} with extra 0 with force
		draw 1 of happy villager at {_pl} ~ {_v} with extra 0 with force

function LifeCircleRealLast(s: number, p: entity):
	set {_pl} to location of {_p}
	loop 10 times:
		loop 360 times:
			set {_v} to spherical vector with radius {_s}, yaw loop-value-2 and pitch 0
			make 1 of dust using dustOption(rgb(254, 4, 180, player), 0.9) at {_pl} ~ {_v} with extra 0 with force
			draw 1 of happy villager at {_pl} ~ {_v} with extra 0 with force
		wait 0.3 seconds

function LifeCircle(s: number, p: location):
	set {_spacing} to 0.1
	set {_pl} to location of {_p}
	set {_circumference} to 2 * pi * {_s}
	
	set {_numParticles} to floor({_circumference} / {_spacing})

	loop {_numParticles} times:
		set {_angle} to loop-value * 360 / {_numParticles}
		set {_v} to spherical vector with radius {_s}, yaw {_angle} and pitch 0
		
		make 1 of dust using dustOption(rgb(255, 20, 147), 1) at {_pl} ~ {_v}
		draw 1 of smoke at {_pl} ~ {_v} with extra 0 with force
		
function LifeCircle1(s: number, p: location):
	set {_spacing} to 0.1
	set {_pl} to location of {_p}
	set {_circumference} to 2 * pi * {_s}
	
	# Calculate the number of particles based on the spacing
	set {_numParticles} to floor({_circumference} / {_spacing})
	
	# Spawn the exact number of particles needed

	loop {_numParticles} times:
		set {_angle} to loop-value * 360 / {_numParticles}
		set {_v} to spherical vector with radius {_s}, yaw {_angle} and pitch 0
		
		make 1 of dust using dustOption(rgb(255, 20, 147), 1) at {_pl} ~ {_v}

function LifeCirclelast(s: number, p: location):
	set {_pl} to location of {_p}
	loop 7 times:
		LifeCircle({_s}, {_pl})
		wait 0.3 seconds


			

on consume:
	if IsDisabled(player) is not true:
		if event-item is not golden apple or enchanted golden apple:
			if WhatGem(player's offhand item) is "life":
				if WhatEnergy(player's offhand item) > 2:
					wait 1 tick
					if WhatTier(player's offhand item) is 1:
						add player's saturation / 2 to player's saturation
					if WhatTier(player's offhand item) is 2:
						add player's saturation to player's saturation
				
on eat golden apple:
	if IsDisabled(player) is not true:
		if WhatGem(player's offhand item) is "life":
			if WhatEnergy(player's offhand item) > 2:
				remove absorption from player
				apply absorption 2 to player for 1 minute
				wait 1 tick
				set player's saturation to 20
			
on eat enchanted golden apple:
	if IsDisabled(player) is not true:
		if WhatGem(player's offhand item) is "life":
			if WhatEnergy(player's offhand item) > 2:
				remove absorption from player
				apply absorption 5 to player for 1 minute
				wait 1 tick
				set player's saturation to 20
			
			


on right click:
	if IsDisabled(player) is not true:
		if WhatGem(player's offhand item) is "life":
			if WhatEnergy(player's offhand item) > 1:
				if clicked block is not grass block or sand or gravel or moss block:
					player is sneaking
					apply 1 bonemeal to event-block

on damage:
	if IsDisabled(attacker) is not true:
		if WhatGem(attacker's offhand item) is "life":
			if WhatEnergy(attacker's offhand item) > 4:
				if WhatTier(attacker's offhand item) is 2:
					if victim is a wither skeleton or a wither or a zombie or a stray or a husk or a drowned or a phantom or a skeleton or a zoglin or a zombie villager or a zombified piglin:
						draw 10 of dust using dustOption(rgb(254, 4, 180), 1) at location 1 block above victim with offset vector(0.3, 0.4, 0.3) with extra 0 with force
						add damage to damage
				if WhatTier(attacker's offhand item) is 1:
					if victim is a wither skeleton or a wither or a zombie or a stray or a husk or a drowned or a phantom or a skeleton or a zoglin or a zombie villager or a zombified piglin:
						draw 10 of dust using dustOption(rgb(254, 4, 180), 1) at location 1 block above victim with offset vector(0.3, 0.4, 0.3) with extra 0 with force
						add damage / 2 to damage

on damage:
	if IsDisabled(victim) is not true:
		if WhatGem(victim's offhand item) is "life":
			if WhatEnergy(victim's offhand item) > 3:
				damage was caused by wither effect or wither potion effect
				cancel event
					
		if WhatGem(victim's held item) is "life":
			if WhatEnergy(victim's held item) > 3:
				damage was caused by wither effect or wither potion effect
				cancel event


#[ <----- Invisible Players -----> ]


on death of player:
	if attacker has potion invisibility:
		set death message to "%victim% was slain by &k123"
			
# Plugins

# [ <----- Strength Gem -----> ]

on right click:
	if IsDisabled(player) is not true:
		if WhatGem(player's offhand item) is "strength":
			if player is sneaking:
				if WhatEnergy(player's offhand item) is not 0:
					if player's held item is a sword or air or an axe:
						if difference between {-StrengthDBC::%player%} and now is less than 0.2 seconds:
							set {_s} to 0
							set {_Strength::Tracking::GUI1} to a new chest inventory with 6 row with name "&8Select Target"
							loop all players:
								set {_p} to loop-player
								set slot {_s} of {_Strength::Tracking::GUI1} to {_p}'s skull named "%{_p}%"
								add 1 to {_s}
							wait 1 tick
							open {_Strength::Tracking::GUI1} to player	
						else:
							set {-StrengthDBC::%player%} to now


on left click:
	if IsDisabled(player) is not true:
		if WhatGem(player's held item) is "strength":
			if WhatEnergy(player's held item) is not 0:
				if WhatTier(player's held item) is 1:
					send "<##F10303>üî∫ <##FD8988>You need tier 2 gem to cast this skill!" to player

command /TestBounty:
	permission: op
	trigger:
		set {_s} to 0
		set {_Strength::Tracking::GUI1} to a new chest inventory with 6 row with name "&8Select Target"
		loop all players:

			set {_p} to loop-player
			set slot {_s} of {_Strength::Tracking::GUI1} to {_p}'s skull named "%{_p}%"
			add 1 to {_s}

		wait 1 tick
		open {_Strength::Tracking::GUI1} to player
		
on inventory click:
	loop all players:
		if name of event-inventory is "&8Select Target":
			cancel event
			if event-item is a player head:
				set {_uuid} to uuid of player
				set {_T} to event-item's name
				set {-T} to event-item's name
				set {-Tplayer::%{_uuid}%} to {_T} parsed as player

				set {_Strength::Tracking::GUI2} to a hopper inventory named "&8Place Items Belonging To Target"

				open {_Strength::Tracking::GUI2} to player 

on inventory close:
	if name of event-inventory is "&8Place Items Belonging To Target":
		set {_uuid} to uuid of player
		if {-BountyCounter::%{_uuid}%} is less than or equal to 0:
			send "<##F10303>üîÆ &cInsufficient amount of items." to player

		else:
			send "<##F10303>üîÆ &cActivated <##F10303>Bounty Hunter" to player

			play sound "entity.warden.heartbeat" with volume 4 to {-Tplayer::%{_uuid}%}
			play sound "block.bell.use" with volume 10 and pitch 0.8 to {-Tplayer::%{_uuid}%}
			play sound "ambient.cave" with volume 8 and pitch 0.8 to {-Tplayer::%{_uuid}%}
			displayBountyHunter({-Tplayer::%{_uuid}%})
			if WhatEnergy(player's offhand item) > 0:
				setCooldown("Bounty::%uuid of player%", toMilli(7, 0), player)
			if WhatEnergy(player's offhand item) > 2:
				setCooldown("Bounty::%uuid of player%", toMilli(5, 0), player)
			if WhatEnergy(player's offhand item) > 4:
				setCooldown("Bounty::%uuid of player%", toMilli(4, 0), player)
			if WhatEnergy(player's offhand item) > 6:
				setCooldown("Bounty::%uuid of player%", toMilli(3, 0), player)
			set {strength.cooldown4.%player%} to true
			set {StrengthMin4.%player%} to 5
			set {StrengthSec4.%player%} to 0

			loop {-BountyCounter::%{_uuid}%} times:
				BountyHunter(player, {-Tplayer::%{_uuid}%})
				remove 1 from {-BountyCounter::%{_uuid}%}
				wait 0.30 seconds
			set {-BountyCounter::%{_uuid}%} to 0

function displayBountyHunter(p: player):
	loop 200 times:
		send action bar "<##F10303>You feel like you're being watched..." to {_p}
		wait 1 ticks
		

on inventory click:
	if event-inventory is a hopper inventory:
		if name of event-inventory is "&8Place Items Belonging To Target":
			if click type is number key:
				wait 1 tick
				set {_uuid} to uuid of player
				if event-item's lore contains "&7Return to &a&l%{-T}%":
					add 60 to {-BountyCounter::%{_uuid}%}
				else if event-item is air:
					if {-BountyCounter::%{_uuid}%} is more than or equal to 60:
						remove 60 from {-BountyCounter::%{_uuid}%}


on inventory click:
	if name of event-inventory is "&8Place Items Belonging To Target":
		if click type is left mouse button with shift:
			set {_uuid} to uuid of player
			if event-inventory is not a hopper inventory:
				if event-item's lore contains "&7Return to &a&l%{-T}%":
					add 60 to {-BountyCounter::%{_uuid}%}
				else if event-item is air:
					if {-BountyCounter::%{_uuid}%} is more than or equal to 60:
						remove 60 from {-BountyCounter::%{_uuid}%}

on inventory click:
	if name of event-inventory is "&8Place Items Belonging To Target":
		if click type is right mouse button with shift:
			set {_uuid} to uuid of player
			if event-inventory is not a hopper inventory:
				if event-item's lore contains "&7Return to &a&l%{-T}%":
					add 60 to {-BountyCounter::%{_uuid}%}
				else if event-item is air:
					if {-BountyCounter::%{_uuid}%} is more than or equal to 60:
						remove 60 from {-BountyCounter::%{_uuid}%}

on inventory click:
	if event-inventory is a hopper inventory:
		if name of event-inventory is "&8Place Items Belonging To Target":
			wait 1 tick
			set {_uuid} to uuid of player
			if event-item's lore contains "&7Return to &a&l%{-T}%":
				add 60 to {-BountyCounter::%{_uuid}%}
			else if event-item is air:
				if {-BountyCounter::%{_uuid}%} is more than or equal to 60:
					remove 60 from {-BountyCounter::%{_uuid}%}


command /CheckCounter:
	permission: op
	trigger:
		set {_uuid} to uuid of player
		send "%{-BountyCounter::%{_uuid}%}%" to player



on damage:
	if IsDisabled(attacker) is not true:
		if WhatGem(attacker's held item) is "strength":
			if WhatTier(attacker's held item) is 2:
				if IsTrusted(attacker, victim) is not true:
					if canUsePower("Frailer::%uuid of attacker%") is true:
						if WhatEnergy(attacker's held item) is not 0:
							if attacker is not invisible:
								send "<##F10303>üîÆ <##B8FFFB>You have been affected with &fü§∫<##F10303>Frailer <##B8FFFB>by <##F10303>%attacker.getName()%" to victim
							else:
								send "<##F10303>üîÆ <##B8FFFB>You have been affected with &fü§∫<##F10303>Frailer <##B8FFFB>by <##F10303>&k???" to victim
									
							if victim is not invisible:
								send "<##F10303>üîÆ <##B8FFFB>You have activated &fü§∫<##F10303>Frailer <##B8FFFB>skill on <##F10303>%victim.getName()%" to attacker
							else:
								send "<##F10303>üîÆ <##B8FFFB>You have activated &fü§∫<##F10303>Frailer <##B8FFFB>skill on <##F10303>&k???" to attacker
							clear all the potion effects of victim
							apply weakness to victim for 20 seconds
							if WhatEnergy(attacker's held item) > 4:
								setCooldown("Frailer::%uuid of attacker%", toMilli(4, 0), attacker)
							else if WhatEnergy(attacker's held item) is 4:
								setCooldown("Frailer::%uuid of attacker%", toMilli(4, 50), attacker)
							else if WhatEnergy(attacker's held item) is 3:
								setCooldown("Frailer::%uuid of attacker%", toMilli(5, 35), attacker)
							else if WhatEnergy(attacker's held item) is 2:
								setCooldown("Frailer::%uuid of attacker%", toMilli(6, 25), attacker)
							else if WhatEnergy(attacker's held item) is 1:
								setCooldown("Frailer::%uuid of attacker%", toMilli(8, 5), attacker)
									
							set {-StrengthLine::%attacker's uuid%::%victim's uuid%} to true
							set {-frailerbar::Attacker::%attacker's uuid%::Victim::%victim's uuid%} to boss bar with id "Frailer-Attacker%attacker's uuid%Victim%victim's uuid%" with title "Frailer" with color red with style solid_bar with progress 100
							add victim to bossbar players of {-frailerbar::Attacker::%attacker's uuid%::Victim::%victim's uuid%}
								

							loop 400 times:
								remove 0.25 from bar progress of {-frailerbar::Attacker::%attacker's uuid%::Victim::%victim's uuid%}
								if bar progress of {-frailerbar::Attacker::%attacker's uuid%::Victim::%victim's uuid%} < 1:
									remove victim from bossbar players of {-frailerbar::Attacker::%attacker's uuid%::Victim::%victim's uuid%}
									delete boss bar with id "Frailer-Attacker%attacker's uuid%Victim%victim's uuid%"
								if loop-iteration is 60:
									set {-StrengthLine::%attacker's uuid%::%victim's uuid%} to false
								wait 1 tick
						else:
							set {_fr} to getActionBarCooldown("Frailer::%attacker's uuid%")
							send "<##F10303>üîÆ &cYour &fü§∫<##F10303>Frailer &cskill is on cooldown for <##F10303>%{_fr}%" to attacker
				else:
					send "<##FFD773>üîÆ <##FFE4AB>You cannot cast negative skills on allies!" to attacker
			else:
				send "<##F10303>üî∫ <##FD8988>You need tier 2 gem to cast this skill!" to attacker
			
on left click:
	if IsDisabled(player) is not true:
		if WhatGem(player's held item) is "strength":
			if WhatTier(player's held item) is 2:
				if WhatEnergy(player's held item) is not 0:
					if canUsePower("Frailer::%uuid of player%") is true:
						send "<##F10303>üîÆ <##B8FFFB>You have used &fü§∫<##F10303>Nullify &7(radius 5)" to player
						if WhatEnergy(player's held item) > 4:
							setCooldown("Frailer::%uuid of player%", toMilli(4, 0), player)
							set {_num} to 5
						else if WhatEnergy(player's held item) is 4:
							setCooldown("Frailer::%uuid of player%", toMilli(4, 49), player)
							set {_num} to 4.5
						else if WhatEnergy(player's held item) is 3:
							setCooldown("Frailer::%uuid of player%", toMilli(5, 35), player)
							set {_num} to 3.5
						else if WhatEnergy(player's held item) is 2:
							setCooldown("Frailer::%uuid of player%", toMilli(6, 25), player)
							set {_num} to 2.5
						else if WhatEnergy(player's held item) is 1:
							setCooldown("Frailer::%uuid of player%", toMilli(8, 5), player)
							set {_num} to 1.5
						set {_loc} to location of player

						set {_rad} to 0.5
						loop {_num} + {_num} times:
							StrengthCircle({_rad}, {_loc})
							add 0.5 to {_rad}						
							wait 1 tick
						StrengthCirclelast({_rad}, {_loc})

						loop all entities within {_num} blocks of player:
							if loop-entity is not player:
								if IsTrusted(player, loop-entity) is not true:
									if player is not invisible:
										send "<##F10303>üîÆ <##B8FFFB>You have been affected with &fü§∫<##F10303>Nullify <##B8FFFB>by <##F10303>%player%" to loop-entity
									else:
										send "<##F10303>üîÆ <##B8FFFB>You have been affected with &fü§∫<##F10303>Nullify <##B8FFFB>by <##F10303>&k???" to loop-entity

									clear all the potion effects of loop-entity
									set {-Nulify::%loop-entity's uuid%} to true
									set bar progress of {-Nullify::Bar::%player's uuid%} to 100
									set {-Nullify::Bar::%player's uuid%} to boss bar with id "%player's uuid%snullify" with title "&fNullify" with color red with progress 100
									set bar style of {-Nullify::Bar::%player's uuid%} to solid bar
									add loop-entity to bossbar players of {-Nullify::Bar::%player's uuid%}
							
									loop 600 times:
										remove 0.167 from bar progress of {-Nullify::Bar::%player's uuid%}
										wait 1 tick
						
									remove loop-entity from bossbar players of {-Nullify::Bar::%player's uuid%}
									set {-Nulify::%loop-entity's uuid%} to false

function StrengthCircle(s: number, p: location):
	set {_spacing} to 0.1
	set {_pl} to location of {_p}
	set {_circumference} to 2 * pi * {_s}
	
	set {_numParticles} to floor({_circumference} / {_spacing})
	
	loop {_numParticles} times:
		set {_angle} to loop-value * 360 / {_numParticles}
		set {_v} to spherical vector with radius {_s}, yaw {_angle} and pitch 0
		
		draw 1 of dust using dustOption(rgb(241, 3, 3), 1) at {_pl} ~ {_v}
		draw 1 of smoke at {_pl} ~ {_v} with extra 0 with force

function StrengthCirclelast(s: number, p: location):
	set {_pl} to location of {_p}
	loop 7 times:
		StrengthCircle({_s}, {_pl})
		wait 0.3 seconds
			
on consume of potion:
	if {-Nulify::%uuid of player%} is true:
		cancel event
		
on right click:
	if player's held item is a splash potion:
		if {-Nulify::%uuid of player%} is true:
			cancel event

	if player's held item is a lingering potion:
		if {-Nulify::%uuid of player%} is true:
			cancel event

	if player's offhand item is a splash potion:
		if {-Nulify::%uuid of player%} is true:
			cancel event

	if player's offhand item is a lingering potion:
		if {-Nulify::%uuid of player%} is true:
			cancel event


rightclick:
	if IsDisabled(player) is not true:
		if WhatGem(player's held item) is "strength":
			if WhatTier(player's held item) is 2:
				if canUsePower("ChadStrength::%uuid of player%") is true:
					if target entity of player is not set:
						send "<##F10303>üîÆ <##B8FFFB>You have activated &f‚öî<##F10303>Chad Strength" to player
						if WhatEnergy(player's held item) > 4:
							setCooldown("ChadStrength::%uuid of player%", toMilli(2, 30), player)
						else if WhatEnergy(player's held item) is 4:
							setCooldown("ChadStrength::%uuid of player%", toMilli(3, 0), player)
						else if WhatEnergy(player's held item) is 3:
							setCooldown("ChadStrength::%uuid of player%", toMilli(3, 30), player)
						else if WhatEnergy(player's held item) is 2:
							setCooldown("ChadStrength::%uuid of player%", toMilli(4, 0), player)
						else if WhatEnergy(player's held item) is 1:
							setCooldown("ChadStrength::%uuid of player%", toMilli(5, 0), player)
						draw 5 of dust using dustOption(rgb(241, 3, 3), 1) at location 1 block above player with offset vector(0.3, 0.4, 0.3) with extra 0 with force
						make 5 of happy_villager at location 1 block above player with offset vector(0.3, 0.4, 0.3) with extra 0 with force
						set {-ChadCounter::%player's uuid%} to 0
						set {-ChadActive::%player's uuid%} to true
						wait 40 seconds
						delete {-ChadActive::%player's uuid%}
						delete {-ChadCounter::%player's uuid%}
					else:
						delete {-ChadCounter::%player's uuid%}
						set {-ChadActive2::%player's uuid%} to true
						set {-ChadCounter2::%player's uuid%} to 0
						send "<##F10303>üîÆ <##B8FFFB>You have used group &f‚öî<##F10303>Chad Strength &7(radius 2)" to player
						if WhatEnergy(player's held item) > 4:
							setCooldown("ChadStrength::%uuid of player%", toMilli(2, 30), player)
						else if WhatEnergy(player's held item) is 4:
							setCooldown("ChadStrength::%uuid of player%", toMilli(3, 0), player)
						else if WhatEnergy(player's held item) is 3:
							setCooldown("ChadStrength::%uuid of player%", toMilli(3, 30), player)
						else if WhatEnergy(player's held item) is 2:
							setCooldown("ChadStrength::%uuid of player%", toMilli(4, 0), player)
						else if WhatEnergy(player's held item) is 1:
							setCooldown("ChadStrength::%uuid of player%", toMilli(5, 0), player)
						set {_num} to 0.5
						set {_loc} to location of target entity of player
						loop 7 times:
							StrengthCircleEXP({_num}, {_loc})
							add 0.5 to {_num}
							wait 1 tick
						StrengthCirclelastEXP({_num}, {_loc})
						loop all players within 4 blocks of {_loc}:
							if IsTrusted(player, loop-player) is true:
								set {-ChadActive2::%loop-player's uuid%} to true
								set {-ChadCounter2::%loop-player's uuid%} to 0
						wait 40 seconds
						loop all players:
							delete {-ChadActive2::%loop-player's uuid%}
							delete {-ChadCounter2::%loop-player's uuid%}
					
				
every 2 ticks:
	loop all players:
		if IsDisabled(loop-player) is not true:
			if {-ChadActive::%loop-player's uuid%} is set:
				if {-ChadCounter::%loop-player's uuid%} is 0:
					draw 1 smoke at location 0.6 block infront and 1.1 block above loop-player with extra 0
					draw 1 smoke at location 0.4 block infront and 0.5 blocks right and 1.1 block above loop-player with extra 0
					draw 1 smoke at location 0.4 block infront and 0.5 blocks left and 1.1 block above loop-player with extra 0
				if {-ChadCounter::%loop-player's uuid%} is 1:
					draw 1 smoke at location 0.6 block infront and 1.1 block above loop-player with extra 0
					draw 1 smoke at location 0.4 block infront and 0.5 blocks right and 1.1 block above loop-player with extra 0
					draw 1 of dust using dustOption(rgb(241, 3, 3), 1) at location 0.4 block infront and 0.5 blocks left and 1.1 block above loop-player with extra 0
				if {-ChadCounter::%loop-player's uuid%} is 2:
					draw 1 of dust using dustOption(rgb(241, 3, 3), 1) at location 0.6 block infront and 1.1 block above loop-player with extra 0
					draw 1 smoke at location 0.4 block infront and 0.5 blocks right and 1.1 block above loop-player with extra 0
					draw 1 of dust using dustOption(rgb(241, 3, 3), 1) at location 0.4 block infront and 0.5 blocks left and 1.1 block above loop-player with extra 0
				if {-ChadCounter::%loop-player's uuid%} is 3:
					draw 1 of dust using dustOption(rgb(133, 0, 0, player), 1) at location 0.6 block infront and 1.1 block above loop-player with extra 0
					draw 1 of dust using dustOption(rgb(128, 0, 0, player), 1) at location 0.4 block infront and 0.5 blocks right and 1.1 block above loop-player with extra 0
					draw 1 of dust using dustOption(rgb(121, 13, 13), 1) at location 0.4 block infront and 0.5 blocks left and 1.1 block above loop-player with extra 0
			if {-ChadActive2::%loop-player's uuid%} is set:
				if {-ChadCounter2::%loop-player's uuid%} is not 8:
					draw 1 smoke at location 2.5 blocks above loop-player with extra 0
				else:
					draw 1 of dust using dustOption(rgb(126, 2, 2), 1) at location 2.5 blocks above loop-player
				
on damage:
	if IsDisabled(attacker) is not true:
		if hit is critical:
			if {-ChadActive::%attacker's uuid%} is set:
				if {-ChadCounter::%attacker's uuid%} is set:
					if {-ChadCounter::%attacker's uuid%} < 3:
						add 1 to {-ChadCounter::%attacker's uuid%}
					else:
						add damage to damage
						set {-ChadCounter::%attacker's uuid%} to 0

			if {-ChadActive2::%attacker's uuid%} is set:		
				if {-ChadCounter2::%attacker's uuid%} is set:
					if {-ChadCounter2::%attacker's uuid%} < 8:
						add 1 to {-ChadCounter2::%attacker's uuid%}
					else:
						add damage to damage
						set {-ChadCounter2::%attacker's uuid%} to 0
				
function StrengthCircleEXP(s: number, p: location):
	set {_spacing} to 0.1
	set {_pl} to location of {_p}
	set {_circumference} to 2 * pi * {_s}
	
	set {_numParticles} to floor({_circumference} / {_spacing})
	
	loop {_numParticles} times:
		set {_angle} to loop-value * 360 / {_numParticles}
		set {_v} to spherical vector with radius {_s}, yaw {_angle} and pitch 0
		
		draw 1 of dust using dustOption(rgb(241, 3, 3), 1) at {_pl} ~ {_v}
		draw 1 of happy_villager at {_pl} ~ {_v} with extra 0 with force

function StrengthCirclelastEXP(s: number, p: location):
	set {_pl} to location of {_p}
	loop 7 times:
		StrengthCircleEXP({_s}, {_pl})
		wait 0.3 seconds


on death:
	loop all players:
		if {-frailerbar::Attacker::%loop-player's uuid%::Victim::%victim's uuid%} is set:
			remove loop-player from bossbar players of {-frailerbar::Attacker::%loop-player's uuid%::Victim::%victim's uuid%}
			remove victim from bossbar players of {-frailerbar::Attacker::%loop-player-1's uuid%::Victim::%victim's uuid%}
			delete {-frailerbar::Attacker::%loop-player-1's uuid%::Victim::%victim's uuid%}
			set {-StrengthLine::%loop-player-1's uuid%::%victim's uuid%} to false


every 1 second:
	loop all players:
		loop all entities:
			if {-StrengthLine::%loop-player-1's uuid%::%loop-entity-2's uuid%} is true:
				set {_v} to vector from loop-player-1's head to loop-entity-2's head
				set vector length of {_v} to 0.1
				set {_loc} to the location 0.7 meters under loop-player-1's head
				loop (distance between {_loc} and loop-entity-2) / 0.1 times:
					draw 1 dust using dustOption(rgb(241, 3, 3), 1) at {_loc} with extra 0 with force
					draw 1 of smoke at {_loc} with extra 0 with force
					set {_loc} to {_loc} ~ {_v}
						
function BountyHunter(p1: player, p2: player):
    set {_v} to vector from {_p1}'s head to {_p2}'s head
    set vector length of {_v} to 0.2
    set {_loc} to the location 0.7 meters under {_p1}'s head
    loop (distance between {_loc} and {_p2}) / 0.4 times:

        add 1 to {_distance}
        draw 3 dust using dustOption(rgb(241, 3, 3), 2) at {_loc} with force
        set {_loc} to {_loc} ~ {_v}
        if {_distance} = 35:
            stop
    wait 0.25 seconds


on ignition:
	if {-BlurringIgniteFalse} is true:
		cancel event


		
every 1 second:
	loop all players:
		if {-DaggerBarPro::%loop-player%} is not 0:
			remove 2 from {-HeartLockPro::%loop-player%}
			set bar progress of {-HeartLockBar::%loop-player%} to {-HeartLockPro::%loop-player%}
		if {-HeartLockPro::%loop-player%} < 1:
			if {-HeartLocking::%loop-player%} is not false:
				remove loop-player from bar players of {-HeartLockBar::%loop-player%}
				set {-HeartLocking::%loop-player%} to false

function dustparticlering(pl: location, r: number, g: number, b: number, h: number, radius: number):
	set {_spacing} to 0.1
	set {_pl} to location of {_p}
	set {_circumference} to 2 * pi * {_s}
	
	# Calculate the number of particles based on the spacing
	set {_numParticles} to floor({_circumference} / {_spacing})
	
	# Spawn the exact number of particles needed

	loop {_numParticles} times:
		set {_angle} to loop-value * 360 / {_numParticles}
		set {_v} to spherical vector with radius {_s}, yaw {_angle} and pitch 0
		
		make 1 of dust using dustOption(rgb({_r}, {_g}, {_b}), 1) at {_pl} ~ {_v}
		draw 1 of smoke at {_pl} ~ {_v} with extra 0 with force
		
function particlering(pl: location, h: number, radius: number, particletype: particle):
	set {_spacing} to 0.1
	set {_pl} to location of {_p}
	set {_circumference} to 2 * pi * {_s}
	
	# Calculate the number of particles based on the spacing
	set {_numParticles} to floor({_circumference} / {_spacing})
	
	# Spawn the exact number of particles needed

	loop {_numParticles} times:
		set {_angle} to loop-value * 360 / {_numParticles}
		set {_v} to spherical vector with radius {_s}, yaw {_angle} and pitch 0
		
		make 1 of {_particletype} at {_pl} ~ {_v} with offset vector(0, 0, 0) with extra 0



function LifeBlocks(p: player):
	# Define variables
	set {_player} to {_p}
	set {_radius} to 3
	set {_blocks::*} to air
	

	# blocks here!
	set {_b1} to Dead Tube Coral Block
	set {_b2} to Dead Fire Coral Block
	set {_b3} to Dead Bubble Coral Block
	set {_b4} to Dead Brain Coral Block
	set {_b5} to Tuff
	set {_b6} to Dead Horn Coral Fan



	set {_grass} to dead brain coral

	# Collect blocks and turn them into redstone
	loop blocks in radius {_radius} around {_player}:
		if loop-block is not air:
			wait 1 tick
			set {_originalType} to loop-block's type
			set {_blockLoc} to loop-block's location
			# Store block location and its original type
			add {_blockLoc} to {_blocks::*}
			set {_blocks::%{_blockLoc}%} to {_originalType}
			dustparticlering({_loc3}, 254, 4, 180, 1.5, 3)
			particlering({_loc3}, 2, 3, dust)
			set loop-block to {_b1}
			chance of 35%
			set loop-block to {_b2}
			chance of 35%
			set loop-block to {_b3}
			chance of 35%
			set loop-block to {_b4}
			chance of 35%
			set loop-block to {_b5}
			if loop-block is short grass:
				set loop-block to {_grass}
			else if loop-block is long grass:
				set loop-block to {_grass}

	# Wait for 5 seconds
	wait 5 seconds

	# Revert blocks back to their original state
	loop {_blocks::*}:
		set {_blockLoc} to loop-value
		set {_originalType} to {_blocks::%{_blockLoc}%}
		if {_originalType} is not air:
			wait 1 tick
			set block at {_blockLoc} to {_originalType}

# Speed Gem 

every 0.2 second:
	loop all players:
		if IsDisabled(loop-player) is not true:
			if WhatGem(loop-player's held item) is "speed":
				if WhatTier(loop-player's held item) is 2:
					if loop-player's boots slot is air:
						if WhatEnergy(loop-player's held item) > 3:
							set {_effectType} to PotionEffectType.DOLPHINS_GRACE
							set {_effect} to new PotionEffect({_effectType}, 40, 1, true, false, true)
							loop-player.addPotionEffect({_effect}, true)
					if WhatEnergy(loop-player's held item) > 3:
						set {_effectType} to PotionEffectType.SPEED
						set {_effect} to new PotionEffect({_effectType}, 40, 1, true, false, true)
						loop-player.addPotionEffect({_effect}, true)
					if WhatEnergy(loop-player's held item) > 1:
						set {_effectType} to PotionEffectType.SPEED
						set {_effect} to new PotionEffect({_effectType}, 40, 1, true, false, true)
						loop-player.addPotionEffect({_effect}, true)
						
			if WhatGem(loop-player's offhand item) is "speed":
				if WhatTier(loop-player's offhand item) is 2:
					if loop-player's boots slot is air:
						if WhatEnergy(loop-player's offhand item) > 3:
							set {_effectType} to PotionEffectType.DOLPHINS_GRACE
							set {_effect} to new PotionEffect({_effectType}, 40, 1, true, false, true)
							loop-player.addPotionEffect({_effect}, true)
					if WhatEnergy(loop-player's offhand item) > 3:
						set {_effectType} to PotionEffectType.SPEED
						set {_effect} to new PotionEffect({_effectType}, 40, 1, true, false, true)
						loop-player.addPotionEffect({_effect}, true)
					if WhatEnergy(loop-player's offhand item) > 1:
						set {_effectType} to PotionEffectType.SPEED
						set {_effect} to new PotionEffect({_effectType}, 40, 1, true, false, true)
						loop-player.addPotionEffect({_effect}, true)
						
			if WhatGem(loop-player's held item) is "speed":
				if WhatTier(loop-player's held item) is 1:
					if loop-player's boots slot is air:
						if WhatEnergy(loop-player's held item) > 3:
							set {_effectType} to PotionEffectType.DOLPHINS_GRACE
							set {_effect} to new PotionEffect({_effectType}, 40, 0, true, false, true)
							loop-player.addPotionEffect({_effect}, true)
					if WhatEnergy(loop-player's held item) > 1:		
						set {_effectType} to PotionEffectType.SPEED
						set {_effect} to new PotionEffect({_effectType}, 40, 0, true, false, true)
						loop-player.addPotionEffect({_effect}, true)
						
			if WhatGem(loop-player's offhand item) is "speed":
				if WhatTier(loop-player's offhand item) is 1:
					if loop-player's boots slot is air:
						if WhatEnergy(loop-player's offhand item) > 3:
							set {_effectType} to PotionEffectType.DOLPHINS_GRACE
							set {_effect} to new PotionEffect({_effectType}, 40, 0, true, false, true)
							loop-player.addPotionEffect({_effect}, true)
					if WhatEnergy(loop-player's offhand item) > 1:		
						set {_effectType} to PotionEffectType.SPEED
						set {_effect} to new PotionEffect({_effectType}, 40, 0, true, false, true)
						loop-player.addPotionEffect({_effect}, true)

			if WhatGem(loop-player's held item) is "strength":
				if WhatTier(loop-player's held item) is 1:
					if WhatEnergy(loop-player's held item) > 1:
						if {Prog1} is false:
							if isAtAPIChange() is false:
								set {_effectType} to PotionEffectType.INCREASE_DAMAGE
							else:
								set {_effectType} to PotionEffectType.STRENGTH
							set {_effect} to new PotionEffect({_effectType}, 40, 0, true, false, true)
							loop-player.addPotionEffect({_effect}, true)
						else:
							set loop-player's attack damage attribute to 4
			else:
				set loop-player's attack damage attribute to 2
					
			if WhatGem(loop-player's offhand item) is "strength":
				if WhatTier(loop-player's offhand item) is 1:
					if WhatEnergy(loop-player's offhand item) > 1:
						if {Prog1} is false:
							if isAtAPIChange() is false:
								set {_effectType} to PotionEffectType.INCREASE_DAMAGE
							else:
								set {_effectType} to PotionEffectType.STRENGTH
							set {_effect} to new PotionEffect({_effectType}, 40, 0, true, false, true)
							loop-player.addPotionEffect({_effect}, true)
						else:
							set loop-player's attack damage attribute to 4
			else:
				set loop-player's attack damage attribute to 2

			if WhatGem(loop-player's held item) is "strength":
				if WhatTier(loop-player's held item) is 2:
					if WhatEnergy(loop-player's held item) > 2:
						if isAtAPIChange() is false:
							set {_effectType} to PotionEffectType.INCREASE_DAMAGE
						else:
							set {_effectType} to PotionEffectType.STRENGTH
						set {_effect} to new PotionEffect({_effectType}, 40, 0, true, false, true)
						loop-player.addPotionEffect({_effect}, true)
					else:
						if WhatEnergy(loop-player's held item) > 1:
							if isAtAPIChange() is false:
								set {_effectType} to PotionEffectType.INCREASE_DAMAGE
							else:
								set {_effectType} to PotionEffectType.STRENGTH
							set {_effect} to new PotionEffect({_effectType}, 40, 0, true, false, true)
							loop-player.addPotionEffect({_effect}, true)

			if WhatGem(loop-player's offhand item) is "strength":
				if WhatTier(loop-player's offhand item) is 2:
					if WhatEnergy(loop-player's offhand item) > 2:
						if isAtAPIChange() is false:
							set {_effectType} to PotionEffectType.INCREASE_DAMAGE
						else:
							set {_effectType} to PotionEffectType.STRENGTH
						set {_effect} to new PotionEffect({_effectType}, 40, 0, true, false, true)
						loop-player.addPotionEffect({_effect}, true)
					else:
						if WhatEnergy(loop-player's offhand item) > 1:
							if isAtAPIChange() is false:
								set {_effectType} to PotionEffectType.INCREASE_DAMAGE
							else:
								set {_effectType} to PotionEffectType.STRENGTH
							set {_effect} to new PotionEffect({_effectType}, 40, 0, true, false, true)
							loop-player.addPotionEffect({_effect}, true)

			if WhatGem(loop-player's held item) is "wealth":
				if WhatTier(loop-player's held item) is 1:
					set {_effectType} to PotionEffectType.LUCK
					set {_effect} to new PotionEffect({_effectType}, 40, 0, true, false, true)
					loop-player.addPotionEffect({_effect}, true)
					
					set {_effectType} to PotionEffectType.HERO_OF_THE_VILLAGE
					set {_effect} to new PotionEffect({_effectType}, 40, 0, true, false, true)
					loop-player.addPotionEffect({_effect}, true)
					
			if WhatGem(loop-player's offhand item) is "wealth":
				if WhatTier(loop-player's offhand item) is 1:
					set {_effectType} to PotionEffectType.LUCK
					set {_effect} to new PotionEffect({_effectType}, 40, 0, true, false, true)
					loop-player.addPotionEffect({_effect}, true)
					
					set {_effectType} to PotionEffectType.HERO_OF_THE_VILLAGE
					set {_effect} to new PotionEffect({_effectType}, 40, 0, true, false, true)
					loop-player.addPotionEffect({_effect}, true)

			if WhatGem(loop-player's held item) is "wealth":
				if WhatTier(loop-player's held item) is 2:
					set {_effectType} to PotionEffectType.LUCK
					set {_effect} to new PotionEffect({_effectType}, 40, 0, true, false, true)
					loop-player.addPotionEffect({_effect}, true)
					
					set {_effectType} to PotionEffectType.HERO_OF_THE_VILLAGE
					set {_effect} to new PotionEffect({_effectType}, 40, 1, true, false, true)
					loop-player.addPotionEffect({_effect}, true)

			if WhatGem(loop-player's offhand item) is "wealth":
				if WhatTier(loop-player's offhand item) is 2:
					set {_effectType} to PotionEffectType.LUCK
					set {_effect} to new PotionEffect({_effectType}, 40, 0, true, false, true)
					loop-player.addPotionEffect({_effect}, true)
					
					set {_effectType} to PotionEffectType.HERO_OF_THE_VILLAGE
					set {_effect} to new PotionEffect({_effectType}, 40, 1, true, false, true)
					loop-player.addPotionEffect({_effect}, true)

			if WhatGem(loop-player's held item) is "fire":
				if WhatEnergy(loop-player's held item) > 1:
					set {_effectType} to PotionEffectType.FIRE_RESISTANCE
					set {_effect} to new PotionEffect({_effectType}, 40, 0, true, false, true)
					loop-player.addPotionEffect({_effect}, true)

			if WhatGem(loop-player's offhand item) is "fire":
				if WhatEnergy(loop-player's offhand item) > 1:
					set {_effectType} to PotionEffectType.FIRE_RESISTANCE
					set {_effect} to new PotionEffect({_effectType}, 40, 0, true, false, true)
					loop-player.addPotionEffect({_effect}, true)

every 1 second:
	loop all players:
		if WhatGem(loop-player's held item) is "puff":
			if WhatTier(loop-player's held item) is 1:
				loop all items in loop-player's inventory:
					if loop-item is a bow:
						if WhatEnergy(loop-player's held item) > 4:
							if loop-item is not enchanted with power 6 or power 5 or power 4:
								enchant loop-item with power 3
						if WhatEnergy(loop-player's held item) > 3:
							if loop-item is not enchanted with power 6 or power 5 or power 4 or power 3:
								enchant loop-item with power 2
						if WhatEnergy(loop-player's held item) > 2:
							if loop-item is not enchanted with punch 3 or punch 2:
								enchant loop-item with punch 1

		if WhatGem(loop-player's offhand item) is "puff":
			if WhatTier(loop-player's offhand item) is 1:
				loop all items in loop-player's inventory:
					if loop-item is a bow:
						if WhatEnergy(loop-player's offhand item) > 4:
							if loop-item is not enchanted with power 6 or power 5 or power 4:
								enchant loop-item with power 3
						if WhatEnergy(loop-player's offhand item) > 3:
							if loop-item is not enchanted with power 6 or power 5 or power 4 or power 3:
								enchant loop-item with power 2
						if WhatEnergy(loop-player's offhand item) > 2:
							if loop-item is not enchanted with punch 3 or punch 2:
								enchant loop-item with punch 1

		if WhatGem(loop-player's held item) is "puff":
			if WhatTier(loop-player's held item) is 2:
				loop all items in loop-player's inventory:
					if loop-item is a bow:
						if WhatEnergy(loop-player's held item) > 4:
							if loop-item is not enchanted with power 6:
								enchant loop-item with power 5
						if WhatEnergy(loop-player's held item) > 3:
							if loop-item is not enchanted with power 6 or power 5:
								enchant loop-item with power 4
							enchant loop-item with punch 2
						if WhatEnergy(loop-player's held item) > 2:
							if loop-item is not enchanted with punch 3 or punch 2:
								enchant loop-item with punch 1

		if WhatGem(loop-player's offhand item) is "puff":
			if WhatTier(loop-player's offhand item) is 2:
				loop all items in loop-player's inventory:
					if loop-item is a bow:
						if WhatEnergy(loop-player's offhand item) > 4:
							if loop-item is not enchanted with power 6:
								enchant loop-item with power 5
						if WhatEnergy(loop-player's offhand item) > 3:
							if loop-item is not enchanted with power 6 or power 5:
								enchant loop-item with power 4
							enchant loop-item with punch 2
						if WhatEnergy(loop-player's offhand item) > 2:
							if loop-item is not enchanted with punch 3 or punch 2:
								enchant loop-item with punch 1

		if WhatGem(loop-player's offhand item) is "speed":
			if WhatTier(loop-player's offhand item) is 1:
				loop all items in loop-player's inventory:
					if loop-item is a pickaxe or an axe or a shovel or a hoe:
						if WhatEnergy(loop-player's offhand item) > 2:
							if loop-item is not enchanted with efficiency 6 or efficiency 5 or efficiency 4 or efficiency 3:
								enchant loop-item with efficiency 2
						else if WhatEnergy(loop-player's offhand item) is 2:
							if loop-item is not enchanted with efficiency 6 or efficiency 5 or efficiency 4 or efficiency 3 or efficiency 2:
								enchant loop-item with efficiency 1
								
					if loop-item is a boots:
						if WhatEnergy(loop-player's held item) > 2:
							if loop-item is not enchanted with soul speed 4 or soul speed 3 or soul speed 2:
								enchant loop-item with soul speed 1

		if WhatGem(loop-player's held item) is "speed":
			if WhatTier(loop-player's held item) is 2:
				loop all items in loop-player's inventory:
					if loop-item is a pickaxe or an axe or a shovel or a hoe:
						if WhatEnergy(loop-player's held item) > 4:
							if loop-item is not enchanted with efficiency 6:
								enchant loop-item with efficiency 5
						if WhatEnergy(loop-player's held item) is 4:
							if loop-item is not enchanted with efficiency 6 or efficiency 5:
								enchant loop-item with efficiency 4
						if WhatEnergy(loop-player's held item) is 3:
							if loop-item is not enchanted with efficiency 6 or efficiency 5 or efficiency 4:
								enchant loop-item with efficiency 3
						if WhatEnergy(loop-player's held item) is 2:
							if loop-item is not enchanted with efficiency 6 or efficiency 5 or efficiency 4 or efficiency 3:
								enchant loop-item with efficiency 2

					if loop-item is a boots:
						if WhatEnergy(loop-player's held item) > 4:
							if loop-item is not enchanted with soul speed 4:
								enchant loop-item with soul speed 3
						if WhatEnergy(loop-player's held item) is 4:
							if loop-item is not enchanted with soul speed 4 or soul speed 3:
								enchant loop-item with soul speed 2
						if WhatEnergy(loop-player's held item) is 3:
							if loop-item is not enchanted with soul speed 4 or soul speed 3 or soul speed 2:
								enchant loop-item with soul speed 1
						
		if WhatGem(loop-player's offhand item) is "speed":
			if WhatTier(loop-player's offhand item) is 2:
				loop all items in loop-player's inventory:
					if loop-item is a pickaxe or an axe or a shovel or a hoe:
						if WhatEnergy(loop-player's offhand item) > 4:
							if loop-item is not enchanted with efficiency 6:
								enchant loop-item with efficiency 5
						if WhatEnergy(loop-player's offhand item) is 4:
							if loop-item is not enchanted with efficiency 6 or efficiency 5:
								enchant loop-item with efficiency 4
						if WhatEnergy(loop-player's offhand item) is 3:
							if loop-item is not enchanted with efficiency 6 or efficiency 5 or efficiency 4:
								enchant loop-item with efficiency 3
						if WhatEnergy(loop-player's offhand item) is 2:
							if loop-item is not enchanted with efficiency 6 or efficiency 5 or efficiency 4 or efficiency 3:
								enchant loop-item with efficiency 2

					if loop-item is a boots:
						if WhatEnergy(loop-player's offhand item) > 4:
							if loop-item is not enchanted with soul speed 4:
								enchant loop-item with soul speed 3
						if WhatEnergy(loop-player's offhand item) is 4:
							if loop-item is not enchanted with soul speed 4 or soul speed 3:
								enchant loop-item with soul speed 2
						if WhatEnergy(loop-player's offhand item) is 3:
							if loop-item is not enchanted with soul speed 4 or soul speed 3 or soul speed 2:
								enchant loop-item with soul speed 1

		if WhatGem(loop-player's held item) is "wealth":
			if WhatTier(loop-player's held item) is 2:
				if WhatEnergy(loop-player's held item) > 2:
					loop all items in loop-player's inventory:
						if loop-item is a pickaxe or an axe or a shovel or a hoe or a sword or a helmet or a chestplate or a leggings or a boots:
							if loop-item is not enchanted with mending 2:
								enchant loop-item with mending
						if loop-item is a sword:
							if loop-item is not enchanted with looting 4:
								enchant loop-item with looting 3
						if loop-item is a pickaxe or an axe:
							if loop-item is not enchanted with silk touch or fortune 4:
								enchant loop-item with fortune 3

		if WhatGem(loop-player's offhand item) is "wealth":
			if WhatTier(loop-player's offhand item) is 2:
				if WhatEnergy(loop-player's offhand item) > 2:
					loop all items in loop-player's inventory:
						if loop-item is a pickaxe or an axe or a shovel or a hoe or a sword or a helmet or a chestplate or a leggings or a boots:
							if loop-item is not enchanted with mending 2:
								enchant loop-item with mending
						if loop-item is a sword:
							if loop-item is not enchanted with looting 4:
								enchant loop-item with looting 3
						if loop-item is a pickaxe or an axe:
							if loop-item is not enchanted with silk touch or fortune 4:
								enchant loop-item with fortune 3



				if WhatGem(loop-player's held item) is "wealth":
			if WhatTier(loop-player's held item) is 1:
				if WhatEnergy(loop-player's held item) > 2:
					loop all items in loop-player's inventory:
						if loop-item is a pickaxe or an axe or a shovel or a hoe or a sword or a helmet or a chestplate or a leggings or a boots:
							if loop-item is not enchanted with mending 2:
								enchant loop-item with mending
						if loop-item is a sword:
							if loop-item is not enchanted with looting 4:
								enchant loop-item with looting 3
						if loop-item is a pickaxe or an axe:
							if loop-item is not enchanted with silk touch or fortune 4:
								enchant loop-item with fortune 3

		if WhatGem(loop-player's offhand item) is "wealth":
			if WhatTier(loop-player's offhand item) is 1:
				if WhatEnergy(loop-player's offhand item) > 2:
					loop all items in loop-player's inventory:
						if loop-item is a pickaxe or an axe or a shovel or a hoe or a sword or a helmet or a chestplate or a leggings or a boots:
							if loop-item is not enchanted with mending 2:
								enchant loop-item with mending
						if loop-item is a sword:
							if loop-item is not enchanted with looting 4:
								enchant loop-item with looting 3
						if loop-item is a pickaxe or an axe:
							if loop-item is not enchanted with silk touch or fortune 4:
								enchant loop-item with fortune 3


		if WhatGem(loop-player's held item) is "strength":
			if WhatTier(loop-player's held item) is 1:
				loop all items in loop-player's inventory:
					if loop-item is a sword or an axe:
						if loop-item is not enchanted with sharpness 3 or sharpness 4 or sharpness 5 or sharpness 6:
							if WhatEnergy(loop-player's held item) > 3:
								enchant loop-item with sharpness 2
							else:
								enchant loop-item with sharpness 1

		if WhatGem(loop-player's offhand item) is "strength":
			if WhatTier(loop-player's offhand item) is 1:
				loop all items in loop-player's inventory:
					if loop-item is a sword or an axe:
						if loop-item is not enchanted with sharpness 3 or sharpness 4 or sharpness 5 or sharpness 6:
							if WhatEnergy(loop-player's offhand item) > 3:
								enchant loop-item with sharpness 2
							else:
								enchant loop-item with sharpness 1

		if WhatGem(loop-player's held item) is "strength":
			if WhatTier(loop-player's held item) is 2:
				loop all items in loop-player's inventory:
					if loop-item is a sword or an axe:
						if WhatEnergy(loop-player's held item) > 4:
							if loop-item is not enchanted with sharpness 6:
								enchant loop-item with sharpness 5
						else if WhatEnergy(loop-player's held item) is 4:
							if loop-item is not enchanted with sharpness 6 or sharpness 5:
								enchant loop-item with sharpness 4
						else if WhatEnergy(loop-player's held item) is 3:
							if loop-item is not enchanted with sharpness 6 or sharpness 5 or sharpness 4:
								enchant loop-item with sharpness 3

		if WhatGem(loop-player's offhand item) is "strength":
			if WhatTier(loop-player's offhand item) is 2:
				loop all items in loop-player's inventory:
					if loop-item is a sword or an axe:
						if WhatEnergy(loop-player's offhand item) > 4:
							if loop-item is not enchanted with sharpness 6:
								enchant loop-item with sharpness 5
						else if WhatEnergy(loop-player's offhand item) is 4:
							if loop-item is not enchanted with sharpness 6 or sharpness 5:
								enchant loop-item with sharpness 4
						else if WhatEnergy(loop-player's offhand item) is 3:
							if loop-item is not enchanted with sharpness 6 or sharpness 5 or sharpness 4:
								enchant loop-item with sharpness 3

		if WhatGem(loop-player's offhand item) is "strength":
			if WhatTier(loop-player's offhand item) is 2:
				loop all items in loop-player's inventory:
					if loop-item is a sword or an axe:
						if WhatEnergy(loop-player's offhand item) > 4:
							if loop-item is not enchanted with sharpness 6:
								enchant loop-item with sharpness 5
						else if WhatEnergy(loop-player's offhand item) is 4:
							if loop-item is not enchanted with sharpness 6 or sharpness 5:
								enchant loop-item with sharpness 4
						else if WhatEnergy(loop-player's offhand item) is 3:
							if loop-item is not enchanted with sharpness 6 or sharpness 5 or sharpness 4:
								enchant loop-item with sharpness 3

		if WhatGem(loop-player's held item) is "life":
			if WhatTier(loop-player's held item) is 2:
				loop all items in loop-player's inventory:
					if loop-item is not enchanted with unbreaking 4:
						if loop-item is any helmet:
							if WhatEnergy(loop-player's held item) > 2:
								enchant loop-item with unbreaking 3
						if loop-item is any chestplate:
							if WhatEnergy(loop-player's held item) > 2:
								enchant loop-item with unbreaking 3
						if loop-item is any leggings:
							if WhatEnergy(loop-player's held item) > 2:
								enchant loop-item with unbreaking 3
						if loop-item is any boots:
							if WhatEnergy(loop-player's held item) > 2:
								enchant loop-item with unbreaking 3

		if WhatGem(loop-player's offhand item) is "life":
			if WhatTier(loop-player's offhand item) is 2:
				loop all items in loop-player's inventory:
					if loop-item is not enchanted with unbreaking 4:
						if loop-item is any helmet:
							if WhatEnergy(loop-player's offhand item) > 2:
								enchant loop-item with unbreaking 3
						if loop-item is any chestplate:
							if WhatEnergy(loop-player's offhand item) > 2:
								enchant loop-item with unbreaking 3
						if loop-item is any leggings:
							if WhatEnergy(loop-player's offhand item) > 2:
								enchant loop-item with unbreaking 3
						if loop-item is any boots:
							if WhatEnergy(loop-player's offhand item) > 2:
								enchant loop-item with unbreaking 3
		if WhatGem(loop-player's held item) is "life":
			if WhatTier(loop-player's held item) is 2:
				loop all items in loop-player's inventory:
					if loop-item is not enchanted with unbreaking 4:
						if loop-item is any helmet:
							if WhatEnergy(loop-player's held item) > 2:
								enchant loop-item with unbreaking 3
						if loop-item is any chestplate:
							if WhatEnergy(loop-player's held item) > 2:
								enchant loop-item with unbreaking 3
						if loop-item is any leggings:
							if WhatEnergy(loop-player's held item) > 2:
								enchant loop-item with unbreaking 3
						if loop-item is any boots:
							if WhatEnergy(loop-player's held item) > 2:
								enchant loop-item with unbreaking 3

		if WhatGem(loop-player's offhand item) is "life":
			if WhatTier(loop-player's offhand item) is 1:
				loop all items in loop-player's inventory:
					if loop-item is not enchanted with unbreaking 4 or unbreaking 3 or unbreaking 2 or unbreaking 1:
						if loop-item is any helmet:
							if WhatEnergy(loop-player's offhand item) > 2:
								enchant loop-item with unbreaking 1
						if loop-item is any chestplate:
							if WhatEnergy(loop-player's offhand item) > 2:
								enchant loop-item with unbreaking 1
						if loop-item is any leggings:
							if WhatEnergy(loop-player's offhand item) > 2:
								enchant loop-item with unbreaking 1
						if loop-item is any boots:
							if WhatEnergy(loop-player's offhand item) > 2:
								enchant loop-item with unbreaking 1
		if WhatGem(loop-player's held item) is "life":
			if WhatTier(loop-player's held item) is 1:
				loop all items in loop-player's inventory:
					if loop-item is not enchanted with unbreaking 4 or unbreaking 3 or unbreaking 2 or unbreaking 1:
						if loop-item is any helmet:
							if WhatEnergy(loop-player's held item) > 2:
								enchant loop-item with unbreaking 1
						if loop-item is any chestplate:
							if WhatEnergy(loop-player's held item) > 2:
								enchant loop-item with unbreaking 1
						if loop-item is any leggings:
							if WhatEnergy(loop-player's held item) > 2:
								enchant loop-item with unbreaking 1
						if loop-item is any boots:
							if WhatEnergy(loop-player's held item) > 2:
								enchant loop-item with unbreaking 1


on damage:
	if IsDisabled(attacker) is not true:
		if WhatGem(attacker's offhand item) is "strength":
			if WhatTier(attacker's offhand item) is 2:
				if WhatEnergy(attacker's offhand item) > 3:
					if victim is a player:
						if victim is not attacker:
							if attacker's health is between 7 and 6:
								add 1 to damage
							if attacker's health is between 6 and 5:
								add 1.5 to damage
							if attacker's health is between 5 and 4:
								add 2 to damage
							if attacker's health is between 4 and 3:
								add 2.5 to damage
							if attacker's health is below 3:
								add 3 to damage

		if WhatGem(attacker's held item) is "strength":
			if WhatTier(attacker's held item) is 2:
				if WhatEnergy(attacker's held item) > 3:
					if victim is a player:
						if victim is not attacker:
							if attacker's health is between 7 and 6:
								add 1 to damage
							if attacker's health is between 6 and 5:
								add 1.5 to damage
							if attacker's health is between 5 and 4:
								add 2 to damage
							if attacker's health is between 4 and 3:
								add 2.5 to damage
							if attacker's health is below 3:
								add 3 to damage

on mine of any ore:
	if IsDisabled(player) is not true:
		if WhatEnergy(player's offhand item) is not 0:
			if WhatGem(player's offhand item) is "wealth":
				if event-block is not ancient debris:
					chance of 25%:
						drop drops of block at event-block's location


on damage:
	if IsDisabled(attacker) is not true:
		if WhatEnergy(attacker's offhand item) is not 0:
			if WhatGem(attacker's offhand item) is "wealth":
				set durability of victim's helmet to durability of victim's helmet - 2
				set durability of victim's chestplate to durability of victim's chestplate - 2
				set durability of victim's leggings to durability of victim's leggings - 2
				set durability of victim's boots to durability of victim's boots - 2
			

every 2 seconds:
	loop all players:
		if IsDisabled(loop-player) is not true:
			if WhatGem(loop-player's offhand item) is "speed":
				if loop-player is swimming:
					if boots of loop-player is air:
						set {_loc} to location 0.2 block above and 0.5 block behind loop-player
						draw 1 dust using dustOption(rgb(254, 253, 23), 1) at {_loc} with extra 0 with force
		

on damage:
	if IsDisabled(attacker) is not true:
		if WhatGem(attacker's held item) is "speed":
			if WhatTier(attacker's held item) is 2:
				if IsTrusted(attacker, victim) is not true:
					if canUsePower("Blur::%uuid of attacker%") is true:
						if attacker is not invisible:
							send "<##FEFD17>üîÆ <##B8FFFB>You have been affected by <##FEFD17>Blur <##B8FFFB>by <##FEFD17>%attacker%" to victim
						else:
							send "<##FEFD17>üîÆ <##B8FFFB>You have been affected by <##FEFD17>Blur <##B8FFFB>by <##FEFD17>&k???" to victim
									
						if victim is not invisible:
							send "<##FEFD17>üîÆ <##B8FFFB>You have used <##FEFD17>Blur <##B8FFFB>on <##FEFD17>%victim.getName()%" to attacker
						else:
							send "<##FEFD17>üîÆ <##B8FFFB>You have used <##FEFD17>Blur <##B8FFFB>on <##FEFD17>&k???" to attacker
						
						if WhatEnergy(attacker's held item) > 0:
							setCooldown("Blur::%uuid of attacker%", toMilli(5, 30), attacker)
						if WhatEnergy(attacker's held item) > 2:
							setCooldown("Blur::%uuid of attacker%", toMilli(4, 30), attacker)
						if WhatEnergy(attacker's held item) > 4:
							setCooldown("Blur::%uuid of attacker%", toMilli(3, 30), attacker)
						if WhatEnergy(attacker's held item) > 6:
							setCooldown("Blur::%uuid of attacker%", toMilli(2, 30), attacker)
						if WhatEnergy(attacker's held item) > 8:
							setCooldown("Blur::%uuid of attacker%", toMilli(1, 30), attacker)

						set {-BlurringIgniteFalse} to true
						set {-Blurring} to attacker
						set {-Blurring::%victim's uuid%} to true
						loop 2 times:
							execute console command "/npc2 remove npc-%uuid of attacker%"
							set {_loc} to location 3 blocks left of victim
							strike lightning at {_loc}
							set {_direction} to vector between {_loc} and victim
							set {_pit} to the pitch of {_direction}
							set {_yaw} to the yaw of {_direction}
							set pitch of {_loc} to {_pit}
							set yaw of {_loc} to {_yaw}
							create citizen named "npc-%uuid of attacker%" at {_loc}
							set {_np} to last created npc
							
							execute console command "/npc select npc-%uuid of attacker%"
							set {_np}'s helmet to a diamond helmet
							set last created citizen's chestplate to attacker's chestplate
							set last created citizen's leggings to attacker's leggings
							set last created citizen's boots to attacker's boots
							execute console command "/npc skin %attacker%"
							execute console command "/npc gravity"
							execute console command "/npc activationrange 5"
							execute console command "/npc target npc-%uuid of attacker% -a"
							damage victim by 2 heart
							knock victim {_direction} with strength 0.4
							wait 0.5 seconds
							execute console command "/npc remove npc-%uuid of attacker%"
									
							set {_loc} to location 3 blocks right and 1 above victim
							strike lightning at {_loc}
							set {_direction} to vector between {_loc} and victim
							set {_pit} to the pitch of {_direction}
							set {_yaw} to the yaw of {_direction}
							set pitch of {_loc} to {_pit}
							set yaw of {_loc} to {_yaw}
							create citizen named "npc-%uuid of attacker%" at {_loc}
							set {_np} to last created npc
							
							execute console command "/npc select npc-%uuid of attacker%"
							set {_np}'s helmet to a diamond helmet
							set last created citizen's chestplate to attacker's chestplate
							set last created citizen's leggings to attacker's leggings
							set last created citizen's boots to attacker's boots
							execute console command "/npc skin %attacker%"
							execute console command "/npc gravity"
							execute console command "/npc activationrange 5"
							execute console command "//npc target npc-%uuid of attacker% -a"
							damage victim by 2 hearts
							knock victim {_direction} with strength 0.4
							wait 0.5 seconds
							execute console command "/npc remove npc-%uuid of attacker%"
									
							set {_loc} to location 3 infront and 2 right of victim
							strike lightning at {_loc}
							set {_direction} to vector between {_loc} and victim
							set {_pit} to the pitch of {_direction}
							set {_yaw} to the yaw of {_direction}
							set pitch of {_loc} to {_pit}
							set yaw of {_loc} to {_yaw}
							create citizen named "npc-%uuid of attacker%" at {_loc}
							set {_np} to last created npc
							
							execute console command "/npc select npc-%uuid of attacker%"
							set {_np}'s helmet to a diamond helmet
							set last created citizen's chestplate to attacker's chestplate
							set last created citizen's leggings to attacker's leggings
							set last created citizen's boots to attacker's boots
							execute console command "/npc skin %attacker%"
							execute console command "/npc gravity"
							execute console command "/npc activationrange 5"
							execute console command "//npc target npc-%uuid of attacker% -a"
							damage victim by 1.5 hearts
							knock victim {_direction} with strength 0.4
							wait 0.5 seconds
							execute console command "/npc remove npc-%uuid of attacker%"
									
							set {_loc} to location 3 blocks behind and 1 left and 1 above victim
							strike lightning at {_loc}
							set {_direction} to vector between {_loc} and victim
							set {_pit} to the pitch of {_direction}
							set {_yaw} to the yaw of {_direction}
							set pitch of {_loc} to {_pit}
							set yaw of {_loc} to {_yaw}
							create citizen named "npc-%uuid of attacker%" at {_loc}
							set {_np} to last created npc
							
							execute console command "/npc select npc-%uuid of attacker%"
							set {_np}'s helmet to a diamond helmet
							set last created citizen's chestplate to attacker's chestplate
							set last created citizen's leggings to attacker's leggings
							set last created citizen's boots to attacker's boots
							execute console command "/npc skin %attacker%"
							execute console command "/npc gravity"
							execute console command "/npc activationrange 5"
							execute console command "//npc target npc-%uuid of attacker% -a"
							damage victim by 1 hearts
							knock victim {_direction} with strength 0.4
							wait 0.5 seconds
							execute console command "/npc remove npc-%uuid of attacker%"
									
							set {_loc} to location 3 blocks right of victim
							strike lightning at {_loc}
							set {_direction} to vector between {_loc} and victim
							set {_pit} to the pitch of {_direction}
							set {_yaw} to the yaw of {_direction}
							set pitch of {_loc} to {_pit}
							set yaw of {_loc} to {_yaw}
							create citizen named "npc-%uuid of attacker%" at {_loc}
							set {_np} to last created npc
							
							execute console command "/npc select npc-%uuid of attacker%"
							set {_np}'s helmet to a diamond helmet
							set last created citizen's chestplate to attacker's chestplate
							set last created citizen's leggings to attacker's leggings
							set last created citizen's boots to attacker's boots
							execute console command "/npc skin %attacker%"
							execute console command "/npc gravity"
							execute console command "/npc activationrange 5"
							execute console command "//npc target npc-%uuid of attacker% -a"
							damage victim by 1 heart
							knock victim {_direction} with strength 0.4
							wait 0.4 seconds
							execute console command "/npc remove npc-%uuid of attacker%"
						delete {-Blurring}
						delete {-Blurring::%victim's uuid%}
						set {-BlurringIgniteFalse} to false

								
					else:
						set {_blr} to getActionBarCooldown("Blur::%uuid of attacker%")
						send "<##FEFD17>üîÆ <##FF686F>Your <##FEFD17>Blur <##FF686F>is on cooldown for <##FEFD17>%{_blr}%" to attacker
							
				else:
					send "<##FFD773>üîÆ <##FFE4AB>You cannot cast negative skills on allies!" to attacker
			else:
				send "<##FEFD17>üî∫ <##FD8988>You need tier 2 gem to cast this skill!" to attacker

function SpeedCircleEXP(s: number, p: location):
	set {_spacing} to 0.1
	set {_pl} to location of {_p}
	set {_circumference} to 2 * pi * {_s}
	
	set {_numParticles} to floor({_circumference} / {_spacing})

	loop {_numParticles} times:
		set {_angle} to loop-value * 360 / {_numParticles}
		set {_v} to spherical vector with radius {_s}, yaw {_angle} and pitch 0
		
		make 1 of dust using dustOption(rgb(254, 253, 23), 1) at {_pl} ~ {_v}
		draw 1 of happy_villager at {_pl} ~ {_v} with extra 0 with force
		
function SpeedCirclelastEXP(s: number, p: location):
	set {_pl} to location of {_p}
	loop 7 times:
		SpeedCircleEXP({_s}, {_pl})
		wait 0.3 seconds  

#dumb solution, but we can also hardcode it. just like in the above code set speedstorm1 to player's name, and then if speedstorm1 is set, set speedstorm2 to the other player's name. 99% wont be more than two people using speedstorm at the same time
on damage:
	if damage cause is lightning:
		if {-Blurring} is not set:
			if {-SpeedStormActive} is set:
				if {-SpeedCaster::%victim's uuid%} is true:
					if victim is within 12 blocks around {-SpeedStormLoc::%victim's uuid%}:
						cancel event
						apply speed 6 without particles to victim for 12 seconds replacing the existing effect
				else:
					set {-Stunned::%victim's uuid%} to true
					wait 3 seconds
					set {-Stunned::%victim's uuid%} to false
on player move:
	if {-Stunned::%player's uuid%} is true:
		cancel event
		

rightclick:
	if IsDisabled(player) is not true:
		if target entity of player is not set:
			if WhatGem(player's held item) is "speed":
				if WhatTier(player's held item) is 2:
					if canUsePower("SpeedStorm::%uuid of player%") is true:
						If WhatEnergy(player's held item) > 0:
							setCooldown("SpeedStorm::%uuid of player%", toMilli(7, 30), player)
						If WhatEnergy(player's held item) > 2:
							setCooldown("SpeedStorm::%uuid of player%", toMilli(6, 30), player)
						If WhatEnergy(player's held item) > 4:
							setCooldown("SpeedStorm::%uuid of player%", toMilli(5, 45), player)
						If WhatEnergy(player's held item) > 6:
							setCooldown("SpeedStorm::%uuid of player%", toMilli(4, 30), player)
						If WhatEnergy(player's held item) > 8:
							setCooldown("SpeedStorm::%uuid of player%", toMilli(3, 25), player)
						send "<##FEFD17>üîÆ <##B8FFFB>You summoned a &füå©<##FEFD17>speed storm" to player
						execute console command "attribute %player% minecraft:generic.attack_speed base set 6"
						delete {-SpeedStormActive}
						set {-SpeedStormActive} to true
						set {-SpeedStorm::%player's uuid%} to true
						set {-SpeedCaster::%player's uuid%} to true
						set {_loc} to location of player
						set {-SpeedStormLoc::%player's uuid%} to location of player
						set {_num} to 1
						loop 6 times:
							SpeedCircleEXP({_num},{_loc})
							add 0.5 to {_num}
							wait 1 tick
						SpeedCirclelastEXP({_num},{_loc})
						loop 20 times:
							set {_rand1} to a random integer between 0 and 5
							set {_rand2} to a random integer between 0 and 5
							set {_rand3} to a random integer between 0 and 5
							set {_rand4} to a random integer between 0 and 5
							set {_loc2} to location {_rand1} blocks right and {_rand2} blocks left and {_rand3} blocks behind and {_rand4} blocks infront of {_loc}
							strike lightning at {_loc2}
							loop 10 times:
								set {_clusterLoc} to {_loc}
								add a random number between -5 and 5 to {_clusterLoc}'s x-coordinate
								add a random number between -5 and 5 to {_clusterLoc}'s z-coordinate
								set {_clusterLoc}'s y-coordinate to {_loc}'s y-coordinate + 10
		
								loop 20 times:
									set {_randX} to a random number between -1 and 1
									set {_randZ} to a random number between -1 and 1
									set {_loc3} to {_clusterLoc}
									add {_randX} to {_loc3}'s x-coordinate
									add {_randZ} to {_loc3}'s z-coordinate
									draw 1 of campfire cosy smoke at {_loc3} with offset vector(0.2,0.2,0.2) with extra 0 with force
							wait 1 second
						delete {-SpeedStormActive}
						set {-SpeedStorm::%player's uuid%} to false
						execute console command "attribute %player% minecraft:generic.attack_speed base set 4"
						delete {-SpeedStormLoc::%player's uuid%}
						set {-SpeedCaster::%player's uuid%} to true						
						
					else:
						set {_pt} to getActionBarCooldown("SpeedStorm::%uuid of player%")
						send "<##FEFD17>üîÆ <##FFADAD>Your &füå©<##FEFD17>Speedy Storm <##FFADAD>skill is on cooldown for <##FEFD17>%{_pt}%" to player
					
				else:
					send "<##FEFD17>üî∫ <##FD8988>You need tier 2 gem to cast this skill!" to player
					
		else:
			if WhatGem(player's held item) is "speed":
				if WhatTier(player's held item) is 2:
					if canUsePower("SpeedStorm::%uuid of player%") is true:
						If WhatEnergy(player's held item) > 0:
							setCooldown("SpeedStorm::%uuid of player%", toMilli(7, 30), player)
						If WhatEnergy(player's held item) > 2:
							setCooldown("SpeedStorm::%uuid of player%", toMilli(6, 30), player)
						If WhatEnergy(player's held item) > 4:
							setCooldown("SpeedStorm::%uuid of player%", toMilli(5, 45), player)
						If WhatEnergy(player's held item) > 6:
							setCooldown("SpeedStorm::%uuid of player%", toMilli(4, 30), player)
						If WhatEnergy(player's held item) > 8:
							setCooldown("SpeedStorm::%uuid of player%", toMilli(3, 25), player)
						send "<##FEFD17>üîÆ <##B8FFFB>You have used group &füå©<##FEFD17>speed storm <##B8FFFB>skill &7(radius 4)" to player
						set {_loc} to location of target entity of player
						execute console command "attribute %player% minecraft:generic.attack_speed base set 6"
						set {_num} to 1
						loop 6 times:
							SpeedCircleEXP({_num},{_loc})
							add 0.5 to {_num}
							wait 1 tick
						SpeedCirclelastEXP({_num},{_loc})
						loop all players within 4 blocks of {_loc}:
							if IsTrusted(player, loop-player) is true:
								execute console command "attribute %loop-player% minecraft:generic.attack_speed base set 6"
								
						wait 30 seconds
						loop all players:
							if {-SpeedStorm::%loop-player's uuid%} is not true:
								execute console command "attribute %loop-player% minecraft:generic.attack_speed base set 4"
						
					else:
						set {_pt} to getActionBarCooldown("SpeedStorm::%uuid of player%")
						send "<##FEFD17>üîÆ <##FFADAD>Your &füå©<##FEFD17>Speedy Storm <##FFADAD>skill is on cooldown for <##FEFD17>%{_pt}%" to player
					
				else:
					send "<##FEFD17>üî∫ <##FD8988>You need tier 2 gem to cast this skill!" to player

on death:
	if {-Blurring} is set:
		if attacker is not set:
			if {-Blurring::%victim's uuid%} is set:
				if victim is not invisible:
					if {-Blurring} is not invisible:
						set death message to "%victim% couldn't keep up with %{-Blurring}%"
					else:
						set death message to "%victim% couldn't keep up with &k???"
				else:
					if {-Blurring} is not invisible:
						set death message to "&k??? &fcouldn't keep up with %{-Blurring}%"
					else:
						set death message to "&k??? &fcouldn't keep up with &k???"

on death:
	if {-Crisper} is set:
		if {-Crisped::%victim's uuid%} is set:
			if attacker is not set:
				if victim is not invisible:
					if {-Crisper} is not invisible:
						set death message to "%victim% was set ablaze by %{-Crisper}%"
					else:
						set death message to "%victim% was set ablaze by &k???"
				else:
					if {-Crisper} is not invisible:
						set death message to "&k??? &fwas set ablaze by %{-Crisper}%"
					else:
						set death message to "&k??? &fwas set ablaze by &k???"
every 1 second:
	loop all players:
		if {-Crisped::%loop-player's uuid%} is true:
			set {_foodlvl} to the loop-player's food level
			set {foodlvl::%loop-player's uuid%} to {_foodlvl} - 1
			set the loop-player's food level to {foodlvl::%loop-player's uuid%}
			remove saturation from loop-player


on drop:
	loop all players:
		if last dropped item is within 4 blocks around {-CrispLoc::%loop-player's uuid%}:
			set {_item} to last dropped item
			set {_loc} to location of last dropped item
			if item of {_item} is raw iron:
				remove entity from {_item}
				drop 1 iron ingot at {_loc}
			if item of {_item} is raw gold item:
				remove entity from {_item}
				drop 1 gold ingot at {_loc}
			if item of {_item} is mutton:
				remove entity from {_item}
				drop 1 cooked mutton at {_loc}
			if item of {_item} is cobblestone:
				remove entity from {_item}
				drop 1 stone at {_loc}
			if item of {_item} is beef:
				remove entity from {_item}
				drop 1 cooked beef at {_loc}
			if item of {_item} is pork:
				remove entity from {_item}
				drop 1 cooked pork at {_loc}
			if item of {_item} is raw copper:
				remove entity from {_item}
				drop 1 copper ingot at {_loc}
			if item of {_item} is sand:
				remove entity from {_item}
				drop 1 glass at {_loc}
			if item of {_item} is ancient debris:
				remove entity from {_item}
				drop 1 netherite scrap at {_loc}
			if item of {_item} is cobblestone:
				remove entity from {_item}
				drop 1 stone at {_loc}
			if item of {_item} is cobbled deepslate:
				remove entity from {_item}
				drop 1 deepslate at {_loc}


on join:
	delete {-Crisped::%player's uuid%}


on death:
	if {-MeteorShowerCaster} is set:
		if {-MeteorShower::%victim's uuid%} is set:
			if attacker is not set:
				if victim is not invisible:
					if {-MeteorShowerCaster} is not invisible:
						set death message to "%victim% was caught in %{-MeteorShowerCaster}%'s meteor shower"
					else:
						set death message to "%victim% was caught in &k???&f's meteor shower"
				else:
					if {-MeteorShowerCaster} is not invisible:
						set death message to "&k??? &fwas caught in %{-MeteorShowerCaster}%'s meteor shower"
					else:
						set death message to "&k??? &fwas caught in &k???&f's meteor shower"

on damage:
	if damage cause is lightning:
		if {-Blurring} is set:
			cancel event

				
right click:
	if IsDisabled(player) is not true:
		if player's held item is a sword or an axe or air:
			if WhatGem(player's offhand item) is "speed":
				if WhatEnergy(player's offhand item) is not 0:
					if {-DoubleClick::%player's uuid%} is not set:
						set {-DoubleClick::%player's uuid%} to true
					else:
						delete {-DoubleClick::%player's uuid%}
						if canUsePower("Velocity::%uuid of player%") is true:
							set {_effect} to new PotionEffect(SPEED, 200, 3, true, false, true)
							player.addPotionEffect({_effect}, true)
						
							set {_effect} to new PotionEffect(HASTE, 200, 1, true, false, true)
							player.addPotionEffect({_effect}, true)
							setDCooldown("Velocity::%uuid of player%", toMilli(0, 40))
							send "<##FEFD17>üîÆ You activated <##FF686F>Terminal Velocity" to player
							set {-Terminal::%player's uuid%} to true
							set {-IWannaShoot::%player's uuid%} to false
							wait 10 seconds

							setCooldown("Velocity::%uuid of player%", toMilli(0, 30), player)
							delete {-Terminal::%player's uuid%}
						else:
							set {_message} to getCooldownSeconds("Velocity::%uuid of player%")
							send "<##FEFD17>üîÆ <##FF686F>Terminal Velocity is on cooldown for %{_message}%" to player


on right click:
	if player's held item is edible:
		if {-eatcooldown::%player's uuid%} is false:
			if player's held item is golden apple:
				if {-Terminal::%player's uuid%} is true:
					wait 1 tick
					remove 1 of player's held item from player's inventory
					set player's saturation to player's saturation + 5
					set player's food level to player's food level + 7
					apply regeneration 2 to player for 5 seconds replacing existing effect
					apply absorption 1 to player for 2 minutes replacing existing effect
					set {-eatcooldown::%player's uuid%} to true
					wait 5 ticks
					set {-eatcooldown::%player's uuid%} to false
			else if player's held item is enchanted golden apple:
				if {-Terminal::%player's uuid%} is true:
					wait 1 tick
					remove 1 of player's held item from player's inventory
					set player's saturation to player's saturation + 8
					set player's food level to player's food level + 6
					apply regeneration 2 to player for 5 seconds replacing existing effect
					apply absorption 4 to player for 2 minutes replacing existing effect
					apply resistance 1 to player for 4 minutes replacing existing effect
					apply fire resistance 1 to player for 4 minutes replacing existing effect
					set {-eatcooldown::%player's uuid%} to true
					wait 5 ticks
					set {-eatcooldown::%player's uuid%} to false
			else:
				if {-Terminal::%player's uuid%} is true:
					wait 1 tick
					set {-eatcooldown::%player's uuid%} to true
					remove 1 of event-item from player's inventory
					set player's saturation to player's saturation + 5
					set player's food level to player's food level + 4
					wait 5 ticks
					set {-eatcooldown::%player's uuid%} to false


on join:
	set {-eatcooldown::%player's uuid%} to false

on shoot:
	if event-projectile is an arrow:
		if {-Terminal::%shooter's uuid%} is true:
			if IsDisabled(shooter) is not true:
				if {-IWannaShoot::%shooter's uuid%} is not true:
					cancel event
					set {-IWannaShoot::%shooter's uuid%} to true
					make shooter shoot an arrow at speed 7
					if shooter's held item is not enchanted with infinity:
						remove 1 of arrow from shooter's inventory
					wait 1 tick
					set {-IWannaShoot::%shooter's uuid%} to false

left click:
	if IsDisabled(player) is not true:
		if WhatGem(player's held item) is "fire":
			if WhatTier(player's held item) is 2:
				if canUsePower("Fireball::%uuid of player%") is true:
					if {-ChargingFireball::%player's uuid%} is not true:
						send "<##FE8120>üîÆ <##B8FFFB>Charging &füß®<##FE8120>fireball" to player

						wait 1 tick
						set {-ChargingFireball::%player's uuid%} to true
						set bar progress of {-Fireball::Bar::%player's uuid%} to 0
						set {-Fireball::Bar::%player's uuid%} to boss bar with id "%player's uuid%sfireball" with title "&fFireball Power" with color red with progress 0
						set bar style of {-Fireball::Bar::%player's uuid%} to solid bar
						add player to bossbar players of {-Fireball::Bar::%player's uuid%}
						spawn armor stand 1 meter above and 0.4 meters behind player
						set {-fireArmor::%player's uuid%} to last spawned armor stand
						set visibility of {-fireArmor::%player's uuid%} to false
						set helmet of {-fireArmor::%player's uuid%} to fire charge
						make {-fireArmor::%player's uuid%} ride player
			
						
				else:
					set {_fb} to getActionBarCooldown("Fireball::%uuid of player%")
					send "<##FE8120>üîÆ <##FF686F>Your &füß®<##FE8120>Fireball &cis on cooldown for &e%{_fb}%" to player

every 1 second:
	loop all players:
		if IsDisabled(loop-player) is not true:
			if {-ChargingFireball::%loop-player's uuid%} is true:
				if bar progress of {-Fireball::Bar::%loop-player's uuid%} is less than 100:
					if the block below loop-player is obsidian or fire or lava or netherrack or magma:
						add 1.66 to bar progress of {-Fireball::Bar::%loop-player's uuid%}
						draw 10 of dust using dustOption(rgb(254, 129, 32), 0.8) at location 1 block above loop-player with offset vector(0.4, 0.4, 0.4) with extra 0 with force
						draw 4 of smoke at location 1 block above loop-player with offset vector(0.5, 0.5, 0.5) with extra 0 with force
					else:
						add 0.77 to bar progress of {-Fireball::Bar::%loop-player's uuid%}
						draw 10 of dust using dustOption(rgb(254, 129, 32), 0.8) at location 1 block above loop-player with offset vector(0.4, 0.4, 0.4) with extra 0 with force
						draw 4 of smoke at location 1 block above loop-player with offset vector(0.5, 0.5, 0.5) with extra 0 with force


every 2 tick:
	loop all players:
		if {-ChargingFireball::%loop-player's uuid%} is true:
			if loop-player's offhand item is a bow:
				if WhatGem(loop-player's held item) is "fire":
					kill {-fireArmor::%loop-player's uuid%}
					set {-ChargingFireball::%loop-player's uuid%} to false
					remove loop-player from bossbar players of {-Fireball::Bar::%loop-player's uuid%}
			else:
				teleport {-fireArmor::%loop-player's uuid%} to location 1.2 meter above and 0.7 meters behind loop-player

on death:
	remove victim from bossbar players of {-Fireball::Bar::%victim's uuid%}
	set {-ChargingFireball::%victim's uuid%} to false
	kill {-fireArmor::%victim's uuid%}

left click:
	if IsDisabled(player) is not true:
		if WhatGem(player's held item) is "fire":
			if WhatTier(player's held item) is 2:
				if canUsePower("Fireball::%uuid of player%") is true:
					if {-ChargingFireball::%player's uuid%} is true:
						if WhatEnergy(player's held item) > 0:
							setCooldown("Fireball::%uuid of player%", toMilli(6, 30), player)
						if WhatEnergy(player's held item) > 2:
							setCooldown("Fireball::%uuid of player%", toMilli(5, 30), player)
						if WhatEnergy(player's held item) > 4:
							setCooldown("Fireball::%uuid of player%", toMilli(4, 30), player)
						if WhatEnergy(player's held item) > 6:
							setCooldown("Fireball::%uuid of player%", toMilli(3, 30), player)
						if WhatEnergy(player's held item) > 8:
							setCooldown("Fireball::%uuid of player%", toMilli(2, 30), player)
						send "<##FE8120>üîÆ <##B8FFFB>You have launched a <##FE8120>fireball!" to player
						set {-ChargingFireball::%player's uuid%} to false
						remove player from bossbar players of {-Fireball::Bar::%player's uuid%}
						make player invulnerable
						make player shoot a fireball at speed 3
						set {-Fireball} to player
						kill {-fireArmor::%player's uuid%}
						wait 2 seconds
						make player vulnerable
						delete {-Fireball}
						
on projectile hit:
	if event-projectile is a large fireball:
		if bar progress of {-Fireball::Bar::%shooter's uuid%} is between 0 and 10:
			create an explosion of force 2 at projectile
		if bar progress of {-Fireball::Bar::%shooter's uuid%} is between 10 and 20:
			create an explosion of force 3 at projectile
		if bar progress of {-Fireball::Bar::%shooter's uuid%} is between 20 and 30:
			create an explosion of force 4 at projectile
		if bar progress of {-Fireball::Bar::%shooter's uuid%} is between 30 and 40:
			create an explosion of force 5 at projectile
		if bar progress of {-Fireball::Bar::%shooter's uuid%} is between 40 and 50:
			create an explosion of force 6 at projectile
		if bar progress of {-Fireball::Bar::%shooter's uuid%} is between 50 and 60:
			create an explosion of force 7 at projectile
		if bar progress of {-Fireball::Bar::%shooter's uuid%} is between 60 and 70:
			create an explosion of force 7.5 at projectile
		if bar progress of {-Fireball::Bar::%shooter's uuid%} is between 70 and 80:
			create an explosion of force 8 at projectile
		if bar progress of {-Fireball::Bar::%shooter's uuid%} is between 80 and 100:
			create an explosion of force 8.5 at projectile

on damage:
	if damage cause is entity explosion:
		if {-Fireball} is victim:
			cancel event
			push victim up at speed 1


on projectile hit:
	if event-projectile is a large fireball:
		if {-MeteorShowerCaster} is set:
			create a safe explosion of force 2.5 at projectile

on death:
	if attacker is not set:
		if {-Fireball} is set:
			if {-Fireball} is not invisible:
				set death message to "%victim% ate a fireball from %{-Fireball}%"
			else:
				set death message to "%victim% ate a fireball from &k???"

every 1 second:
	loop all players:
		if {-CampfireTimer::%loop-player's uuid%} is alive:
			if canUsePower("CampfireActive::%uuid of loop-player%") is true:
				if canUsePower("CampfireActive1::%uuid of loop-player%") is true:
					if canUsePower("CampfireActive2::%uuid of loop-player%") is true:
						set {_message} to getCampfireCooldown("CampfireActive3::%uuid of loop-player%")
					else:
						set {_message} to getCampfireCooldown("CampfireActive2::%uuid of loop-player%")
				else:
					set {_message} to getCampfireCooldown("CampfireActive1::%uuid of loop-player%")
			else:
				set {_message} to getCampfireCooldown("CampfireActive::%uuid of loop-player%")
			if {_message} is not "&aReady!":
				set {-CampfireTimer::%loop-player's uuid%}'s display name to "&a%{_message}%"
			else:
				kill {-CampfireTimer::%loop-player's uuid%}
			loop all players within radius 5.5 of {-CampfireTimer::%loop-player's uuid%}:
				if loop-value-2 is loop-value-1:
					if loop-value-2 is alive:
						draw 5 of dust using dustOption(rgb(254, 129, 32), 1) at location 1 block above loop-value-2 with offset vector(0.3, 0.4, 0.3) with extra 0 with force
						make 5 of happy_villager at location 1 block above loop-value-2 with offset vector(0.3, 0.4, 0.3) with extra 0 with force
						heal loop-value-2 by 2 hearts
						if loop-value-2's food level < 10:
							set loop-value-2's food level to loop-value-2's food level + 4
				else:
					if IsTrusted(loop-value-1, loop-value-2) is true:
						if loop-value-2 is alive:
							draw 5 of dust using dustOption(rgb(254, 129, 32), 1) at location 1 block above loop-value-2 with offset vector(0.3, 0.4, 0.3) with extra 0 with force
							make 5 of happy_villager at location 1 block above loop-value-2 with offset vector(0.3, 0.4, 0.3) with extra 0 with force
							heal loop-value-2 by 2 hearts
							if loop-value-2's food level < 10:
								set loop-value-2's food level to loop-value-2's food level + 4
on break:
	if block is a soul campfire:
		set {_loc} to location of event-block
		loop all entities in radius 1.5 around {_loc}:
			if loop-entity is an armor stand:
				set {_en} to loop-entity
				loop all players:
					set {_uuid} to loop-player's uuid
					set {_num} to 1
					
					loop 4 times:
						if {_en} is {-CampfireTimer%{_num}%::%{_uuid}%}:
							kill {-CampfireTimer%{_num}%::%{_uuid}%}
						else:
							add 1 to {_num}

right click:
	if IsDisabled(player) is not true:
		if WhatGem(player's held item) is "fire":
			if WhatTier(player's held item) is 2:
				if canUsePower("Campfire::%uuid of player%") is true:
					if block above target block of player is air:
						if target block of player is not air:
							set block above target block of player to a soul campfire
							send "<##FE8120>üîÆ <##B8FFFB>You have used &fü•æ&eCozy Campfire <##B8FFFB>skill!" to player
							if WhatEnergy(player's held item) > 0:
								setCooldown("Campfire::%uuid of player%", toMilli(10, 0), player)
							if WhatEnergy(player's held item) > 2:
								setCooldown("Campfire::%uuid of player%", toMilli(8, 0), player)
							if WhatEnergy(player's held item) > 4:
								setCooldown("Campfire::%uuid of player%", toMilli(5, 0), player)
							if WhatEnergy(player's held item) > 5:
								setCooldown("Campfire::%uuid of player%", toMilli(4, 0), player)
							if WhatEnergy(player's held item) > 7:
								setCooldown("Campfire::%uuid of player%", toMilli(3, 0), player)
							if canUsePower("CampfireActive::%uuid of player%") is true:
								setDCooldown("CampfireActive::%uuid of player%", toMilli(10, 0))
								set {_m} to "CampfireActive::%uuid of player%"	
								set {_cn} to 1
							else if canUsePower("CampfireActive1::%uuid of player%") is true:
								setDCooldown("CampfireActive1::%uuid of player%", toMilli(10, 0))
								set {_m} to "CampfireActive1::%uuid of player%"	
								set {_cn} to 2
							else if canUsePower("CampfireActive2::%uuid of player%") is true:
								setDCooldown("CampfireActive2::%uuid of player%", toMilli(10, 0))
								set {_m} to "CampfireActive2::%uuid of player%"	
								set {_cn} to 3
							else if canUsePower("CampfireActive3::%uuid of player%") is true:
								setDCooldown("CampfireActive3::%uuid of player%", toMilli(10, 0))	
								set {_m} to "CampfireActive3::%uuid of player%"	
								set {_cn} to 4
							set {_message} to getCampfireCooldown({_m})
							spawn armor stand 1.5 blocks below target block of player
							set {-CampfireTimer%{_cn}%::%player's uuid%} to last spawned armor stand
							set {-CampfireTimer%{_cn}%::%player's uuid%}'s display name to "&a%{_message}%"
							set gravity of {-CampfireTimer%{_cn}%::%player's uuid%} to off
							make {-CampfireTimer::%player's uuid%} invisible
							make {-CampfireTimer::%player's uuid%} invulnerable
							

							set {_pl} to location of target block of player
							set {_step} to 1
							set {_iterations} to 360 / {_step}
					
							
							loop 2400 times:
								if {-CampfireTimer%{_cn}%::%player's uuid%} is alive:
									loop {_iterations} times:
										set {_angle} to loop-value-2 * {_step}
										set {_v} to spherical vector radius 3.5, yaw {_angle}, pitch (0) # Use yaw to create the circle
										draw 1 of dust_color_transition using dustTransition(rgb(254, 129, 32), rgb(254, 129, 32), 1) at {_pl} ~ {_v} with force
									wait 0.25 seconds
								else:
									stop


on damage:
	if IsDisabled(attacker) is not true:
		if {-ChargingFireball::%attacker's uuid%} is not true:
			if WhatGem(attacker's held item) is "fire":
				if WhatTier(attacker's held item) is 2:
					if IsTrusted(attacker, victim) is not true:
						if canUsePower("Fireball::%uuid of attacker%") is true:
							if attacker is not invisible:
								send "<##FE8120>üîÆ %attacker% <##B8FFFB>is raining a <##FE8120>Meteor Shower <##B8FFFB>on you!" to victim
							else:
								send "<##FE8120>üîÆ &k???%attacker% <##B8FFFB>is raining a <##FE8120>Meteor Shower <##B8FFFB>on you!" to victim
										
							if victim is not invisible:
								send "<##FE8120>üîÆ <##B8FFFB>You have summoned a <##FE8120>Meteor Shower <##B8FFFB>on %victim.getName()%!" to attacker
							else:
								send "<##FE8120>üîÆ <##B8FFFB>You have summoned a <##FE8120>Meteor Shower <##B8FFFB>on &k???<##B8FFFB>!" to attacker
										
							set {-MeteorShower::%victim's uuid%} to true
							set {-MeteorShowerCaster} to attacker
							if WhatEnergy(attacker's held item) > 0:
								setCooldown("Fireball::%uuid of attacker%", toMilli(5, 30), attacker)
							if WhatEnergy(attacker's held item) > 2:
								setCooldown("Fireball::%uuid of attacker%", toMilli(4, 25), attacker)
							if WhatEnergy(attacker's held item) > 5:
								setCooldown("Fireball::%uuid of attacker%", toMilli(3, 45), attacker)
							if WhatEnergy(attacker's held item) > 7:
								setCooldown("Fireball::%uuid of attacker%", toMilli(2, 30), attacker)
							if WhatEnergy(attacker's held item) > 9:
								setCooldown("Fireball::%uuid of attacker%", toMilli(1, 45), attacker)
							loop 60 times:
								if victim is alive:
									set {_rand1} to a random number between 0 and 2
									set {_rand2} to a random number between 0 and 2
									set {_rand3} to a random number between 0 and 2
									set {_rand4} to a random number between 0 and 2
											
									set {MeteorShowerVictimLoc::%victim's uuid%} to location 13 blocks above and {_rand1} left and {_rand2} right and {_rand3} infront and {_rand4} behind victim
									set {_world} to world of {MeteorShowerVictimLoc::%victim's uuid%}
									set {_vector} to new Vector(0, -1, 0)
									
									set {_fireball} to {_world}.spawn({MeteorShowerVictimLoc::%victim's uuid%}, Fireball.class)
									{_fireball}.setIsIncendiary(false)
									{_fireball}.setDirection({_vector})
									{_fireball}.setVelocity({_vector})
									wait 0.5 seconds
								else:
									stop
										
							delete {MeteorShowerVictimLoc::%victim's uuid%}
							delete {-MeteorShower::%victim's uuid%}
							delete {-MeteorShowerCaster}

						else:
							set {_message} to getActionBarCooldown("Fireball::%uuid of attacker%")
							send "<##FE8120>üîÆ <##FF686F>Your &füß®<##FE8120>Meteor Shower &cis on cooldown for &e%{_message}%" to attacker

on block break:
	loop all players:
		if event-block is within 10 blocks around {-MeteorShowerVictimLoc::%player's uuid%}:
			cancel event

on ignite:
	loop all players:
		if event-block is within 10 blocks around {-SpeedStormLoc::%player's uuid%}:
			cancel event

on death:
	delete {-MeteorShowerCaster}
	set {-MeteorShower::%victim's uuid%} to false

		
function CrispCircle(s: number, p: location):
	set {_spacing} to 0.5
	set {_pl} to location of {_p}
	set {_circumference} to 2 * pi * {_s}
	
	set {_numParticles} to floor({_circumference} / {_spacing})
	

	loop {_numParticles} times:
		set {_angle} to loop-value * 360 / {_numParticles}
		set {_v} to spherical vector with radius {_s}, yaw {_angle} and pitch 0
		
		make 1 of dust using dustOption(rgb(254, 129, 32), 1) at {_pl} ~ {_v}
		draw 1 of flame at {_pl} ~ {_v} with extra 0 with force
		
function VortexCircle(s: number, p: location):
	set {_spacing} to 0.5
	set {_pl} to location of {_p}
	set {_circumference} to 2 * pi * {_s}
	
	set {_numParticles} to floor({_circumference} / {_spacing})
	

	loop {_numParticles} times:
		set {_angle} to loop-value * 360 / {_numParticles}
		set {_v} to spherical vector with radius {_s}, yaw {_angle} and pitch 0
		
		make 1 of dust using dustOption(rgb(254, 4, 180, player), 1) at {_pl} ~ {_v}
		draw 1 of happy_villager at {_pl} ~ {_v} with extra 0 with force

on break:
	if event-block is not cobweb:
		if {-unbreakable::%event-block%} is true:
			if {-crispActive} is true:
				cancel event
			else:
				set {-unbreakable::%event-block%} to false
	
		if {-unbreakable2::%event-block%} is true:
			if {-lifeActive} is true:
				cancel event
			else:
				set {-unbreakable2::%event-block%} to false
			
		if {-unbreakable3::%event-block%} is true:
			if {-lifeActive} is true:
				cancel event
			else:
				set {-unbreakable3::%event-block%} to false


on rightclick:
	if IsDisabled(player) is not true:
		if canUsePower("Crisp::%uuid of player%") is true:
			if WhatEnergy(player's offhand item) is not 0:
				if WhatGem(player's offhand item) is "fire":
					if player's held item is a sword or air or an axe:
						if difference between {-FireDBC::%player%} and now is less than 0.2 seconds:
							setDCooldown("Crisp::%uuid of player%", toMilli(0, 45))
							set {-Crisper} to player
							send "<##FE8120>üîÆ<##FF686F> You used &fü•æ<##FE8120>Crisp Ability" to player
							set {_loc} to location of player
							set {_radius} to 5
							set {_blocks::*} to air
							set {_blocks2::*} to air
							set {_blocks3::*} to air
							set {-crispActive} to true

							loop blocks in radius {_radius} around {_loc}:
								set {-unbreakable::%loop-block%} to true
								if loop-block is short grass:
									set {_originalType4} to loop-block's type
									set {_blockLoc4} to loop-block's location
									add {_blockLoc4} to {_blocks4::*}
									set {_blocks4::%{_blockLoc4}%} to {_originalType4}
									set loop-block to crimson root or warped root
							
								if loop-block is tall grass:
									set {_originalType5} to loop-block's type
									set {_blockLoc5} to loop-block's location
									add {_blockLoc5} to {_blocks5::*}
									set {_blocks5::%{_blockLoc5}%} to {_originalType5}
									set loop-block to twisting vine or weeping vine

								if loop-block is oak leaves or spruce leaves or birch leaves or acacia leaves or cherry leaves or mangrove leaves or jungle leaves or dark oak leaves:
									set {_originalType3} to loop-block's type
									set {_blockLoc3} to loop-block's location
									add {_blockLoc3} to {_blocks3::*}
									set {_blocks3::%{_blockLoc3}%} to {_originalType3}
									set loop-block to nether wart block or warped wart block

								if loop-block is grass block or stone or dirt:
									set {_originalType} to loop-block's type
									set {_blockLoc} to loop-block's location
									add {_blockLoc} to {_blocks::*}
									set {_blocks::%{_blockLoc}%} to {_originalType}
									set loop-block to netherrack or magma or basalt
							
								if loop-block is oak log or spruce log or acacia log or dark oak log or cherry log or birch log or jungle log or mangrove log:
									set {_originalType2} to loop-block's type
									set {_blockLoc2} to loop-block's location
									add {_blockLoc2} to {_blocks2::*}
									set {_blocks2::%{_blockLoc2}%} to {_originalType2}
									set loop-block to crimson stem or warped stem

				
							set {_loc2} to location 0.2 blocks above {_loc}
							loop 60 times:
								CrispCircle(5,{_loc2})
								loop all entities within 5 blocks of {_loc}:
									if IsTrusted(player, loop-entity) is not true:
										if player is not loop-entity:
											set {-Crisped::%loop-entity's uuid%} to true
											if loop-entity is not player:
												if loop-entity is not an armor stand:
													ignite loop-entity
													if loop-entity has fire resistance:
														damage loop-entity by 1 hearts
								loop all blocks in radius 5 around {_loc}:
									if loop-block is water or stationary water:
										set loop-block to air
								wait 5 tick
						
							loop all entities:
								delete {-Crisped::%loop-entity's uuid%}
							loop {_blocks::*}:
								set {_blockLoc} to loop-value
								set {_originalType} to {_blocks::%{_blockLoc}%}
								if {_originalType} is not air:
									set {-unbreakable::%block%} to false
									set block at {_blockLoc} to {_originalType}
							
							loop {_blocks2::*}:
								set {_blockLoc2} to loop-value
								set {_originalType2} to {_blocks2::%{_blockLoc2}%}
								if {_originalType2} is not air:
									set {-unbreakable::%block%} to false
									set block at {_blockLoc2} to {_originalType2}

							loop {_blocks3::*}:
								set {_blockLoc3} to loop-value
								set {_originalType3} to {_blocks3::%{_blockLoc3}%}
								if {_originalType3} is not air:
									set {-unbreakable::%block%} to false
									set block at {_blockLoc3} to {_originalType3}
							loop {_blocks4::*}:
								set {_blockLoc4} to loop-value
								set {_originalType4} to {_blocks4::%{_blockLoc4}%}
								if {_originalType4} is not air:
									set {-unbreakable::%block%} to false
									set block at {_blockLoc4} to {_originalType4}

							loop {_blocks5::*}:
								set {_blockLoc5} to loop-value
								set {_originalType5} to {_blocks5::%{_blockLoc5}%}
								if {_originalType5} is not air:
									set {-unbreakable::%block%} to false
									set block at {_blockLoc5} to {_originalType5}
								
							loop blocks in radius {_radius} around {_loc}:
								set {-unbreakable::%loop-block%} to false

							delete {-Crisper}
							set {-crispActive} to false
							if WhatEnergy(player's offhand item) > 0:
								setCooldown("Crisp::%uuid of player%", toMilli(4, 30), player)
							if WhatEnergy(player's offhand item) > 2:
								setCooldown("Crisp::%uuid of player%", toMilli(3, 30), player)
							if WhatEnergy(player's offhand item) > 4:
								setCooldown("Crisp::%uuid of player%", toMilli(2, 30), player)
							if WhatEnergy(player's offhand item) > 7:
								setCooldown("Crisp::%uuid of player%", toMilli(1, 30), player)
							if WhatEnergy(player's offhand item) > 9:
								setCooldown("Crisp::%uuid of player%", toMilli(0, 30), player)
						else:
							set {-FireDBC::%player%} to now	
		else:
			set {_message} to getCooldownSeconds("Crisp::%uuid of player%")
			send "<##FE8120>üîÆ &fü•æ<##FF686F>Crisp is on cooldown for %{_message}%" to player



on rightclick:
	if IsDisabled(player) is not true:
		if player's held item is air or a sword or an axe:
			if difference between {-LifeDBC::%player%} and now is less than 0.2 seconds:
				if WhatGem(player's offhand item) is "life":
					if WhatEnergy(player's offhand item) is not 0:
						if canUsePower("Vitality::%uuid of player%") is true:
							setDCooldown("Vitality::%uuid of player%", toMilli(0, 45))
							send "<##FE04B4>üîÆ You have activated &füíñ<##FE04B4>Vitality Vortex" to player
							set {-lifeActive} to true
							set {_loc} to location of player
							set {_radius} to 5
							set {_blocks::*} to air
							set {_blocks2::*} to air
							set {_blocks3::*} to air
							set {_blocks4::*} to air
							set the player's food level to 20
							apply absorption 2 to player for 1 minute

							loop blocks in radius {_radius} around {_loc}:
								set {-unbreakable2::%loop-block%} to true
								if loop-block is cornflower or poppy or sunflower or dandelion or blue orchid or allium or azure bluet or red tulip or orange tulip or white tulip or pink tulip or oxeye daisy or lily of the valley or torch flower or pink petals or lilac or rose bush or peony or brown mushroom or red mushroom:
									set {_originalType4} to loop-block's type
									set {_block} to loop-block
									set {_blockLoc4} to loop-block's location
									add {_blockLoc4} to {_blocks4::*}
									set {_blocks4::%{_blockLoc4}%} to {_originalType4}
									set {_effectType} to PotionEffectType.REGENERATION
									add 20 to {_effectDuration}
									set {_effect} to new PotionEffect({_effectType}, {_effectDuration}, 1, false, false, true)
									player.addPotionEffect({_effect}, true)

									set loop-block to dead bubble coral fan or dead tube coral or dead brain coral or dead bubble coral or dead fire coral or dead horn coral or dead tube coral fan or dead brain coral fan or dead fire coral fan or dead horn coral fan
								
									set {_blockData} to {_block}.getBlockData()
									if {_blockData} is Waterlogged:
										set {_blockData} to {_blockData}.clone()
										{_blockData}.setWaterlogged(false)
				
										{_block}.setBlockData({_blockData}, false)
								
							loop blocks in radius {_radius} around {_loc}:
								set {-unbreakable3::%loop-block%} to true  
								if loop-block is oak leaves or spruce leaves or birch leaves or acacia leaves or cherry leaves or mangrove leaves or jungle leaves or dark oak leaves:
									set {_originalType3} to loop-block's type
									set {_blockLoc3} to loop-block's location
									add {_blockLoc3} to {_blocks3::*}
									set {_blocks3::%{_blockLoc3}%} to {_originalType3}
									set {_effectType} to PotionEffectType.ABSORPTION
									set {_effect} to new PotionEffect({_effectType}, 1800, 1, false, false, true)
									player.addPotionEffect({_effect}, true)
									set loop-block to tuff or dead tube coral block or dead bubble coral block or dead brain coral block or dead fire coral block or dead horn coral block
							
								if loop-block is grass block or stone or dirt:
									set {_originalType} to loop-block's type
									set {_blockLoc} to loop-block's location
									add {_blockLoc} to {_blocks::*}
									set {_blocks::%{_blockLoc}%} to {_originalType}
									set loop-block to tuff or dead tube coral block or dead bubble coral block or dead brain coral block or dead fire coral block or dead horn coral block
								
								if loop-block is oak log or spruce log or acacia log or dark oak log or cherry log or birch log or jungle log or mangrove log:
									set {_originalType2} to loop-block's type
									set {_blockLoc2} to loop-block's location
									add {_blockLoc2} to {_blocks2::*}
									set {_blocks2::%{_blockLoc2}%} to {_originalType2}
									set loop-block to acacia log
									if isAtAPIChange() is false:
										set {_effectType} to PotionEffectType.DAMAGE_RESISTANCE
									else:
										set {_effectType} to PotionEffectType.RESISTANCE
									add 20 to {_effectDuration}
									set {_effect} to new PotionEffect({_effectType}, {_effectDuration}, 0, false, false, true)
									player.addPotionEffect({_effect}, true)
					

							set {_loc2} to location 0.3 blocks above {_loc}
							loop 60 times:
								VortexCircle(5,{_loc2})
								wait 5 tick
								loop all blocks in radius 5 around {_loc}:
									if loop-block is stationary water or water:
										set loop-block to air
						
							set {-lifeActive} to false
							loop {_blocks::*}:
								set {_blockLoc} to loop-value
								set {_originalType} to {_blocks::%{_blockLoc}%}
								if {_originalType} is not air:
									set {-unbreakable::%block%} to false
									set block at {_blockLoc} to {_originalType}
								
							loop {_blocks2::*}:
								set {_blockLoc2} to loop-value
								set {_originalType2} to {_blocks2::%{_blockLoc2}%}
								if {_originalType2} is not air:
									set {-unbreakable::%block%} to false
									set block at {_blockLoc2} to {_originalType2}
								
							loop {_blocks3::*}:
								set {_blockLoc3} to loop-value
								set {_originalType3} to {_blocks3::%{_blockLoc3}%}
								if {_originalType3} is not air:
									set {-unbreakable::%block%} to false
									set block at {_blockLoc3} to {_originalType3}
								
							loop {_blocks4::*}:
								set {_blockLoc4} to loop-value
								set {_originalType4} to {_blocks4::%{_blockLoc4}%}
								if {_originalType4} is not air:
									set {-unbreakable::%block%} to false
									set block at {_blockLoc4} to {_originalType4}
							loop blocks in radius {_radius} around {_loc}:
								set {-unbreakable::%loop-block%} to false
							delete {-lifeActive}
							if WhatEnergy(player's offhand item) > 0:
								setCooldown("Vitality::%uuid of player%", toMilli(5, 30), player)
							if WhatEnergy(player's offhand item) > 2:
								setCooldown("Vitality::%uuid of player%", toMilli(3, 30), player)
							if WhatEnergy(player's offhand item) > 4:
								setCooldown("Vitality::%uuid of player%", toMilli(2, 30), player)
							if WhatEnergy(player's offhand item) > 5:
								setCooldown("Vitality::%uuid of player%", toMilli(1, 30), player)
							if WhatEnergy(player's offhand item) > 7:
								setCooldown("Vitality::%uuid of player%", toMilli(0, 30), player)

						else:
							set {_message} to getCooldownSeconds("Vitality::%uuid of player%")
							send "<##FE04B4>üîÆ <##FF686F>Your &füíñ<##FE04B4>Vitality Vortex <##FF686F>Ability is on cooldown for <##FE04B4>%{_message}%" to player
			else:
				set {-LifeDBC::%player%} to now


on damage:
	if IsDisabled(attacker) is not true:
		if WhatGem(attacker's offhand item) is "fire":
			if WhatEnergy(attacker's offhand item) > 2:
				if attacker is not victim:
					chance of 15%
					ignite the victim

on shoot:
	if IsDisabled(shooter) is not true:
		if projectile is an arrow:
			if WhatGem(shooter's offhand item) is "fire":
				if WhatEnergy(shooter's offhand item) > 3:
					chance of 15%
					ignite the event-projectile


function setDCooldown(cooldown: text, value: int):
	set {-Cooldown::%{_cooldown}%} to System.currentTimeMillis() + {_value}
	

every 12 seconds:
	loop all players:
		if IsDisabled(loop-player) is not true:
			if WhatGem(loop-player's held item) is "fire":
				if WhatEnergy(loop-player's held item) > 4:
					if loop-player has raw iron:
						remove 1 raw iron from loop-player
						give loop-player 1 iron ingot
					if loop-player has raw gold:
						remove 1 raw gold from loop-player
						give loop-player 1 gold ingot
					if loop-player has mutton:
						remove 1 mutton from loop-player
						give loop-player 1 cooked mutton
					if loop-player has beef:
						remove 1 beef from loop-player
						give loop-player 1 cooked beef
					if loop-player has pork:
						remove 1 pork from loop-player
						give loop-player 1 cooked pork
					if loop-player has raw copper:
						remove 1 raw copper from loop-player
						give loop-player 1 copper ingot
					if loop-player has sand:
						remove 1 sand from loop-player
						give loop-player 1 glass
					if loop-player has ancient debris:
						remove 1 ancient debris from loop-player
						give loop-player 1 netherite scrap

			else if WhatGem(loop-player's offhand item) is "fire":
				if WhatEnergy(loop-player's offhand item) > 4:
					if loop-player has raw iron:
						remove 1 raw iron from loop-player
						give loop-player 1 iron ingot
					if loop-player has raw gold:
						remove 1 raw gold from loop-player
						give loop-player 1 gold ingot
					if loop-player has mutton:
						remove 1 mutton from loop-player
						give loop-player 1 cooked mutton
					if loop-player has beef:
						remove 1 beef from loop-player
						give loop-player 1 cooked beef
					if loop-player has pork:
						remove 1 pork from loop-player
						give loop-player 1 cooked pork
					if loop-player has raw copper:
						remove 1 raw copper from loop-player
						give loop-player 1 copper ingot
					if loop-player has sand:
						remove 1 sand from loop-player
						give loop-player 1 glass
					if loop-player has ancient debris:
						remove 1 ancient debris from loop-player
						give loop-player 1 netherite scrap



function WealthAction(itext: text, p: player):
	if {_itext} is "held":
		set {_i} to {_p}'s held item
		
	if {_itext} is "offhand":
		set {_i} to {_p}'s offhand item

	

	if WhatTier({_i}) is 2:
		set {_un} to getActionBarCooldown("Unfortunate::%uuid of {_p}%")

		set {_rr} to getActionBarCooldown("RichRush::%uuid of {_p}%")

		send action bar "&füçÄ %{_un}% <##0EC912>üîÆ &füí∏ %{_rr}%" to {_p}

	else:
		send action bar "<##0EC912>üî∫" to {_p}



function WealthLine(p: player, e: entity):
	loop 30 times:
		set {_pl} to location of {_p}
		set {_el} to location of {_e}
		set {_v} to vector from {_p}'s head to {_e}'s head
		set vector length of {_v} to 0.1
		set {_loc} to the location 0.7 meters under {_p}'s head
		loop (distance between {_loc} and {_e}) / 0.1 times:
			draw 1 dust using dustOption(rgb(0, 166, 44), 1) at {_loc} with force
			draw 1 dust_color_transition using dustTransition(black, black, 1) at {_loc} with force
			set {_loc} to {_loc} ~ {_v}
		wait 2 tick

function WealthCircleEXP(s: number, p: location):
	set {_spacing} to 0.1
	set {_pl} to location of {_p}
	set {_circumference} to 2 * pi * {_s}
	
	set {_numParticles} to floor({_circumference} / {_spacing})

	loop {_numParticles} times:
		set {_angle} to loop-value * 360 / {_numParticles}
		set {_v} to spherical vector with radius {_s}, yaw {_angle} and pitch 0
		
		make 1 of dust using dustOption(rgb(0, 166, 44), 1) at {_pl} ~ {_v}
		draw 1 of happy_villager at {_pl} ~ {_v} with extra 0 with force
		
function WealthCircle(s: number, p: location):
	set {_spacing} to 0.1
	set {_pl} to location of {_p}
	set {_circumference} to 2 * pi * {_s}
	
	set {_numParticles} to floor({_circumference} / {_spacing})
	
	loop {_numParticles} times:
		set {_angle} to loop-value * 360 / {_numParticles}
		set {_v} to spherical vector with radius {_s}, yaw {_angle} and pitch 0
		
		make 1 of dust using dustOption(rgb(0, 166, 44), 1) at {_pl} ~ {_v}
		draw 1 of smoke at {_pl} ~ {_v} with extra 0 with force
 
function WealthCirclelastEXP(s: number, p: location):
	set {_pl} to location of {_p}
	loop 7 times:
		WealthCircleEXP({_s}, {_pl})
		wait 0.3 seconds  
 
function WealthCirclelast(s: number, p: location):
	set {_pl} to location of {_p}
	loop 7 times:
		WealthCircle({_s}, {_pl})
		wait 0.3 seconds  

on inventory click:
	if event-inventory is a furnace inventory:
		if WhatGem(player's offhand item) is "wealth":
			if event-item is netherite scrap:
				set {_amtofscrap} to item amount of event-item
				execute console command "/give %player% netherite_scrap %{_amtofscrap}%"

on right click:
	if player is sneaking:
		if IsDisabled(player) is not true:
			if WhatGem(player's offhand item) is "wealth":
				if WhatEnergy(player's offhand item) is not 0:
					if player's held item is air or an axe or a sword:
						if {-DoubleClick::%player's uuid%} is not set:
							set {-DoubleClick::%player's uuid%} to true
						else:
							delete {-DoubleClick::%player's uuid%}
							if {wealthInv::%player's uuid%} is not set:
								set {wealthInv::%player's uuid%} to a dropper inventory named "Pockets" 
							else:
								open {wealthInv::%player's uuid%} for player


on death of player:
	if {wealthInv::%victim's uuid%} is set:
		set {_inv} to {wealthInv::%victim's uuid%}
		loop 5 times:
			set {_num} to a random integer between 0 and 8
			if slot {_num} of {_inv} is not air:
				set {_item} to slot {_num} of {_inv}
				if {_item} is not air:
					drop {_item} at victim's location
					set slot {_num} of {_inv} to air
			else:
				set {_num} to a random integer between 0 and 8

on left click:
	if IsDisabled(player) is not true:
		if WhatGem(player's held item) is "wealth":
			if WhatTier(player's held item) is 2:
				if canUsePower("Unfortunate::%uuid of player%") is true:
					if WhatEnergy(player's held item) > 0:
						setCooldown("Unfortunate::%uuid of player%", toMilli(15, 20), player)
					if WhatEnergy(player's held item) > 2:
						setCooldown("Unfortunate::%uuid of player%", toMilli(12, 20), player)
					if WhatEnergy(player's held item) > 5:
						setCooldown("Unfortunate::%uuid of player%", toMilli(10, 20), player)
					if WhatEnergy(player's held item) > 7:
						setCooldown("Unfortunate::%uuid of player%", toMilli(7, 20), player)
					if WhatEnergy(player's held item) > 8:
						setCooldown("Unfortunate::%uuid of player%", toMilli(5, 20), player)
					send "<##0EC912>üîÆ <##B8FFFB>You have used &füçÄ<##0EC912>Item Lock" to player
					set {_num} to 1
					set {_loc} to location of player
					loop 2 times:
						WealthCircleEXP({_num}, {_loc})
						add 0.5 to {_num}
						wait 1 tick
					WealthCirclelastEXP({_num}, {_loc})
					loop all players within 2 blocks of player's location:
						if loop-player is not player:
							if loop-player's held item is not a prismarine shard or an amethyst shard:
								set item cooldown of loop-player's held item for loop-player to 30 seconds
								if player is not invisible:
									send "<##0EC912>üîÆ <##B8FFFB>Your held item has been locked for <##0EC912>30 seconds <##B8FFFB>by <##0EC912>%player%" to loop-player
								else:
									send "<##0EC912>üîÆ <##B8FFFB>Your held item has been locked for <##0EC912>30 seconds <##B8FFFB>by <##0EC912>&k???" to loop-player
							
								set bar progress of {-ItemLock::Bar::%player's uuid%} to 100
								set {-ItemLock::Bar::%player's uuid%} to boss bar with id "%player's uuid%sitemlock" with title "&fItem Lock" with color green with progress 100
								set bar style of {-ItemLock::Bar::%player's uuid%} to solid bar
								add loop-player to bossbar players of {-ItemLock::Bar::%player's uuid%}
							
								loop 600 times:
									remove 0.167 from bar progress of {-ItemLock::Bar::%player's uuid%}
									wait 1 tick
						
								remove loop-player from bossbar players of {-ItemLock::Bar::%player's uuid%}


on right click:
	if item cooldown of player's held item for player is not 0 ticks:
		cancel event

on consume:
	if item cooldown of player's held item for player is not 0 ticks:
		cancel event
	if item cooldown of player's offhand item for player is not 0 ticks:
		cancel event

on left click:
	if item cooldown of player's held item for player is not 0 ticks:
		cancel event

on block break:
	if item cooldown of player's held item for player is not 0 ticks:
		cancel event


on damage:
	if attacker is player:
		if item cooldown of attacker's tool for attacker is not 0 ticks:
			cancel event

on damage:
	if IsDisabled(attacker) is not true:
		if WhatGem(attacker's held item) is "wealth":
			if WhatTier(attacker's held item) is 2:
				if canUsePower("Unfortunate::%uuid of attacker%") is true:
					if WhatEnergy(attacker's held item) > 0:
						setCooldown("Unfortunate::%uuid of attacker%", toMilli(15, 45), attacker)
					if WhatEnergy(attacker's held item) > 2:
						setCooldown("Unfortunate::%uuid of attacker%", toMilli(12, 20), attacker)
					if WhatEnergy(attacker's held item) > 5:
						setCooldown("Unfortunate::%uuid of attacker%", toMilli(10, 20), attacker)
					if WhatEnergy(attacker's held item) > 7:
						setCooldown("Unfortunate::%uuid of attacker%", toMilli(7, 20), attacker)
					if WhatEnergy(attacker's held item) > 8:
						setCooldown("Unfortunate::%uuid of attacker%", toMilli(5, 20), attacker)
					set {-Unfortunate::%victim's uuid%} to true
					WealthLine(attacker,victim)

					if victim is invisible:
						send "<##0EC912>üîÆ <##B8FFFB>You have used &füçÄ<##0EC912>Unfortunate <##B8FFFB>on &e&k???" to attacker
					else:		
						send "<##0EC912>üîÆ <##B8FFFB>You have used &füçÄ<##0EC912>Unfortunate <##B8FFFB>on &e%victim.getName()%" to attacker

					if attacker is invisible:
						send "<##0EC912>üîÆ <##B8FFFB>You have been affected with &füçÄ<##0EC912>Unfortunate <##B8FFFB>by &e&k???" to victim
					else:
						send "<##0EC912>üîÆ <##B8FFFB>You have been affected with &füçÄ<##0EC912>Unfortunate <##B8FFFB>by &e%attacker%" to victim
								
					set bar progress of {-Unfortunate::Bar::%attacker's uuid%} to 100
					set {-Unfortunate::Bar::%attacker's uuid%} to boss bar with id "%attacker's uuid%sunforunate" with title "&fUnfortunate" with color green with progress 100
					set bar style of {-Unfortunate::Bar::%attacker's uuid%} to solid bar
					add victim to bossbar players of {-Unfortunate::Bar::%attacker's uuid%}
							
					loop 800 times:
						remove 0.125 from bar progress of {-Unfortunate::Bar::%attacker's uuid%}
						wait 1 tick
							
					remove victim from bossbar players of {-Unfortunate::Bar::%attacker's uuid%}
					set {-Unfortunate::%victim's uuid%} to false

on damage:
	if {-Unfortunate::%attacker's uuid%} is true:
		chance of 33%
		cancel event
		play sound "block.anvil.land" for attacker

on right click:
	if {-Unfortunate::%player's uuid%} is true:
		chance of 33%
		cancel event
		play sound "block.anvil.land" for player

on left click:
	if {-Unfortunate::%player's uuid%} is true:
		chance of 33%
		cancel event
		play sound "block.anvil.land" for player

on shoot:
	if {-Unfortunate::%shooter's uuid%} is true:
		chance of 33%
		cancel event
		play sound "block.anvil.land" for shooter


on break:
	if IsDisabled(player) is not true:
		if event-block is ancient debris:
			if WhatGem(player's offhand item) is "wealth":
				if WhatTier(player's offhand item) is 2:
					cancel event
					set {_loc} to location of event-block
					set block at location at {_loc} to air
					drop 2 netherite scrap at {_loc}

on mine of any ore:
	if IsDisabled(player) is not true:
		if {-RichRush::%uuid of player%} is true:
			if event-block is not ancient debris:
				make 30 of dust using dustOption(rgb(14, 201, 18), 1) at event-block with offset vector(0.15, 0.15, 0.15) with extra 0 with force
				if player's held item is enchanted with silk touch:
					clear drops
				else:
					drop drops of block at event-block's location
			
on death:
	if victim is not a player or a mule or a donkey or a llama or a trader llama or a fox:
		if {-RichRush::%uuid of attacker%} is true:
			drop the drops
			
		
on right click:
	if IsDisabled(player) is not true:
		if target entity of player is not set:
			if WhatGem(player's held item) is "wealth":
				if WhatTier(player's held item) is 2:
					if WhatEnergy(player's held item) is not 0:
						if canUsePower("RichRush::%uuid of player%") is true:
							set {-RichRush::%uuid of player%} to true
							apply haste 2 without particles to player for 150 seconds
							send "<##0EC912>üîÆ <##B8FFFB>You have used &füí∏<##0EC912>Rich Rush <##B8FFFB>for <##0EC912>5 minutes" to player
							draw 10 of dust using dustOption(rgb(14, 201, 18), 1) at location 1 block above player with offset vector(0.3, 0.3, 0.3) with extra 0 with force
							make 5 of happy_villager at location 1 block above player with offset vector(0.4, 0.4, 0.4) with extra 0 with force
							if WhatEnergy(player's held item) > 0:
								setCooldown("RichRush::%uuid of player%", toMilli(15, 45), player)
							if WhatEnergy(player's held item) > 2:
								setCooldown("RichRush::%uuid of player%", toMilli(12, 30), player)
							if WhatEnergy(player's held item) > 4:
								setCooldown("RichRush::%uuid of player%", toMilli(10, 45), player)
							if WhatEnergy(player's held item) > 7:
								setCooldown("RichRush::%uuid of player%", toMilli(7, 30), player)
							if WhatEnergy(player's held item) > 8:
								setCooldown("RichRush::%uuid of player%", toMilli(5, 45), player)
							wait 5 minutes
							set {-RichRush::%uuid of player%} to false



on right click on entity:
	if IsDisabled(player) is not true:
		if WhatGem(player's held item) is "wealth":
			if WhatTier(player's held item) is 2:
				if canUsePower("RichRush::%uuid of player%") is true:
					send "<##0EC912>üîÆ <##B8FFFB>You have used <##0EC912>Amplification <##B8FFFB>on <##0EC912>%target entity of player.getName()%" to player
					set {_loc} to location of target entity of player
					if WhatEnergy(player's held item) > 0:
						setCooldown("RichRush::%uuid of player%", toMilli(15,45), player)
					if WhatEnergy(player's held item) > 2:
						setCooldown("RichRush::%uuid of player%", toMilli(12,30), player)
					if WhatEnergy(player's held item) > 4:
						setCooldown("RichRush::%uuid of player%", toMilli(10,45), player)
					if WhatEnergy(player's held item) > 7:
						setCooldown("RichRush::%uuid of player%", toMilli(7,30), player)
					if WhatEnergy(player's held item) > 8:
						setCooldown("RichRush::%uuid of player%", toMilli(5,45), player)
					set {_num} to 1
					loop 2 times:
						WealthCircle({_num}, {_loc})
						add 0.5 to {_num}
						wait 1 tick
					WealthCirclelast({_num}, {_loc})
					loop all players within 2 blocks of {_loc}:
						if IsTrusted(player, loop-player) is true:
							send "<##0EC912>üîÆ <##B8FFFB>You have been affected with <##0EC912>Amplification <##B8FFFB>by <##0EC912>%player%" to loop-player
							loop all items in loop-player's inventory:
								set {-Amplification} to true
								if loop-item is enchanted with sharpness 5:
									enchant loop-item with sharpness 6
								if loop-item is enchanted with sharpness 4:
									enchant loop-item with sharpness 5
								if loop-item is enchanted with unbreaking 3:
									enchant loop-item with unbreaking 4
								if loop-item is enchanted with mending:
									enchant loop-item with mending 2
								if loop-item is enchanted with protection 4:
									enchant loop-item with protection 5
								if loop-item is enchanted with protection 3:
									enchant loop-item with protection 4
								if loop-item is enchanted with projectile protection 4:
									enchant loop-item with projectile protection 5
								if loop-item is enchanted with fire protection 4:
									enchant loop-item with fire protection 5
								if loop-item is enchanted with blast protection 4:
									enchant loop-item with blast protection 5
								if loop-item is enchanted with looting 3:
									enchant loop-item with looting 4
								if loop-item is enchanted with sweeping edge 3:
									enchant loop-item with sweeping edge 4
								if loop-item is enchanted with fire aspect 2:
									enchant loop-item with fire aspect 3
								if loop-item is enchanted with depth strider 3:
									enchant loop-item with depth strider 4
								if loop-item is enchanted with feather falling 4:
									enchant loop-item with feather falling 5
								if loop-item is enchanted with swift sneak 3:
									enchant loop-item with swift sneak 4
								if loop-item is enchanted with soul speed 3:
									enchant loop-item with soul speed 4
								if loop-item is enchanted with respiration 3:
									enchant loop-item with respiration 4
								if loop-item is enchanted with aqua affinity:
									enchant loop-item with aqua affinity 2
								if loop-item is enchanted with thorns 3:
									enchant loop-item with thorns 4
								if loop-item is enchanted with efficiency 5:
									enchant loop-item with efficiency 6
								if loop-item is enchanted with fortune 3:
									enchant loop-item with fortune 4
								if loop-item is enchanted with silk touch:
									enchant loop-item with silk touch 2
								if loop-item is enchanted with power 5:
									enchant loop-item with power 6
								if loop-item is enchanted with infinity:
									enchant loop-item with infinity 2
								if loop-item is enchanted with flame:
									enchant loop-item with flame 2
								if loop-item is enchanted with multishot:
									enchant loop-item with multishot 2
								if loop-item is enchanted with punch 2:
									enchant loop-item with punch 3
								if loop-item is enchanted with quick charge 3:
									enchant loop-item with quick charge 4
								if loop-item is enchanted with lure 3:
									enchant loop-item with lure 4
								if loop-item is enchanted with luck of the sea 3:
									enchant loop-item with luck of the sea 4
								if loop-item is enchanted with loyalty 3:
									enchant loop-item with loyalty 4
								if loop-item is enchanted with impaling 5:
									enchant loop-item with impaling 6
								if loop-item is enchanted with riptide 3:
									enchant loop-item with riptide 4
								if loop-item is enchanted with channeling:
									enchant loop-item with channeling 2
								if loop-item is enchanted with piercing 4:
									enchant loop-item with piercing 5
							
					loop all items in player's inventory:
						if loop-item is enchanted with sharpness 5:
							enchant loop-item with sharpness 6
							set {-Amplification} to true
						if loop-item is enchanted with sharpness 4:
							enchant loop-item with sharpness 5
							set {-Amplification} to true
						if loop-item is enchanted with unbreaking 3:
							enchant loop-item with unbreaking 4
							set {-Amplification} to true
						if loop-item is enchanted with mending:
							enchant loop-item with mending 2
							set {-Amplification} to true
						if loop-item is enchanted with protection 4:
							enchant loop-item with protection 5
							set {-Amplification} to true
						if loop-item is enchanted with protection 3:
							enchant loop-item with protection 4
							set {-Amplification} to true
						if loop-item is enchanted with projectile protection 4:
							enchant loop-item with projectile protection 5
							set {-Amplification} to true
						if loop-item is enchanted with fire protection 4:
							enchant loop-item with fire protection 5
							set {-Amplification} to true
						if loop-item is enchanted with blast protection 4:
							enchant loop-item with blast protection 5
							set {-Amplification} to true
						if loop-item is enchanted with looting 3:
							enchant loop-item with looting 4
							set {-Amplification} to true
						if loop-item is enchanted with sweeping edge 3:
							enchant loop-item with sweeping edge 4
							set {-Amplification} to true
						if loop-item is enchanted with fire aspect 2:
							enchant loop-item with fire aspect 3
							set {-Amplification} to true
						if loop-item is enchanted with depth strider 3:
							enchant loop-item with depth strider 4
							set {-Amplification} to true
						if loop-item is enchanted with feather falling 4:
							enchant loop-item with feather falling 5
							set {-Amplification} to true
						if loop-item is enchanted with swift sneak 3:
							enchant loop-item with swift sneak 4
							set {-Amplification} to true
						if loop-item is enchanted with soul speed 3:
							enchant loop-item with soul speed 4
							set {-Amplification} to true
						if loop-item is enchanted with respiration 3:
							enchant loop-item with respiration 4
							set {-Amplification} to true
						if loop-item is enchanted with aqua affinity:
							enchant loop-item with aqua affinity 2
							set {-Amplification} to true
						if loop-item is enchanted with thorns 3:
							enchant loop-item with thorns 4
							set {-Amplification} to true
						if loop-item is enchanted with efficiency 5:
							enchant loop-item with efficiency 6
							set {-Amplification} to true
						if loop-item is enchanted with fortune 3:
							enchant loop-item with fortune 4
							set {-Amplification} to true
						if loop-item is enchanted with silk touch:
							enchant loop-item with silk touch 2
							set {-Amplification} to true
						if loop-item is enchanted with power 5:
							enchant loop-item with power 6
							set {-Amplification} to true
						if loop-item is enchanted with power 4:
							enchant loop-item with power 5
							set {-Amplification} to true
						if loop-item is enchanted with infinity:
							enchant loop-item with infinity 2
							set {-Amplification} to true
						if loop-item is enchanted with flame:
							enchant loop-item with flame 2
							set {-Amplification} to true
						if loop-item is enchanted with multishot:
							enchant loop-item with multishot 2
							set {-Amplification} to true
						if loop-item is enchanted with punch 2:
							enchant loop-item with punch 3
							set {-Amplification} to true
						if loop-item is enchanted with quick charge 3:
							enchant loop-item with quick charge 4
							set {-Amplification} to true
						if loop-item is enchanted with lure 3:
							enchant loop-item with lure 4
							set {-Amplification} to true
						if loop-item is enchanted with luck of the sea 3:
							enchant loop-item with luck of the sea 4
							set {-Amplification} to true
						if loop-item is enchanted with loyalty 3:
							enchant loop-item with loyalty 4
							set {-Amplification} to true
						if loop-item is enchanted with impaling 5:
							enchant loop-item with impaling 6
							set {-Amplification} to true
						if loop-item is enchanted with riptide 3:
							enchant loop-item with riptide 4
							set {-Amplification} to true
						if loop-item is enchanted with channeling:
							enchant loop-item with channeling 2
							set {-Amplification} to true
						if loop-item is enchanted with piercing 4:
							enchant loop-item with piercing 5
							set {-Amplification} to true
					wait 50 seconds
					set {-Amplification} to false
				
every 1 second:
	loop all players:
		if {-Amplification} is not true:
			if {Prog3} or {Prog4} is true:
				loop all items in loop-player's inventory:
					if loop-item is enchanted with sharpness 6:
						enchant loop-item with sharpness 5

					if loop-item is enchanted with unbreaking 4:
						enchant loop-item with unbreaking 3


					if loop-item is enchanted with mending 2:
						enchant loop-item with mending 1

					if loop-item is enchanted with protection 5:
						enchant loop-item with protection 4

					if loop-item is enchanted with projectile protection 5:
						enchant loop-item with projectile protection 4

					if loop-item is enchanted with fire protection 5:
						enchant loop-item with fire protection 4

					if loop-item is enchanted with blast protection 5:
						enchant loop-item with blast protection 4

					if loop-item is enchanted with looting 4:
						enchant loop-item with looting 3

					if loop-item is enchanted with sweeping edge 4:
						enchant loop-item with sweeping edge 3

					if loop-item is enchanted with fire aspect 3:
						enchant loop-item with fire aspect 2

					if loop-item is enchanted with depth strider 4:
						enchant loop-item with depth strider 3

					if loop-item is enchanted with feather falling 5:
						enchant loop-item with feather falling 4

					if loop-item is enchanted with swift sneak 4:
						enchant loop-item with swift sneak 3

					if loop-item is enchanted with soul speed 4:
						enchant loop-item with soul speed 3

					if loop-item is enchanted with respiration 4:
						enchant loop-item with respiration 3

					if loop-item is enchanted with aqua affinity 2:
						enchant loop-item with aqua affinity

					if loop-item is enchanted with thorns 4:
						enchant loop-item with thorns 3

					if loop-item is enchanted with efficiency 6:
						enchant loop-item with efficiency 5

					if loop-item is enchanted with fortune 4:
						enchant loop-item with fortune 3

					if loop-item is enchanted with silk touch 2:
						enchant loop-item with silk touch

					if loop-item is enchanted with power 6:
						enchant loop-item with power 5

					if loop-item is enchanted with infinity 2:
						enchant loop-item with infinity

					if loop-item is enchanted with flame 2:
						enchant loop-item with flame

					if loop-item is enchanted with multishot 2:
						enchant loop-item with multishot

					if loop-item is enchanted with punch 3:
						enchant loop-item with punch 2

					if loop-item is enchanted with quick charge 4:
						enchant loop-item with quick charge 3

					if loop-item is enchanted with lure 4:
						enchant loop-item with lure 3

					if loop-item is enchanted with luck of the sea 4:
						enchant loop-item with luck of the sea 3

					if loop-item is enchanted with loyalty 4:
						enchant loop-item with loyalty 3

					if loop-item is enchanted with impaling 6:
						enchant loop-item with impaling 5
					
					if loop-item is enchanted with riptide 4:
						enchant loop-item with riptide 3
					
					if loop-item is enchanted with channeling 2:
						enchant loop-item with channeling
					
					if loop-item is enchanted with piercing 5:
						enchant loop-item with piercing 4
			
			if {Prog2} is true:
				loop all items in loop-player's inventory:
					if loop-item is enchanted with sharpness 5:
						enchant loop-item with sharpness 4

					if loop-item is enchanted with unbreaking 4:
						enchant loop-item with unbreaking 3


					if loop-item is enchanted with mending 2:
						enchant loop-item with mending 1

					if loop-item is enchanted with protection 4:
						enchant loop-item with protection 3

					if loop-item is enchanted with projectile protection 4:
						enchant loop-item with projectile protection 3

					if loop-item is enchanted with fire protection 4:
						enchant loop-item with fire protection 3

					if loop-item is enchanted with blast protection 4:
						enchant loop-item with blast protection 3

					if loop-item is enchanted with looting 4:
						enchant loop-item with looting 3

					if loop-item is enchanted with sweeping edge 4:
						enchant loop-item with sweeping edge 3

					if loop-item is enchanted with fire aspect 3:
						enchant loop-item with fire aspect 2

					if loop-item is enchanted with depth strider 4:
						enchant loop-item with depth strider 3

					if loop-item is enchanted with feather falling 5:
						enchant loop-item with feather falling 4

					if loop-item is enchanted with swift sneak 4:
						enchant loop-item with swift sneak 3

					if loop-item is enchanted with soul speed 4:
						enchant loop-item with soul speed 3

					if loop-item is enchanted with respiration 4:
						enchant loop-item with respiration 3

					if loop-item is enchanted with aqua affinity 2:
						enchant loop-item with aqua affinity

					if loop-item is enchanted with thorns 4:
						enchant loop-item with thorns 3

					if loop-item is enchanted with efficiency 5:
						enchant loop-item with efficiency 4

					if loop-item is enchanted with fortune 4:
						enchant loop-item with fortune 3

					if loop-item is enchanted with silk touch 2:
						enchant loop-item with silk touch

					if loop-item is enchanted with power 5:
						enchant loop-item with power 4

					if loop-item is enchanted with infinity 2:
						enchant loop-item with infinity

					if loop-item is enchanted with flame 2:
						enchant loop-item with flame

					if loop-item is enchanted with multishot 2:
						enchant loop-item with multishot

					if loop-item is enchanted with punch 3:
						enchant loop-item with punch 2

					if loop-item is enchanted with quick charge 4:
						enchant loop-item with quick charge 3

					if loop-item is enchanted with lure 4:
						enchant loop-item with lure 3

					if loop-item is enchanted with luck of the sea 4:
						enchant loop-item with luck of the sea 3

					if loop-item is enchanted with loyalty 4:
						enchant loop-item with loyalty 3

					if loop-item is enchanted with impaling 6:
						enchant loop-item with impaling 5
					
					if loop-item is enchanted with riptide 4:
						enchant loop-item with riptide 3
					
					if loop-item is enchanted with channeling 2:
						enchant loop-item with channeling
					
					if loop-item is enchanted with piercing 5:
						enchant loop-item with piercing 4

			if {Prog1} is true:
				loop all items in loop-player's inventory:
					if loop-item is not amethyst shard or prismarine shard:
						if loop-item is not obsidian:
							disenchant loop-item
					if loop-item is obsidian:
						if loop-item is not enchanted:
							remove 1 of loop-item from loop-player's inventory


on join:
	set {damage::%player's uuid%} to 0

on death of player:
	set {damage::%victim's uuid%} to 0		

# Disabling functions / mechanics

function IsDisabled(p: player) :: boolean:
	if {-Disabled::%{_p}'s uuid%} is not 0:
		return true
	else:
		return false

function IsDisabledTimer(p: player) :: boolean:
	if {-disabledTimer::%{_p}'s uuid%} is not 0:
		return true
	else:
		return false

on tab complete for "/trust":
	set tab completions for position 1 to "add" and "remove" and "list"


on inventory click:
	if name of event-inventory is "<##FFE4AB>·¥õ Ä·¥ús·¥õ·¥á·¥Ö ·¥ò ü·¥Ä è·¥á Äs":
		cancel event
		if event-item is a player head:
			set {_T} to event-item's name
			replace all "<##B8FFFB>" with "" in {_T}
			set {_Tplayer} to "%{_T}%" parsed as offline player

			set {_uuid} to uuid of player
			send "<##FFD773>üîÆ &cUntrusted <##B8FFFB>%{_T}%" to player
			remove {_Tplayer}'s uuid from {-Trusted::%uuid of player%::*}
			remove event-item from player's current inventory



command /trust [<text>] [<offlineplayer>]:
	aliases: /blissgems:trust
	trigger:
		set {_uuid} to uuid of player
		set {_arguuid} to uuid of arg-2
		if arg-1 is "list":
			set {_s} to 0
			set {_Bliss::Trusted::GUI} to a new chest inventory with 3 row with name "<##FFE4AB>·¥õ Ä·¥ús·¥õ·¥á·¥Ö ·¥ò ü·¥Ä è·¥á Äs"
			loop {-Trusted::%uuid of player%::*}:

				set {_p} to loop-value parsed as offline player
				set slot {_s} of {_Bliss::Trusted::GUI} to {_p}'s skull named "<##B8FFFB>%{_p}%" with lore "" and "&fClick to &cuntrust"
				add 1 to {_s}

			open {_Bliss::Trusted::GUI} to player

		if arg-1 is "add":
			if arg-2 is set:
				if arg-2 is not player:
					if {-Trusted::%uuid of player%::*} contains {_arguuid}:
						send "<##FFD773>üîÆ <##B8FFFB>%arg-2% &cis already trusted!" to player


					else:
						
						set {_uuid} to uuid of player
						add {_arguuid} to {-Trusted::%uuid of player%::*}

						send "<##FFD773>üîÆ &aTrusted <##B8FFFB>%arg-2%" to player
				else:
					send "<##FFD773>üîÆ <##FC8888>You cannot trust yourself!" to player

					
		if arg-1 is "remove":
			if arg-2 is set:
				if arg-2 is not player:
					if {-Trusted::%uuid of player%::*} contains {_arguuid}:
						send "<##FFD773>üîÆ &cUntrusted <##B8FFFB>%arg-2%" to player
						remove {_arguuid} from {-Trusted::%uuid of player%::*}
				else:
					send "<##FFD773>üîÆ <##FC8888>You cannot untrust yourself!" to player



on damage:
	if victim is player:
		loop all items in victim's inventory:
			if IsGem(loop-item) is true:
				if WhatEnergy(loop-item) is 0:
					add damage / 2 to damage